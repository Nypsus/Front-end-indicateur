{"version":3,"sources":["App.js","index.js"],"names":["usdtAddress","usdtABI","ethers","providers","JsonRpcProvider","App","web3Modal","setWeb3Modal","useState","provider","setProvider","walletConnected","setWalletConnected","walletAddress","setWalletAddress","productInfo","setProductInfo","selectedProductId","setSelectedProductId","productId","setProductId","productPrice","setProductPrice","bnbToUsdRate","setBnbToUsdRate","selectedCurrency","setSelectedCurrency","convertedPrice","setConvertedPrice","contractInstance","setContractInstance","products","product1","price","exists","title","product2","product3","useEffect","modal","Web3Modal","cacheProvider","providerOptions","walletconnect","package","WalletConnectProvider","options","infuraId","metamask","trustwallet","interval","setInterval","web3ModalElement","document","querySelector","style","zIndex","clearInterval","hideIframe","iframe","display","async","contractAddress","contractABI","contract","Contract","getSigner","productDetails","error","console","loadBlockchainData","response","axios","get","data","binancecoin","usd","fetchBnbToUsdRate","loading","setLoading","transactionInProgress","setTransactionInProgress","checkAllowance","tokenContract","allowance","address","lt","amount","log","approveToken","toString","tx","approve","hash","wait","status","payForProduct","alert","tokenAddress","constants","AddressZero","pay","value","_jsxs","className","children","_jsx","onClick","instance","connect","newProvider","Web3Provider","signer","getAddress","clearCachedProvider","window","ethereum","request","method","params","eth_accounts","setTimeout","reconnectToMetaMask","retryError","onChange","event","selectedId","target","updateProductInfo","newCurrency","amountIn","utils","parseUnits","message","ReactDOM","createRoot","getElementById","render","React","StrictMode"],"mappings":"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","file":"static/js/main.4c716b13.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport Web3Modal from 'web3modal';\nimport { ethers } from 'ethers';\nimport axios from 'axios';\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport process from 'process';\nimport './App.css'; // Importation du fichier CSS\nimport './index.css'; // Ajoute cette ligne dans ton fichier JavaScript\n\n\n// Adresse du contrat USDT sur BSC (assure-toi que c'est l'adresse correcte pour le r√©seau que tu utilises)\nconst usdtAddress = '0x55d398326f99059fF775485246999027B3197955'; // Adresse du contrat USDT sur Binance Smart Chain\n\n// ABI pour le contrat USDT\nconst usdtABI = [\n  \"function balanceOf(address) view returns (uint256)\",\n  \"function allowance(address, address) view returns (uint256)\",\n  \"function approve(address spender, uint256 amount) public returns (bool)\",\n  \"function transferFrom(address sender, address recipient, uint256 amount) public returns (bool)\"\n];\n\n\n\n\nconst contractAddress = '0xCd25eee89Bb01603f0E0cf8D8C243966a926761d';\nconst bscTestnetRpcUrl = \"https://bsc-dataseed.binance.org/\"; // BSC Mainnet\nconst bscTestnetProvider = new ethers.providers.JsonRpcProvider(bscTestnetRpcUrl);\n\n\n\n\nfunction App() {\n  const [web3Modal, setWeb3Modal] = useState(null);\n  const [provider, setProvider] = useState(null);\n  const [walletConnected, setWalletConnected] = useState(false);\n  const [walletAddress, setWalletAddress] = useState('');\n\n  const [productInfo, setProductInfo] = useState(null);\n  const [selectedProductId, setSelectedProductId] = useState(null); // ou un ID de produit par d√©faut\n\n  const [productId, setProductId] = useState('');\n  const [productPrice, setProductPrice] = useState(null);\n  const [bnbToUsdRate, setBnbToUsdRate] = useState(null);\n  const [selectedCurrency, setSelectedCurrency] = useState('USD');\n  const [convertedPrice, setConvertedPrice] = useState(null);\n  const [contractInstance, setContractInstance] = useState(null); // D√©clarez `contractInstance` ici\n  const products = {\n    product1: { price: 5, exists: true, title: \"Indicateur Daily\" },\n    product2: { price: 295, exists: true, title: \"Indicateur 4h/1h\" },\n    product3: { price: 495, exists: true, title: \"Indicateur 15mn\" }\n  };\n  \n\n\n\n\n\n\n  \n  // Initialisation de Web3Modal pour la connexion aux portefeuilles\n  useEffect(() => {\n  const modal = new Web3Modal({\n    cacheProvider: true, // Gardera en cache la derni√®re connexion\n    providerOptions: {\n      walletconnect: {\n        package: WalletConnectProvider, // Utilisation de WalletConnectProvider\n        options: {\n          infuraId: \"e759bc5af90042a1b66c5a01aae905af\" // Remplace avec ton propre infura ID\n        }\n      },\n      metamask: {\n        package: null, // MetaMask ne n√©cessite pas de package\n        \n      },\n      trustwallet: {\n        package: WalletConnectProvider, // Utilisation de WalletConnectProvider pour Trust Wallet\n        options: {\n          infuraId: \"pDtEhrK4AAiPfirK7qsQI25NJlgrtMu1bBcFDqV4J95GTCAR2d/8Lg\" // Remplace avec ton propre infura ID\n        }\n      },\n      \n      // Ajoute d'autres options de portefeuille ici si n√©cessaire (par exemple : Fortmatic, etc.)\n    }\n  });\n\n  setWeb3Modal(modal);\n\n  // V√©rifie si la modale est pr√©sente dans le DOM\n  const interval = setInterval(() => {\n    const web3ModalElement = document.querySelector('.web3-modal-container');\n    if (web3ModalElement) {\n      web3ModalElement.style.zIndex = '999999'; // Modale au-dessus de tout\n      clearInterval(interval);\n    }\n  }, 100);\n\n  return () => clearInterval(interval);\n\n}, []);\n\n  \n\n\n  // Masquer l'iframe si elle est pr√©sente\n  const hideIframe = () => {\n    const iframe = document.querySelector('iframe');\n    if (iframe) {\n      iframe.style.display = 'none'; // ou iframe.remove() si tu pr√©f√®res\n    }\n  };\n\n  // Appel de la fonction pour masquer l'iframe au moment o√π Web3Modal est charg√©\n  hideIframe();\n  \n\n  // Fonction pour reconnecter MetaMask\n  const reconnectToMetaMask = async () => {\n    if (typeof window.ethereum === \"undefined\") {\n      alert(\"MetaMask n'est pas install√© !\");\n      return;\n    }\n\n    try {\n      \n      await window.ethereum.request({\n        method: 'wallet_requestPermissions',\n        params: [{\n          eth_accounts: {}\n        }]\n      });\n\n      setTimeout(async () => {\n        const accounts = await window.ethereum.request({\n          method: 'eth_requestAccounts',\n        });\n\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n        const address = await signer.getAddress();\n\n        setWalletAddress(address);\n        setWalletConnected(true);\n        alert(`Compte connect√© : ${address}`);\n      }, 1000);\n    } catch (error) {\n      console.error('Erreur de connexion √† MetaMask :', error);\n      alert('√âchec de la connexion √† MetaMask.');\n    }\n  };\n\n\n  // Connexion au wallet via Web3Modal\n  const connectWallet = async () => {\n    if (!web3Modal) {\n      console.error(\"Web3Modal non initialis√©\");\n      return;\n    }\n    \n    try {\n      console.log(\"Tentative de connexion au wallet...\");\n      \n      \n      // Connexion via Web3Modal\n      const instance = await web3Modal.connect();\n      const newProvider = new ethers.providers.Web3Provider(instance);\n      \n      // S'assurer que le provider est correctement d√©fini\n      if (!newProvider) {\n        console.error(\"Le fournisseur Web3 n'a pas √©t√© correctement cr√©√©\");\n        return;\n      }\n      \n      setProvider(newProvider);\n  \n      // R√©cup√©rer l'adresse du wallet\n      const signer = newProvider.getSigner();\n      const address = await signer.getAddress();\n      \n      setWalletAddress(address);\n      setWalletConnected(true);\n      \n      console.log(`Wallet connect√©: ${address}`);\n    } catch (error) {\n      console.error(\"Erreur lors de la connexion au portefeuille:\", error);\n      alert(\"Erreur de connexion au portefeuille. Veuillez connecter votre wallet.\");\n      // Ferme Web3Modal\n      web3Modal.clearCachedProvider();\n\n      // Relance le processus de reconnexion via MetaMask\n      try {\n        if (typeof window.ethereum !== \"undefined\") {\n          await reconnectToMetaMask();\n        } else {\n          alert(\"MetaMask n'est pas install√©.\");\n        }\n      } catch (retryError) {\n        console.error(\"√âchec de la reconnexion √† MetaMask\", retryError);\n        alert(\"La reconnexion √† MetaMask a √©chou√©.\");\n      }\n    }\n  };\n  \n\n  // R√©cup√©ration du taux de conversion BNB vers USD\n  const fetchBnbToUsdRate = async () => {\n    try {\n      const response = await axios.get('https://api.coingecko.com/api/v3/simple/price?ids=binancecoin&vs_currencies=usd');\n      setBnbToUsdRate(response.data.binancecoin.usd);\n    } catch (error) {\n      console.error('Erreur lors de la r√©cup√©ration du taux BNB -> USD', error);\n    }\n  };\n\n   // Charger les donn√©es du contrat et les informations du produit\nuseEffect(() => {\n  const loadBlockchainData = async () => {\n    if (provider) {\n      // Adresse du contrat et ABI\n      const contractAddress = '0xCd25eee89Bb01603f0E0cf8D8C243966a926761d';\n      const contractABI = [\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"token\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"addAllowedToken\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"token\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"amount\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"string\",\n        \"name\": \"productId\",\n        \"type\": \"string\"\n      }\n    ],\n    \"name\": \"pay\",\n    \"outputs\": [],\n    \"stateMutability\": \"payable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"token\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"removeAllowedToken\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address[]\",\n        \"name\": \"tokens\",\n        \"type\": \"address[]\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"constructor\"\n  },\n  {\n    \"anonymous\": false,\n    \"inputs\": [\n      {\n        \"indexed\": true,\n        \"internalType\": \"address\",\n        \"name\": \"user\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": false,\n        \"internalType\": \"uint256\",\n        \"name\": \"amount\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"indexed\": false,\n        \"internalType\": \"address\",\n        \"name\": \"token\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": false,\n        \"internalType\": \"string\",\n        \"name\": \"productId\",\n        \"type\": \"string\"\n      }\n    ],\n    \"name\": \"PaymentReceived\",\n    \"type\": \"event\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"string\",\n        \"name\": \"productId\",\n        \"type\": \"string\"\n      }\n    ],\n    \"name\": \"removeProduct\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"string\",\n        \"name\": \"productId\",\n        \"type\": \"string\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"price\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"setProductPrice\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"amount\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"withdraw\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"token\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"amount\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"withdrawToken\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"allowedTokens\",\n    \"outputs\": [\n      {\n        \"internalType\": \"bool\",\n        \"name\": \"\",\n        \"type\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"token\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"isTokenAllowed\",\n    \"outputs\": [\n      {\n        \"internalType\": \"bool\",\n        \"name\": \"\",\n        \"type\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"owner\",\n    \"outputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"\",\n        \"type\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"string\",\n        \"name\": \"\",\n        \"type\": \"string\"\n      }\n    ],\n    \"name\": \"products\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"price\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"bool\",\n        \"name\": \"exists\",\n        \"type\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n\n    \n  }\n];\n\n\n\n\n        // Cr√©e une nouvelle instance du contrat avec le provider\n      const contract = new ethers.Contract(contractAddress, contractABI, provider.getSigner());\n\n      // Appel direct √† la m√©thode du contrat, sans attendre que contractInstance soit mis √† jour\n      try {\n        const productDetails = await contract.products(\"product1\");\n        setProductInfo(productDetails);\n        setProductPrice(productDetails.price);\n      } catch (error) {\n        console.error(\"Erreur lors de la r√©cup√©ration des informations du produit:\", error);\n      }\n      \n      // Stocke cette instance dans l'√©tat\n      setContractInstance(contract);\n    }\n  };\n\n  loadBlockchainData();\n  fetchBnbToUsdRate();\n}, [provider]);  // D√©pendance sur 'provider' uniquement, pas besoin de contractInstance ici\n\n\n\n  \n  \n  \n  \n  \n\n\n\n\n  const [loading, setLoading] = useState(false); // Ajout de l'√©tat loading\n  const [transactionInProgress, setTransactionInProgress] = useState(false);\n\n  \n  \n  // Fonction pour approuver USDT\n  const approveUSDT = async (amountToSend) => {\n    const signer = new ethers.providers.Web3Provider(window.ethereum).getSigner();\n    const usdtContract = new ethers.Contract(usdtAddress, usdtABI, signer);\n  \n    try {\n      const allowance = await usdtContract.allowance(await signer.getAddress(), contractAddress);\n      console.log(\"Allowance actuelle:\", allowance.toString());\n  \n      if (allowance.lt(amountToSend)) {\n        console.log(\"Allowance insuffisante, approbation en cours...\");\n        const tx = await usdtContract.approve(contractAddress, amountToSend);\n        const receipt = await tx.wait();\n  \n        if (receipt.status === 1) {\n          console.log(\"Allowance mise √† jour !\");\n        } else {\n          console.error(\"L'approbation de l'allowance a √©chou√©.\");\n          throw new Error(\"√âchec de l'approbation de l'allowance.\");\n        }\n      } else {\n        console.log(\"Allowance suffisante.\");\n      }\n    } catch (error) {\n      console.error(\"Erreur lors de l'approbation de l'allowance USDT :\", error);\n    }\n  };\n  \n  \n  \n\n  \n  \n  \n  \n  // Fonction pour le paiement\n  const handlePayment = async () => {\n    if (!walletConnected) {\n      alert(\"Veuillez connecter votre wallet avant de proc√©der.\");\n      return;\n    }\n  \n    if (productId && productPrice) {\n      let amountIn = 0;\n  \n      try {\n        // Calculer le montant √† envoyer en fonction de la devise\n        if (selectedCurrency === 'USD') {\n          amountIn = productPrice;\n        } else if (selectedCurrency === 'BNB') {\n          if (!bnbToUsdRate) {\n            alert(\"Le taux de conversion BNB vers USD est en cours de chargement.\");\n            return;\n          }\n          amountIn = productPrice / bnbToUsdRate;\n        } else {\n          alert(\"Devise non support√©e pour ce paiement.\");\n          return;\n        }\n  \n        // Convertir en format compatible Ethereum (wei)\n        amountIn = ethers.utils.parseUnits(amountIn.toString(), selectedCurrency === 'USDT' ? 6 : 18);\n        console.log('Montant pour la transaction:', amountIn);\n  \n        // V√©rification de l'allowance et appel de approve si n√©cessaire\n        await checkAllowance(amountIn);\n  \n        // Effectuer le paiement une fois l'allowance confirm√©e\n        console.log(\"Paiement pr√™t √† √™tre effectu√©.\");\n        await payForProduct(amountIn);\n  \n        console.log(\"Transaction envoy√©e.\");\n      } catch (error) {\n        console.error(\"Erreur lors du calcul du montant:\", error.message);\n        alert(\"Une erreur s'est produite. Veuillez v√©rifier vos param√®tres.\");\n      }\n    } else {\n      alert(\"Veuillez s√©lectionner un produit valide.\");\n    }\n  };\n  \n  \n\n  // V√©rification de l'allowance\n  const checkAllowance = async (amount) => {\n    try {\n      // Assure-toi de r√©cup√©rer l'instance du token, par exemple USDT\n      const tokenContract = new ethers.Contract(usdtAddress, usdtABI, provider.getSigner());\n      const allowance = await tokenContract.allowance(walletAddress, contractInstance.address);\n  \n      if (allowance.lt(amount)) {\n        // Si l'allowance est insuffisante, demander une approbation\n        console.log(\"Allowance insuffisante, demande d'approbation...\");\n        await approveToken(amount);\n      } else {\n        console.log(\"Allowance suffisante\");\n        // Proceed with the payment if allowance is sufficient\n      }\n    } catch (error) {\n      console.error(\"Erreur lors de la v√©rification de l'allowance\", error);\n    }\n  };\n  \n  // Mise √† jour des informations du produit\n  const updateProductInfo = (selectedProductId) => {\n    setProductId(selectedProductId);\n    const productDetails = products[selectedProductId];\n\n    if (productDetails) {\n      const { price, exists } = productDetails;\n      setProductPrice(price);\n      setProductInfo({ price, exists });\n\n      if (selectedCurrency === 'USD') {\n        setConvertedPrice(price ? price.toString() : null);\n      } else if (selectedCurrency === 'BNB') {\n        setConvertedPrice(price ? (price / bnbToUsdRate).toString() : null);\n      }\n    } else {\n      console.error(\"Produit non trouv√© !\");\n    }\n  };\n\n  // Fonction pour approuver les tokens\n  const approveToken = async (amount) => {\n    try {\n      const tokenContract = new ethers.Contract(usdtAddress, usdtABI, provider.getSigner());\n      console.log(\"Demande d'approbation pour un montant de:\", amount.toString());\n  \n      const tx = await tokenContract.approve(contractInstance.address, amount);\n      console.log(\"Transaction d'approbation envoy√©e:\", tx.hash);\n  \n      // Attendre que la transaction soit confirm√©e\n      const receipt = await tx.wait();\n      if (receipt.status === 1) {\n        console.log(\"Approvisionnement effectu√© avec succ√®s !\");\n      } else {\n        console.error(\"La transaction d'approbation a √©chou√©.\");\n      }\n  \n      // Une fois l'approbation effectu√©e, appeler la fonction de paiement\n      await payForProduct(amount);  // Effectue le paiement apr√®s approbation\n    } catch (error) {\n      console.error(\"Erreur lors de l'approbation du token\", error);\n      alert(\"√âchec de l'approbation du token.\");\n    }\n  };\n\n\n  // Fonction pour effectuer le paiement\nconst payForProduct = async (amount) => {\n    try {\n      const tokenAddress = selectedCurrency === 'BNB' ? ethers.constants.AddressZero : usdtAddress;\n      const productId = selectedProductId;\n  \n      // Effectuer le paiement\n      const tx = await contractInstance.pay(tokenAddress, amount, productId, { value: selectedCurrency === 'BNB' ? amount : 0 });\n      console.log(\"Paiement effectu√© avec succ√®s. Tx hash:\", tx.hash);\n  \n      // Attendre la confirmation de la transaction\n      const receipt = await tx.wait();\n      if (receipt.status === 1) {\n        alert(\"Achat r√©ussi !\");\n      } else {\n        alert(\"√âchec de la transaction.\");\n      }\n    } catch (error) {\n      console.error(\"Erreur lors du paiement:\", error);\n      alert(\"Une erreur s'est produite lors du paiement.\");\n    }\n  };\n  \n  // Gestion du changement de devise\n  const handleCurrencyChange = (event) => {\n    const newCurrency = event.target.value;\n    setSelectedCurrency(newCurrency);\n  \n    if (newCurrency === 'USD') {\n      setConvertedPrice(productPrice ? productPrice.toString() : null);\n    } else if (newCurrency === 'BNB') {\n      setConvertedPrice(productPrice ? (productPrice / bnbToUsdRate).toString() : null);\n    }\n  };\n\n\n  const handleProductSelection = (event) => {\n    const selectedId = event.target.value;\n    setSelectedProductId(selectedId); // Mise √† jour de l'ID du produit\n    updateProductInfo(selectedId);    // Met √† jour les infos du produit\n  };\n  \n  \n  return (\n    <div className=\"App\">\n      <h1>Test de Paiement Multi-Produits avec Blockchain</h1>\n      <button onClick={connectWallet}>\n        {walletConnected ? `Wallet connect√© : ${walletAddress}` : 'Connecter le wallet'}\n      </button>\n  \n      {productId && productInfo && (\n        <div>\n          <p>Produit choisi : {productId}</p>\n          <p>Prix du produit : {convertedPrice ? convertedPrice : 'Chargement...'} {selectedCurrency}</p>\n          <p>Le produit est {productInfo.exists ? 'disponible' : 'indisponible'}</p>\n        </div>\n      )}\n  \n      <select onChange={handleProductSelection} value={selectedProductId}>\n        <option value=\"\">S√©lectionnez un produit</option>\n        <option value=\"product1\">Produit 1</option>\n        <option value=\"product2\">Produit 2</option>\n        <option value=\"product3\">Produit 3</option>\n      </select>\n  \n      <select onChange={handleCurrencyChange} value={selectedCurrency}>\n        <option value=\"USD\">USD</option>\n        <option value=\"BNB\">BNB</option>\n      </select>\n  \n      <button onClick={handlePayment}>Payer pour le produit</button>\n    </div>\n  );\n  };\n  \n  export default App;\n  ","import React from 'react';\nimport ReactDOM from 'react-dom/client';  // Cette ligne doit √™tre valide avec React 18\nimport App from './App';\nimport './index.css'; // Ajoute cette ligne dans ton fichier JavaScript\nimport './App.css'; \n\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n"],"sourceRoot":""}