{"version":3,"sources":["App.js","index.js"],"names":["usdtAddress","usdtABI","contractAddress","ethers","providers","JsonRpcProvider","App","_productInfo$productI","web3Modal","setWeb3Modal","useState","provider","setProvider","walletConnected","setWalletConnected","walletAddress","setWalletAddress","productInfo","setProductInfo","productId","setProductId","productPrice","setProductPrice","bnbToUsdRate","setBnbToUsdRate","selectedCurrency","setSelectedCurrency","convertedPrice","setConvertedPrice","contractInstance","setContractInstance","useEffect","modal","Web3Modal","cacheProvider","providerOptions","walletconnect","package","WalletConnectProvider","options","infuraId","metamask","trustwallet","interval","setInterval","web3ModalElement","document","querySelector","style","zIndex","clearInterval","hideIframe","iframe","display","async","contractABI","contract","Contract","getSigner","productDetails","products","price","error","console","loadBlockchainData","response","axios","get","data","binancecoin","usd","fetchBnbToUsdRate","loading","setLoading","transactionInProgress","setTransactionInProgress","ipfsUrl","productsFromIpfs","log","product1","product2","product3","fetchProductInfo","resetProvider","window","ethereum","newProvider","Web3Provider","Error","alert","changeNetworkHandler","on","removeListener","_jsxs","className","children","_jsx","id","autoPlay","loop","muted","src","type","onClick","instance","connect","signer","address","getAddress","clearCachedProvider","request","method","params","eth_accounts","setTimeout","reconnectToMetaMask","retryError","disabled","_Fragment","title","exists","onChange","e","selectedProductId","toString","updateProductInfo","target","value","event","newCurrency","checkNetwork","fetchedPriceInUsd","fetchPriceFromIFPS","getBnbToUsdRate","amountIn","parseFloat","toFixed","amountInEther","utils","parseUnits","gasLimit","BigNumber","require","adjustedGasPrice","getGasPrice","mul","from","div","walletBalance","getBalance","lt","add","usdtContract","balanceOf","allowance","tx","to","gasPrice","defaultAbiCoder","encode","transactionResponse","tokenAmount","transferFrom","sendTransaction","hash","wait","status","location","href","message","ReactDOM","createRoot","getElementById","render","React","StrictMode"],"mappings":"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","file":"static/js/main.8a4a943e.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport Web3Modal from 'web3modal';\nimport { ethers } from 'ethers';\nimport axios from 'axios';\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport process from 'process';\nimport './App.css'; // Importation du fichier CSS\nimport './index.css'; // Ajoute cette ligne dans ton fichier JavaScript\n\n\n// Adresse du contrat USDT sur BSC (assure-toi que c'est l'adresse correcte pour le réseau que tu utilises)\nconst usdtAddress = '0x55d398326f99059fF775485246999027B3197955'; // Adresse du contrat USDT sur Binance Smart Chain\n\n// ABI pour le contrat USDT\nconst usdtABI = [\n  // Seules les parties nécessaires pour ton utilisation, par exemple :\n  {\n    \"constant\": true,\n    \"inputs\": [\n      {\n        \"name\": \"_owner\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"balanceOf\",\n    \"outputs\": [\n      {\n        \"name\": \"balance\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"payable\": false,\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": false,\n    \"inputs\": [\n      {\n        \"name\": \"_to\",\n        \"type\": \"address\"\n      },\n      {\n        \"name\": \"_value\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"transferFrom\",\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bool\"\n      }\n    ],\n    \"payable\": false,\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  }\n];\n\n\n\nconst contractAddress = '0xCd25eee89Bb01603f0E0cf8D8C243966a926761d';\nconst bscTestnetRpcUrl = \"https://bsc-dataseed.binance.org/\"; // BSC Mainnet\nconst bscTestnetProvider = new ethers.providers.JsonRpcProvider(bscTestnetRpcUrl);\n\n\n\n\nfunction App() {\n  const [web3Modal, setWeb3Modal] = useState(null);\n  const [provider, setProvider] = useState(null);\n  const [walletConnected, setWalletConnected] = useState(false);\n  const [walletAddress, setWalletAddress] = useState('');\n\n  const [productInfo, setProductInfo] = useState(null);\n  const [productId, setProductId] = useState('');\n  const [productPrice, setProductPrice] = useState(null);\n  const [bnbToUsdRate, setBnbToUsdRate] = useState(null);\n  const [selectedCurrency, setSelectedCurrency] = useState('USD');\n  const [convertedPrice, setConvertedPrice] = useState(null);\n  const [contractInstance, setContractInstance] = useState(null); // Déclarez `contractInstance` ici\n\n\n\n\n\n\n\n  \n  // Initialisation de Web3Modal pour la connexion aux portefeuilles\n  useEffect(() => {\n  const modal = new Web3Modal({\n    cacheProvider: true, // Gardera en cache la dernière connexion\n    providerOptions: {\n      walletconnect: {\n        package: WalletConnectProvider, // Utilisation de WalletConnectProvider\n        options: {\n          infuraId: \"e759bc5af90042a1b66c5a01aae905af\" // Remplace avec ton propre infura ID\n        }\n      },\n      metamask: {\n        package: null, // MetaMask ne nécessite pas de package\n        \n      },\n      trustwallet: {\n        package: WalletConnectProvider, // Utilisation de WalletConnectProvider pour Trust Wallet\n        options: {\n          infuraId: \"pDtEhrK4AAiPfirK7qsQI25NJlgrtMu1bBcFDqV4J95GTCAR2d/8Lg\" // Remplace avec ton propre infura ID\n        }\n      },\n      \n      // Ajoute d'autres options de portefeuille ici si nécessaire (par exemple : Fortmatic, etc.)\n    }\n  });\n\n  setWeb3Modal(modal);\n\n  // Vérifie si la modale est présente dans le DOM\n  const interval = setInterval(() => {\n    const web3ModalElement = document.querySelector('.web3-modal-container');\n    if (web3ModalElement) {\n      web3ModalElement.style.zIndex = '999999'; // Modale au-dessus de tout\n      clearInterval(interval);\n    }\n  }, 100);\n\n  return () => clearInterval(interval);\n\n}, []);\n\n  \n\n\n  // Masquer l'iframe si elle est présente\n  const hideIframe = () => {\n    const iframe = document.querySelector('iframe');\n    if (iframe) {\n      iframe.style.display = 'none'; // ou iframe.remove() si tu préfères\n    }\n  };\n\n  // Appel de la fonction pour masquer l'iframe au moment où Web3Modal est chargé\n  hideIframe();\n  \n\n  // Fonction pour reconnecter MetaMask\n  const reconnectToMetaMask = async () => {\n    if (typeof window.ethereum === \"undefined\") {\n      alert(\"MetaMask n'est pas installé !\");\n      return;\n    }\n\n    try {\n      \n      await window.ethereum.request({\n        method: 'wallet_requestPermissions',\n        params: [{\n          eth_accounts: {}\n        }]\n      });\n\n      setTimeout(async () => {\n        const accounts = await window.ethereum.request({\n          method: 'eth_requestAccounts',\n        });\n\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n        const address = await signer.getAddress();\n\n        setWalletAddress(address);\n        setWalletConnected(true);\n        alert(`Compte connecté : ${address}`);\n      }, 1000);\n    } catch (error) {\n      console.error('Erreur de connexion à MetaMask :', error);\n      alert('Échec de la connexion à MetaMask.');\n    }\n  };\n\n\n  // Connexion au wallet via Web3Modal\n  const connectWallet = async () => {\n    if (!web3Modal) {\n      console.error(\"Web3Modal non initialisé\");\n      return;\n    }\n    \n    try {\n      console.log(\"Tentative de connexion au wallet...\");\n      \n      \n      // Connexion via Web3Modal\n      const instance = await web3Modal.connect();\n      const newProvider = new ethers.providers.Web3Provider(instance);\n      \n      // S'assurer que le provider est correctement défini\n      if (!newProvider) {\n        console.error(\"Le fournisseur Web3 n'a pas été correctement créé\");\n        return;\n      }\n      \n      setProvider(newProvider);\n  \n      // Récupérer l'adresse du wallet\n      const signer = newProvider.getSigner();\n      const address = await signer.getAddress();\n      \n      setWalletAddress(address);\n      setWalletConnected(true);\n      \n      console.log(`Wallet connecté: ${address}`);\n    } catch (error) {\n      console.error(\"Erreur lors de la connexion au portefeuille:\", error);\n      alert(\"Erreur de connexion au portefeuille. Veuillez connecter votre wallet.\");\n      // Ferme Web3Modal\n      web3Modal.clearCachedProvider();\n\n      // Relance le processus de reconnexion via MetaMask\n      try {\n        if (typeof window.ethereum !== \"undefined\") {\n          await reconnectToMetaMask();\n        } else {\n          alert(\"MetaMask n'est pas installé.\");\n        }\n      } catch (retryError) {\n        console.error(\"Échec de la reconnexion à MetaMask\", retryError);\n        alert(\"La reconnexion à MetaMask a échoué.\");\n      }\n    }\n  };\n  \n\n  // Récupération du taux de conversion BNB vers USD\n  const fetchBnbToUsdRate = async () => {\n    try {\n      const response = await axios.get('https://api.coingecko.com/api/v3/simple/price?ids=binancecoin&vs_currencies=usd');\n      setBnbToUsdRate(response.data.binancecoin.usd);\n    } catch (error) {\n      console.error('Erreur lors de la récupération du taux BNB -> USD', error);\n    }\n  };\n\n   // Charger les données du contrat et les informations du produit\n   useEffect(() => {\n    const loadBlockchainData = async () => {\n      if (provider) {\n        const contractAddress = '0xD62B5CFdDfd26F6219E4BF366d9DB6B1450D5905';\n        const contractABI = \n[\n\t{\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"address\",\n\t\t\t\t\"name\": \"token\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"addAllowedToken\",\n\t\t\"outputs\": [],\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"address\",\n\t\t\t\t\"name\": \"token\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\"name\": \"amount\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"internalType\": \"string\",\n\t\t\t\t\"name\": \"productId\",\n\t\t\t\t\"type\": \"string\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"pay\",\n\t\t\"outputs\": [],\n\t\t\"stateMutability\": \"payable\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"address\",\n\t\t\t\t\"name\": \"token\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"removeAllowedToken\",\n\t\t\"outputs\": [],\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"address[]\",\n\t\t\t\t\"name\": \"tokens\",\n\t\t\t\t\"type\": \"address[]\"\n\t\t\t}\n\t\t],\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"constructor\"\n\t},\n\t{\n\t\t\"anonymous\": false,\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"indexed\": true,\n\t\t\t\t\"internalType\": \"address\",\n\t\t\t\t\"name\": \"user\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"indexed\": false,\n\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\"name\": \"amount\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"indexed\": false,\n\t\t\t\t\"internalType\": \"address\",\n\t\t\t\t\"name\": \"token\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"indexed\": false,\n\t\t\t\t\"internalType\": \"string\",\n\t\t\t\t\"name\": \"productId\",\n\t\t\t\t\"type\": \"string\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"PaymentReceived\",\n\t\t\"type\": \"event\"\n\t},\n\t{\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"string\",\n\t\t\t\t\"name\": \"productId\",\n\t\t\t\t\"type\": \"string\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"removeProduct\",\n\t\t\"outputs\": [],\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"string\",\n\t\t\t\t\"name\": \"productId\",\n\t\t\t\t\"type\": \"string\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\"name\": \"price\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"setProductPrice\",\n\t\t\"outputs\": [],\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\"name\": \"amount\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"withdraw\",\n\t\t\"outputs\": [],\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"address\",\n\t\t\t\t\"name\": \"token\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\"name\": \"amount\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"withdrawToken\",\n\t\t\"outputs\": [],\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"address\",\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"allowedTokens\",\n\t\t\"outputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"bool\",\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"bool\"\n\t\t\t}\n\t\t],\n\t\t\"stateMutability\": \"view\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"address\",\n\t\t\t\t\"name\": \"token\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"isTokenAllowed\",\n\t\t\"outputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"bool\",\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"bool\"\n\t\t\t}\n\t\t],\n\t\t\"stateMutability\": \"view\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [],\n\t\t\"name\": \"owner\",\n\t\t\"outputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"address\",\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t}\n\t\t],\n\t\t\"stateMutability\": \"view\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"string\",\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"string\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"products\",\n\t\t\"outputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\"name\": \"price\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"internalType\": \"bool\",\n\t\t\t\t\"name\": \"exists\",\n\t\t\t\t\"type\": \"bool\"\n\t\t\t}\n\t\t],\n\t\t\"stateMutability\": \"view\",\n\t\t\"type\": \"function\"\n\n    \n\t}\n];\n\n\n\n\n        // Crée une nouvelle instance du contrat\n        const contract = new ethers.Contract(contractAddress, contractABI, provider.getSigner());\n\n        // Stocke cette instance dans l'état\n        setContractInstance(contract);\n        \n        try {\n          const productDetails = await contractInstance.products(\"product1\");\n          setProductInfo(productDetails);\n          setProductPrice(productDetails.price);\n        } catch (error) {\n          console.error(\"Erreur lors de la récupération des informations du produit:\", error);\n        }\n\n        \n      }\n    };\n\n    loadBlockchainData();\n    fetchBnbToUsdRate();\n  }, [provider]);\n\n\n\n  const [loading, setLoading] = useState(false); // Ajout de l'état loading\n  const [transactionInProgress, setTransactionInProgress] = useState(false);\n\n  const fetchProductInfo = async () => {\n    setLoading(true);  // On met à true pour indiquer qu'on charge les données\n    try {\n      // URL du fichier JSON hébergé sur IPFS via Pinata\n      const ipfsUrl = 'https://gateway.pinata.cloud/ipfs/bafkreib4ixmq42am4oth4mfpfcxbfrqbixjpo6jpk7omkopo7dik525gby';\n      const response = await axios.get(ipfsUrl);\n      const productsFromIpfs = response.data;\n\n      console.log(\"Données récupérées depuis IPFS:\", productsFromIpfs);\n    \n      // Vérification de la structure du JSON\n      if (productsFromIpfs && productsFromIpfs.product1 && productsFromIpfs.product2 && productsFromIpfs.product3) {\n        setProductInfo(productsFromIpfs);\n      } else {\n        console.error(\"Structure des produits invalide sur IPFS.\");\n      }\n    } catch (error) {\n      console.error('Erreur lors de la récupération des informations du produit depuis IPFS:', error);\n    } finally {\n      setLoading(false);  // Lorsque les données sont chargées ou en cas d'erreur, on met loading à false\n    }\n  };\n\n  \n  \n  useEffect(() => {\n    fetchProductInfo();\n  }, []);\n  \n\n  const fetchPriceFromIFPS = async (productId) => {\n    try {\n      const response = await axios.get('https://gateway.pinata.cloud/ipfs/Qme4BKfGHuMukLnbf7LqZTqK6snH57eFbENeqVzLfg28eg');\n      const productsFromIpfs = response.data;\n  \n      console.log(\"Données récupérées depuis IPFS:\", productsFromIpfs);\n  \n      if (productsFromIpfs && productsFromIpfs[productId] && productsFromIpfs[productId].price > 0) {\n        return productsFromIpfs[productId].price; // Prix en USD\n      } else {\n        throw new Error(\"Produit invalide ou prix manquant.\");\n      }\n      \n    } catch (error) {\n      console.error(\"Erreur lors de la récupération du prix depuis IPFS :\", error);\n      alert(\"Le prix du produit est invalide ou n'a pas pu être récupéré. Vérifiez les données.\");\n      return 0;  // Retourne 0 si le prix est invalide\n    }\n  };\n\n\n// Fonction conversion BNB/USDT\n  const getBnbToUsdRate = async () => {\n    try {\n      const response = await axios.get('https://api.coingecko.com/api/v3/simple/price?ids=binancecoin&vs_currencies=usd');\n      const bnbToUsdRate = response.data.binancecoin.usd;\n      return bnbToUsdRate;\n    } catch (error) {\n      console.error(\"Erreur lors de la récupération du taux de conversion BNB/USD :\", error);\n      return 0;\n    }\n  };\n  \n  \n  \n  \n  const sendTransaction = async (amountIn, fetchedPriceInUsd) => {\n    if (!provider) {\n      alert(\"Le provider n'est pas défini, veuillez connecter votre wallet.\");\n      return;\n    }\n  \n    try {\n      // Utilise le provider et signer déjà définis via Web3Modal\n      const signer = provider.getSigner();\n      const amountInEther = ethers.utils.parseUnits(amountIn.toString(), 18);\n  \n      // Obtenez le prix du gaz actuel\n      const gasLimit = 50000;  // Limite de gaz pour la transaction\n      const { BigNumber } = require(\"ethers\");  // Assure-toi que BigNumber est importé correctement si nécessaire\n  \n      const gasPrice = await provider.getGasPrice();  // Utilise le prix actuel du gaz\n      const adjustedGasPrice = gasPrice.mul(BigNumber.from(\"110\")).div(BigNumber.from(\"100\")); // à ajuster si bug\n  \n      console.log(\"GasPrice ajusté : \", adjustedGasPrice.toString());  // Affiche le prix ajusté\n  \n      // Vérifiez que vous avez assez de fonds\n      const walletBalance = await provider.getBalance(signer.getAddress());\n      if (selectedCurrency === 'BNB' && walletBalance.lt(amountInEther.add(adjustedGasPrice))) {\n        alert(\"Solde insuffisant pour couvrir la transaction et les frais de gaz en BNB.\");\n        return;\n      }\n  \n      if (selectedCurrency === 'USDT') {\n        // Vérification du solde en USDT\n        const usdtContract = new ethers.Contract(usdtAddress, usdtABI, signer);\n        const usdtBalance = await usdtContract.balanceOf(signer.getAddress());\n        if (usdtBalance.lt(amountInEther)) {\n          alert(\"Solde insuffisant en USDT pour couvrir la transaction.\");\n          return;\n        }\n  \n        // Vérifier l'allowance avant d'effectuer le transfert\n        const allowance = await usdtContract.allowance(signer.getAddress(), contractAddress);\n        if (allowance.lt(amountInEther)) {\n          alert(\"Veuillez approuver le contrat USDT avant d'envoyer la transaction.\");\n          return;\n        }\n      }\n  \n      // Préparez la transaction\n      const tx = {\n        to: contractAddress,\n        value: selectedCurrency === 'BNB' ? amountInEther : 0,  // Montant en BNB\n        gasLimit: gasLimit,\n        gasPrice: adjustedGasPrice,\n        data: ethers.utils.defaultAbiCoder.encode([\"uint256\"], [fetchedPriceInUsd]),  // Envoie l'USD comme paramètre\n      };\n  \n      // Si la devise est USDT, envoyer les tokens via le contrat\n      let transactionResponse;\n      if (selectedCurrency === 'USDT') {\n        const usdtContract = new ethers.Contract(usdtAddress, usdtABI, signer);\n        const tokenAmount = ethers.utils.parseUnits(amountIn.toString(), 6); // USDT a 6 décimales\n        transactionResponse = await usdtContract.transferFrom(signer.getAddress(), contractAddress, tokenAmount);\n        console.log(\"USDT envoyés au contrat.\");\n      } else {\n        // Si la devise est BNB, envoyer la transaction en BNB\n        transactionResponse = await signer.sendTransaction(tx);\n        console.log(\"Transaction envoyée:\", transactionResponse.hash);\n      }\n  \n      // Attendez la confirmation de la transaction\n      const receipt = await transactionResponse.wait();\n      if (receipt.status === 1) {\n        console.log(\"Transaction réussie !\");\n        alert(\"Paiement effectué avec succès.\");\n        // Rediriger vers une nouvelle page après la transaction réussie\n        window.location.href = '/Delivrance_IndicateurD.html';  // Remplace '/confirmation.html' par le chemin de la page HTML\n  \n      } else {\n        alert(\"Échec de la transaction.\");\n      }\n  \n    } catch (error) {\n      console.error(\"Erreur lors de l'envoi de la transaction:\", error.message);\n      alert(\"Une erreur s'est produite lors de l'envoi de la transaction.\");\n    } finally {\n      // Si tu as des actions à effectuer après la transaction, comme réinitialiser un état ou déverrouiller des boutons, tu peux les ajouter ici\n      console.log(\"Transaction terminée.\");\n    }\n  };\n  \n  \n  \n\n\n  const checkNetwork = async () => {\n    if (typeof window.ethereum !== \"undefined\") {\n      const network = await window.ethereum.request({\n        method: 'eth_chainId'\n      });\n  \n      // Vérifie si l'utilisateur est bien sur BSC Testnet (chainId 97)\n      if (network !== '0x38') { // 0x38 est le chainId pour BSC Mainnet\n        alert(\"Veuillez vous connecter au réseau Binance Smart Chain Mainnet.\");\n        return false;\n      }\n      \n      return true;\n    } else {\n      console.error(\"Ethereum n'est pas disponible.\");\n      alert(\"MetaMask ou un autre portefeuille Ethereum n'est pas installé.\");\n      return false;\n    }\n  };\n\n\n\n\n\n\n  // Fonction pour réinitialiser le provider\n  const resetProvider = async () => {\n    try {\n      if (typeof window.ethereum !== \"undefined\") {\n        const newProvider = new ethers.providers.Web3Provider(window.ethereum);\n        setProvider(newProvider); // Mettre à jour le provider\n\n        // Attendre que React ait bien mis à jour le provider\n        return newProvider.getSigner(); // Retourner le signer après que le provider ait été mis à jour\n      } else {\n        throw new Error(\"Aucun fournisseur Ethereum n'est disponible.\");\n      }\n    } catch (error) {\n      console.error(\"Erreur dans resetProvider:\", error);\n      alert(\"Erreur lors de la réinitialisation du provider.\");\n      return null;\n    }\n  };\n\n  // Vérification du réseau à chaque fois qu'il change\n  useEffect(() => {\n    const changeNetworkHandler = async () => {\n      try {\n        await resetProvider(); // Remet à jour le provider lorsque le réseau change\n        console.log(\"Le provider a été réinitialisé après le changement de réseau.\");\n      } catch (error) {\n        console.error(\"Erreur lors du changement de réseau et réinitialisation du provider:\", error);\n      }\n    };\n\n    if (typeof window.ethereum !== \"undefined\") {\n      window.ethereum.on('chainChanged', changeNetworkHandler);\n    }\n\n    // Nettoyage quand le composant est démonté\n    return () => {\n      if (typeof window.ethereum !== \"undefined\") {\n        window.ethereum.removeListener('chainChanged', changeNetworkHandler);\n      }\n    };\n  }, []);\n  \n\n\n\n  const handlePayment = async () => {\n    if (loading || transactionInProgress) {\n      console.log(\"Transaction déjà en cours, veuillez patienter.\");\n      return; // Empêche l'exécution si une autre transaction est en cours\n    }\n    setLoading(true);  // Empêche d'envoyer une nouvelle transaction si une est déjà en cours\n    \n    if (!walletConnected) {\n      alert(\"Veuillez connecter votre wallet avant de procéder.\");\n      setLoading(false);  // Permet de déverrouiller le bouton si une erreur survient\n      setTransactionInProgress(false);  // Réinitialise l'état de la transaction\n      return;\n    }\n    \n    // Vérifie que le contrat est bien initialisé\n    if (!contractInstance) {\n      console.error(\"Le contrat n'est pas initialisé.\");\n      setLoading(false);\n      setTransactionInProgress(false);\n      return;\n    }\n\n    // Vérifie que le produit est bien sélectionné\n    if (!productId || !productInfo[productId]) {\n      alert(\"Veuillez sélectionner un produit valide et essayer de nouveau.\");\n      setLoading(false);\n      setTransactionInProgress(false);\n      return;\n    }\n\n    // Vérifie que l'utilisateur est sur le bon réseau\n    const isCorrectNetwork = await checkNetwork();\n    if (!isCorrectNetwork) {\n      setLoading(false);\n      setTransactionInProgress(false);\n      return;\n    }\n\n    // Vérifier que le provider est disponible\n    if (!provider) {\n      alert(\"Reconnexion au provider effectuée. Veuillez renouveler l'opération.\");\n      await resetProvider();\n      setLoading(false);\n      setTransactionInProgress(false);\n      return;\n    }\n      \n\n    // Récupération du prix en USD depuis IPFS\n    let fetchedPriceInUsd = await fetchPriceFromIFPS(productId);\n    if (fetchedPriceInUsd <= 0) {\n      alert(\"Le prix du produit est invalide.\");\n      setLoading(false);\n      setTransactionInProgress(false);\n      return;\n    }\n\n    // Récupération du taux de conversion BNB/USD\n    const bnbToUsdRate = await getBnbToUsdRate();\n    if (bnbToUsdRate <= 0) {\n      alert(\"Erreur de récupération du taux de conversion BNB/USD.\");\n      setLoading(false);\n      setTransactionInProgress(false);\n      return;\n    }\n\n    // Récupérer les détails du produit\n    const productDetails = productInfo[productId];\n\n    if (!productDetails || !productDetails.exists || productDetails.price <= 0) {\n      alert(\"Produit invalide ou prix incorrect.\");\n      setLoading(false);\n      setTransactionInProgress(false);\n      return;\n    }\n\n   \n\n    // --- Ajout de la fonction pour récupérer le prix du produit ---\n    let amountIn = 0;\n    try {\n      // Utilisation directement de fetchedPriceInUsd\n      amountIn = fetchedPriceInUsd;\n\n\n      // Vérification de la devise et calcul du montant à envoyer\n      if (selectedCurrency === 'USDT') {\n        amountIn = fetchedPriceInUsd; // Utilise directement le prix en USD\n      } else if (selectedCurrency === 'BNB') {\n        amountIn = fetchedPriceInUsd / bnbToUsdRate; // Conversion de USD en BNB\n      } else {\n        alert(\"Devise non supportée pour ce paiement.\");\n        setLoading(false);\n        setTransactionInProgress(false);\n        return;\n      }\n\n      // Logs de vérification\n      console.log(\"Prix du produit en USD:\", fetchedPriceInUsd);\n      console.log(\"Taux de conversion BNB/USD:\", bnbToUsdRate);\n      console.log(\"Montant en BNB à envoyer:\", amountIn);\n\n\n\n      // Vérifier que amountIn est valide et non nul avant d'envoyer la transaction\n      if (parseFloat(amountIn) <= 0) {\n        alert(\"Le montant à payer est invalide (0 ou négatif).\");\n        setLoading(false);\n        setTransactionInProgress(false);\n        return;\n      }\n\n      // Convertir le montant à un format acceptable (fixé à 18 décimales)\n      amountIn = parseFloat(amountIn).toFixed(18);\n      console.log('Montant final pour la transaction:', amountIn);\n\n      // Envoyer la transaction\n      \n      await sendTransaction(amountIn, fetchedPriceInUsd);\n\n      console.log(\"Transaction envoyée.\");\n\n    } catch (error) {\n      console.error(\"Erreur lors de l'envoi de la transaction:\", error.message);\n      alert(\"Une erreur s'est produite lors de l'envoi de la transaction. Vérifiez votre solde et les paramètres.\");\n    } finally {\n      setLoading(false);  // Permet de déverrouiller le bouton après l'exécution\n      setTransactionInProgress(false);  // Réinitialise l'état de la transaction\n    }\n  };\n  \n\n  \n  \n  // Mise à jour des informations du produit sélectionné\n  const updateProductInfo = (selectedProductId) => {\n    setProductId(selectedProductId);\n\n    // Vérifie si le produit existe et s'il est valide\n    if (productInfo && productInfo[selectedProductId]) {\n        const productDetails = productInfo[selectedProductId];\n\n        // Vérifie que le produit existe et a un prix valide\n        if (productDetails.exists && productDetails.price > 0) {\n            setProductPrice(productDetails.price);\n            \n            // Mise à jour du prix converti\n            if (selectedCurrency === 'USDT') {\n                setConvertedPrice(productDetails.price.toString());\n            } else if (selectedCurrency === 'BNB') {\n                setConvertedPrice((productDetails.price / bnbToUsdRate).toString());\n            }\n        } else {\n            alert(\"Produit invalide ou prix incorrect.\");\n            return;\n        }\n    } else {\n        alert(\"Produit non trouvé !\");\n        return;\n    }\n};\n\n\n\n  // Gestion du changement de devise (USD ou BNB)\n  const handleCurrencyChange = (event) => {\n    const newCurrency = event.target.value;\n    setSelectedCurrency(newCurrency);\n\n    if (newCurrency === 'USDT') {\n      setConvertedPrice(productPrice ? productPrice.toString() : null);\n    } else if (newCurrency === 'BNB') {\n      setConvertedPrice(productPrice ? (productPrice / bnbToUsdRate).toString() : null);\n    }\n  };\n\n  // Liste des produits\n  const products = {\n    product1: { price: 5, exists: true, title: \"Indicateur Daily\" },\n    product2: { price: 295, exists: true, title: \"Indicateur 4h/1h\" },\n    product3: { price: 495, exists: true, title: \"Indicateur 15mn\" }\n  };\n  \n\n  return (\n    <div className=\"App\">\n      {/* Afficher un message de chargement si `loading` est true */}\n      {loading && <div>Chargement des produits...</div>}\n\n      {/* Contenu principal */}\n      <div className=\"parallax-container\">\n        <video id=\"video-background\" autoPlay loop muted>\n          {/* Remplace la source locale par l'URL IPFS */}\n          <source \n            src=\"https://gateway.pinata.cloud/ipfs/QmPZ8v3KzeyH2Dqz29TZFWe4kswkUETJyesZFCFULtagwv\" \n            type=\"video/mp4\" \n          />\n          Votre navigateur ne supporte pas les vidéos HTML5.\n        </video>\n\n        {/* Contenu défilant */}\n        <div className=\"content\">\n          \n\n          {/* Bouton de connexion du wallet en haut à droite */}\n          <div className=\"wallet-connect-button\">\n            <button\n      \n              onClick={connectWallet}\n              disabled={walletConnected} // Désactive le bouton une fois connecté\n            >\n              {walletConnected ? (\n                <>\n                  <span>Wallet connecté : {walletAddress}</span>\n                  <span className=\"arrow-icon\">→</span> {/* Icône flèche */}\n                </>\n              ) : (\n                'Connecter le wallet'\n              )}\n            </button>\n          </div>\n\n          {/* Conteneur du formulaire de paiement */}\n          <div className=\"payment-wrapper\">\n            <h1> Les Indicateurs à Levier </h1>\n\n            {productId && productInfo && (\n              <div>\n                <p>Produit choisi : {productInfo[productId]?.title}</p>\n                <p>Prix du produit : {convertedPrice ? convertedPrice : 'Chargement...'} {selectedCurrency}</p>\n                <p>Le produit est {productInfo.exists ? 'disponible' : 'indisponible'}</p>\n              </div>\n            )}\n\n            <select onChange={(e) => updateProductInfo(e.target.value)} value={productId}>\n              <option value=\"\">Choisi Ton Indicateur</option>\n              <option value=\"product1\">Indicateur Daily</option>\n              <option value=\"product2\">Indicateur 4h/1h</option>\n              <option value=\"product3\">Indicateur 15mn</option>\n            </select>\n\n            <select onChange={handleCurrencyChange} value={selectedCurrency}>\n              <option value=\"USDT\">USD</option>\n              <option value=\"BNB\">BNB</option>\n            </select>\n\n            {/* Bouton de paiement */}\n            <button onClick={handlePayment} disabled={loading || transactionInProgress}>\n              {loading || transactionInProgress ? \"Paiement en cours...\" : \"Acheter\"}\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  \n  \n};\n\n\nexport default App;\n\n\n\n\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';  // Cette ligne doit être valide avec React 18\nimport App from './App';\nimport './index.css'; // Ajoute cette ligne dans ton fichier JavaScript\nimport './App.css'; \n\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n"],"sourceRoot":""}