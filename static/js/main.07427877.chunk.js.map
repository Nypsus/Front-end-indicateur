{"version":3,"sources":["App.js","index.js"],"names":["usdtAddress","usdtABI","contractAddress","ethers","providers","JsonRpcProvider","App","_productInfo$productI","web3Modal","setWeb3Modal","useState","provider","setProvider","walletConnected","setWalletConnected","walletAddress","setWalletAddress","productInfo","setProductInfo","productId","setProductId","productPrice","setProductPrice","bnbToUsdRate","setBnbToUsdRate","selectedCurrency","setSelectedCurrency","convertedPrice","setConvertedPrice","contractInstance","setContractInstance","useEffect","modal","Web3Modal","cacheProvider","providerOptions","walletconnect","package","WalletConnectProvider","options","infuraId","metamask","trustwallet","interval","setInterval","web3ModalElement","document","querySelector","style","zIndex","clearInterval","hideIframe","iframe","display","async","contractABI","contract","Contract","getSigner","productDetails","products","price","error","console","loadBlockchainData","response","axios","get","data","binancecoin","usd","fetchBnbToUsdRate","checkAllowance","usdtContract","allowance","log","toString","lt","amountToSend","alert","approve","loading","setLoading","transactionInProgress","setTransactionInProgress","ipfsUrl","productsFromIpfs","product1","product2","product3","fetchProductInfo","resetProvider","window","ethereum","newProvider","Web3Provider","Error","changeNetworkHandler","on","removeListener","_jsxs","className","children","_jsx","id","autoPlay","loop","muted","src","type","onClick","instance","connect","signer","address","getAddress","clearCachedProvider","request","method","params","eth_accounts","setTimeout","reconnectToMetaMask","retryError","disabled","_Fragment","title","exists","onChange","e","selectedProductId","updateProductInfo","target","value","event","newCurrency","checkNetwork","fetchedPriceInUsd","fetchPriceFromIFPS","getBnbToUsdRate","amountIn","parseFloat","toFixed","amount","tx","pay","gasLimit","wait","payForProduct","utils","parseUnits","formatUnits","BigNumber","require","adjustedGasPrice","getGasPrice","mul","from","div","walletBalance","getBalance","formatEther","add","usdtBalance","balanceOf","to","gasPrice","defaultAbiCoder","encode","transactionResponse","transferFrom","sendTransaction","hash","status","location","href","message","ReactDOM","createRoot","getElementById","render","React","StrictMode"],"mappings":"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","file":"static/js/main.07427877.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport Web3Modal from 'web3modal';\nimport { ethers } from 'ethers';\nimport axios from 'axios';\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport process from 'process';\nimport './App.css'; // Importation du fichier CSS\nimport './index.css'; // Ajoute cette ligne dans ton fichier JavaScript\n\n\n// Adresse du contrat USDT sur BSC (assure-toi que c'est l'adresse correcte pour le réseau que tu utilises)\nconst usdtAddress = '0x55d398326f99059fF775485246999027B3197955'; // Adresse du contrat USDT sur Binance Smart Chain\n\n// ABI pour le contrat USDT\nconst usdtABI = [\n  \"function balanceOf(address) view returns (uint256)\",\n  \"function allowance(address, address) view returns (uint256)\",\n  \"function approve(address spender, uint256 amount) public returns (bool)\",\n  \"function transferFrom(address sender, address recipient, uint256 amount) public returns (bool)\"\n];\n\n\n\n\nconst contractAddress = '0xCd25eee89Bb01603f0E0cf8D8C243966a926761d';\nconst bscTestnetRpcUrl = \"https://bsc-dataseed.binance.org/\"; // BSC Mainnet\nconst bscTestnetProvider = new ethers.providers.JsonRpcProvider(bscTestnetRpcUrl);\n\n\n\n\nfunction App() {\n  const [web3Modal, setWeb3Modal] = useState(null);\n  const [provider, setProvider] = useState(null);\n  const [walletConnected, setWalletConnected] = useState(false);\n  const [walletAddress, setWalletAddress] = useState('');\n\n  const [productInfo, setProductInfo] = useState(null);\n  const [productId, setProductId] = useState('');\n  const [productPrice, setProductPrice] = useState(null);\n  const [bnbToUsdRate, setBnbToUsdRate] = useState(null);\n  const [selectedCurrency, setSelectedCurrency] = useState('USD');\n  const [convertedPrice, setConvertedPrice] = useState(null);\n  const [contractInstance, setContractInstance] = useState(null); // Déclarez `contractInstance` ici\n\n\n\n\n\n\n\n  \n  // Initialisation de Web3Modal pour la connexion aux portefeuilles\n  useEffect(() => {\n  const modal = new Web3Modal({\n    cacheProvider: true, // Gardera en cache la dernière connexion\n    providerOptions: {\n      walletconnect: {\n        package: WalletConnectProvider, // Utilisation de WalletConnectProvider\n        options: {\n          infuraId: \"e759bc5af90042a1b66c5a01aae905af\" // Remplace avec ton propre infura ID\n        }\n      },\n      metamask: {\n        package: null, // MetaMask ne nécessite pas de package\n        \n      },\n      trustwallet: {\n        package: WalletConnectProvider, // Utilisation de WalletConnectProvider pour Trust Wallet\n        options: {\n          infuraId: \"pDtEhrK4AAiPfirK7qsQI25NJlgrtMu1bBcFDqV4J95GTCAR2d/8Lg\" // Remplace avec ton propre infura ID\n        }\n      },\n      \n      // Ajoute d'autres options de portefeuille ici si nécessaire (par exemple : Fortmatic, etc.)\n    }\n  });\n\n  setWeb3Modal(modal);\n\n  // Vérifie si la modale est présente dans le DOM\n  const interval = setInterval(() => {\n    const web3ModalElement = document.querySelector('.web3-modal-container');\n    if (web3ModalElement) {\n      web3ModalElement.style.zIndex = '999999'; // Modale au-dessus de tout\n      clearInterval(interval);\n    }\n  }, 100);\n\n  return () => clearInterval(interval);\n\n}, []);\n\n  \n\n\n  // Masquer l'iframe si elle est présente\n  const hideIframe = () => {\n    const iframe = document.querySelector('iframe');\n    if (iframe) {\n      iframe.style.display = 'none'; // ou iframe.remove() si tu préfères\n    }\n  };\n\n  // Appel de la fonction pour masquer l'iframe au moment où Web3Modal est chargé\n  hideIframe();\n  \n\n  // Fonction pour reconnecter MetaMask\n  const reconnectToMetaMask = async () => {\n    if (typeof window.ethereum === \"undefined\") {\n      alert(\"MetaMask n'est pas installé !\");\n      return;\n    }\n\n    try {\n      \n      await window.ethereum.request({\n        method: 'wallet_requestPermissions',\n        params: [{\n          eth_accounts: {}\n        }]\n      });\n\n      setTimeout(async () => {\n        const accounts = await window.ethereum.request({\n          method: 'eth_requestAccounts',\n        });\n\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n        const address = await signer.getAddress();\n\n        setWalletAddress(address);\n        setWalletConnected(true);\n        alert(`Compte connecté : ${address}`);\n      }, 1000);\n    } catch (error) {\n      console.error('Erreur de connexion à MetaMask :', error);\n      alert('Échec de la connexion à MetaMask.');\n    }\n  };\n\n\n  // Connexion au wallet via Web3Modal\n  const connectWallet = async () => {\n    if (!web3Modal) {\n      console.error(\"Web3Modal non initialisé\");\n      return;\n    }\n    \n    try {\n      console.log(\"Tentative de connexion au wallet...\");\n      \n      \n      // Connexion via Web3Modal\n      const instance = await web3Modal.connect();\n      const newProvider = new ethers.providers.Web3Provider(instance);\n      \n      // S'assurer que le provider est correctement défini\n      if (!newProvider) {\n        console.error(\"Le fournisseur Web3 n'a pas été correctement créé\");\n        return;\n      }\n      \n      setProvider(newProvider);\n  \n      // Récupérer l'adresse du wallet\n      const signer = newProvider.getSigner();\n      const address = await signer.getAddress();\n      \n      setWalletAddress(address);\n      setWalletConnected(true);\n      \n      console.log(`Wallet connecté: ${address}`);\n    } catch (error) {\n      console.error(\"Erreur lors de la connexion au portefeuille:\", error);\n      alert(\"Erreur de connexion au portefeuille. Veuillez connecter votre wallet.\");\n      // Ferme Web3Modal\n      web3Modal.clearCachedProvider();\n\n      // Relance le processus de reconnexion via MetaMask\n      try {\n        if (typeof window.ethereum !== \"undefined\") {\n          await reconnectToMetaMask();\n        } else {\n          alert(\"MetaMask n'est pas installé.\");\n        }\n      } catch (retryError) {\n        console.error(\"Échec de la reconnexion à MetaMask\", retryError);\n        alert(\"La reconnexion à MetaMask a échoué.\");\n      }\n    }\n  };\n  \n\n  // Récupération du taux de conversion BNB vers USD\n  const fetchBnbToUsdRate = async () => {\n    try {\n      const response = await axios.get('https://api.coingecko.com/api/v3/simple/price?ids=binancecoin&vs_currencies=usd');\n      setBnbToUsdRate(response.data.binancecoin.usd);\n    } catch (error) {\n      console.error('Erreur lors de la récupération du taux BNB -> USD', error);\n    }\n  };\n\n   // Charger les données du contrat et les informations du produit\nuseEffect(() => {\n  const loadBlockchainData = async () => {\n    if (provider) {\n      // Adresse du contrat et ABI\n      const contractAddress = '0xD62B5CFdDfd26F6219E4BF366d9DB6B1450D5905';\n      const contractABI = [\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"token\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"addAllowedToken\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"token\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"amount\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"string\",\n        \"name\": \"productId\",\n        \"type\": \"string\"\n      }\n    ],\n    \"name\": \"pay\",\n    \"outputs\": [],\n    \"stateMutability\": \"payable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"token\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"removeAllowedToken\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address[]\",\n        \"name\": \"tokens\",\n        \"type\": \"address[]\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"constructor\"\n  },\n  {\n    \"anonymous\": false,\n    \"inputs\": [\n      {\n        \"indexed\": true,\n        \"internalType\": \"address\",\n        \"name\": \"user\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": false,\n        \"internalType\": \"uint256\",\n        \"name\": \"amount\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"indexed\": false,\n        \"internalType\": \"address\",\n        \"name\": \"token\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": false,\n        \"internalType\": \"string\",\n        \"name\": \"productId\",\n        \"type\": \"string\"\n      }\n    ],\n    \"name\": \"PaymentReceived\",\n    \"type\": \"event\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"string\",\n        \"name\": \"productId\",\n        \"type\": \"string\"\n      }\n    ],\n    \"name\": \"removeProduct\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"string\",\n        \"name\": \"productId\",\n        \"type\": \"string\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"price\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"setProductPrice\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"amount\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"withdraw\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"token\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"amount\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"withdrawToken\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"allowedTokens\",\n    \"outputs\": [\n      {\n        \"internalType\": \"bool\",\n        \"name\": \"\",\n        \"type\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"token\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"isTokenAllowed\",\n    \"outputs\": [\n      {\n        \"internalType\": \"bool\",\n        \"name\": \"\",\n        \"type\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"owner\",\n    \"outputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"\",\n        \"type\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"string\",\n        \"name\": \"\",\n        \"type\": \"string\"\n      }\n    ],\n    \"name\": \"products\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"price\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"bool\",\n        \"name\": \"exists\",\n        \"type\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n\n    \n  }\n];\n\n\n\n\n        // Crée une nouvelle instance du contrat avec le provider\n      const contract = new ethers.Contract(contractAddress, contractABI, provider.getSigner());\n\n      // Appel direct à la méthode du contrat, sans attendre que contractInstance soit mis à jour\n      try {\n        const productDetails = await contract.products(\"product1\");\n        setProductInfo(productDetails);\n        setProductPrice(productDetails.price);\n      } catch (error) {\n        console.error(\"Erreur lors de la récupération des informations du produit:\", error);\n      }\n      \n      // Stocke cette instance dans l'état\n      setContractInstance(contract);\n    }\n  };\n\n  loadBlockchainData();\n  fetchBnbToUsdRate();\n}, [provider]);  // Dépendance sur 'provider' uniquement, pas besoin de contractInstance ici\n\n\n\n\nconst checkAllowance = async (amountToSend) => {\n  if (contractInstance) {\n    try {\n      const usdtContract = new ethers.Contract(usdtAddress, usdtABI, provider.getSigner());\n      const allowance = await usdtContract.allowance(walletAddress, contractAddress);\n\n      console.log(\"Allowance:\", allowance.toString());\n\n      if (allowance.lt(amountToSend)) {\n        alert(\"Vous devez approuver le contrat pour envoyer cette transaction.\");\n        await usdtContract.approve(contractAddress, amountToSend);\n      }\n    } catch (error) {\n      console.error(\"Erreur lors de la vérification de l'allowance:\", error);\n    }\n  }\n};\n\n\nconst payForProduct = async (productId, amount) => {\n  if (contractInstance) {\n    try {\n      const tx = await contractInstance.pay(usdtAddress, amount, productId, {\n        gasLimit: 200000,  // Ajuste selon les besoins\n      });\n      await tx.wait();  // Attends la confirmation de la transaction\n      console.log(\"Paiement effectué avec succès !\");\n    } catch (error) {\n      console.error(\"Erreur lors du paiement:\", error);\n    }\n  }\n};\n\n\n\n\n  const [loading, setLoading] = useState(false); // Ajout de l'état loading\n  const [transactionInProgress, setTransactionInProgress] = useState(false);\n\n  const fetchProductInfo = async () => {\n    setLoading(true);  // On met à true pour indiquer qu'on charge les données\n    try {\n      // URL du fichier JSON hébergé sur IPFS via Pinata\n      const ipfsUrl = 'https://gateway.pinata.cloud/ipfs/bafkreib4ixmq42am4oth4mfpfcxbfrqbixjpo6jpk7omkopo7dik525gby';\n      const response = await axios.get(ipfsUrl);\n      const productsFromIpfs = response.data;\n\n      console.log(\"Données récupérées depuis IPFS:\", productsFromIpfs);\n    \n      // Vérification de la structure du JSON\n      if (productsFromIpfs && productsFromIpfs.product1 && productsFromIpfs.product2 && productsFromIpfs.product3) {\n        setProductInfo(productsFromIpfs);\n      } else {\n        console.error(\"Structure des produits invalide sur IPFS.\");\n      }\n    } catch (error) {\n      console.error('Erreur lors de la récupération des informations du produit depuis IPFS:', error);\n    } finally {\n      setLoading(false);  // Lorsque les données sont chargées ou en cas d'erreur, on met loading à false\n    }\n  };\n\n  \n  \n  useEffect(() => {\n    fetchProductInfo();\n  }, []);\n  \n\n  const fetchPriceFromIFPS = async (productId) => {\n    try {\n      const response = await axios.get('https://gateway.pinata.cloud/ipfs/Qme4BKfGHuMukLnbf7LqZTqK6snH57eFbENeqVzLfg28eg');\n      const productsFromIpfs = response.data;\n  \n      console.log(\"Données récupérées depuis IPFS:\", productsFromIpfs);\n  \n      if (productsFromIpfs && productsFromIpfs[productId] && productsFromIpfs[productId].price > 0) {\n        return productsFromIpfs[productId].price; // Prix en USD\n      } else {\n        throw new Error(\"Produit invalide ou prix manquant.\");\n      }\n      \n    } catch (error) {\n      console.error(\"Erreur lors de la récupération du prix depuis IPFS :\", error);\n      alert(\"Le prix du produit est invalide ou n'a pas pu être récupéré. Vérifiez les données.\");\n      return 0;  // Retourne 0 si le prix est invalide\n    }\n  };\n\n\n// Fonction conversion BNB/USDT\n  const getBnbToUsdRate = async () => {\n    try {\n      const response = await axios.get('https://api.coingecko.com/api/v3/simple/price?ids=binancecoin&vs_currencies=usd');\n      const bnbToUsdRate = response.data.binancecoin.usd;\n      return bnbToUsdRate;\n    } catch (error) {\n      console.error(\"Erreur lors de la récupération du taux de conversion BNB/USD :\", error);\n      return 0;\n    }\n  };\n  \n  \n  \n  \n  const sendTransaction = async (amountIn, fetchedPriceInUsd) => {\n    if (!provider) {\n      alert(\"Le provider n'est pas défini, veuillez connecter votre wallet.\");\n      return;\n    }\n  \n    try {\n      // Utilise le provider et signer déjà définis via Web3Modal\n      const signer = provider.getSigner();\n  \n      // Calculer amountToSend selon la devise sélectionnée\n      const amountToSend = selectedCurrency === 'USDT'\n        ? ethers.utils.parseUnits(amountIn.toString(), 6) // USDT a 6 décimales\n        : ethers.utils.parseUnits(amountIn.toString(), 18); // BNB a 18 décimales\n  \n      console.log(\"Montant à envoyer:\", ethers.utils.formatUnits(amountToSend, 6)); // Log du montant calculé\n  \n      // Vérification de l'allowance avant d'effectuer le transfert\n      await checkAllowance(amountToSend);\n  \n      const gasLimit = 50000; // Limite de gaz pour la transaction\n      const { BigNumber } = require(\"ethers\");\n  \n      const gasPrice = await provider.getGasPrice(); // Utilise le prix actuel du gaz\n      const adjustedGasPrice = gasPrice.mul(BigNumber.from(\"110\")).div(BigNumber.from(\"100\")); // à ajuster si bug\n  \n      console.log(\"GasPrice ajusté : \", adjustedGasPrice.toString());\n  \n      // Vérifiez que vous avez assez de fonds\n      const walletBalance = await provider.getBalance(signer.getAddress());\n      console.log(\"Solde du portefeuille en BNB:\", ethers.utils.formatEther(walletBalance));  // Log du solde BNB\n      if (selectedCurrency === 'BNB' && walletBalance.lt(amountToSend.add(adjustedGasPrice))) {\n        alert(\"Solde insuffisant pour couvrir la transaction et les frais de gaz en BNB.\");\n        return;\n      }\n  \n      if (selectedCurrency === 'USDT') {\n        // Vérification du solde en USDT\n        const usdtContract = new ethers.Contract(usdtAddress, usdtABI, signer);\n        const usdtBalance = await usdtContract.balanceOf(signer.getAddress());\n        console.log(\"Solde USDT du wallet :\", ethers.utils.formatUnits(usdtBalance, 6));  // Log du solde USDT\n  \n        if (usdtBalance.lt(amountToSend)) {\n          alert(\"Solde insuffisant en USDT pour couvrir la transaction.\");\n          return;\n        }\n      }\n  \n      // Préparer la transaction\n      const tx = {\n        to: contractAddress,\n        value: selectedCurrency === 'BNB' ? amountToSend : 0,  // Montant en BNB\n        gasLimit: gasLimit,\n        gasPrice: adjustedGasPrice,\n        data: ethers.utils.defaultAbiCoder.encode([\"uint256\"], [fetchedPriceInUsd]),  // Envoie l'USD comme paramètre\n      };\n  \n      // Si la devise est USDT, envoyer les tokens via le contrat\n      let transactionResponse;\n      if (selectedCurrency === 'USDT') {\n        const usdtContract = new ethers.Contract(usdtAddress, usdtABI, signer);\n        transactionResponse = await usdtContract.transferFrom(signer.getAddress(), contractAddress, amountToSend);\n        console.log(\"USDT envoyés au contrat.\");\n      } else {\n        // Si la devise est BNB, envoyer la transaction en BNB\n        transactionResponse = await signer.sendTransaction(tx);\n        console.log(\"Transaction envoyée:\", transactionResponse.hash);\n      }\n  \n      // Attendre la confirmation de la transaction\n      const receipt = await transactionResponse.wait();\n      if (receipt.status === 1) {\n        console.log(\"Transaction réussie !\");\n        alert(\"Paiement effectué avec succès.\");\n        // Rediriger vers une nouvelle page après la transaction réussie\n        window.location.href = '/Delivrance_IndicateurD.html';  // Remplace '/confirmation.html' par le chemin de la page HTML\n      } else {\n        alert(\"Échec de la transaction.\");\n      }\n  \n    } catch (error) {\n      console.error(\"Erreur lors de l'envoi de la transaction:\", error.message);\n      alert(\"Une erreur s'est produite lors de l'envoi de la transaction.\");\n    } finally {\n      console.log(\"Transaction terminée.\");\n    }\n  };\n  \n  \n  \n  \n  \n  \n\n\n  const checkNetwork = async () => {\n    if (typeof window.ethereum !== \"undefined\") {\n      const network = await window.ethereum.request({\n        method: 'eth_chainId'\n      });\n  \n      // Vérifie si l'utilisateur est bien sur BSC Testnet (chainId 97)\n      if (network !== '0x38') { // 0x38 est le chainId pour BSC Mainnet\n        alert(\"Veuillez vous connecter au réseau Binance Smart Chain Mainnet.\");\n        return false;\n      }\n      \n      return true;\n    } else {\n      console.error(\"Ethereum n'est pas disponible.\");\n      alert(\"MetaMask ou un autre portefeuille Ethereum n'est pas installé.\");\n      return false;\n    }\n  };\n\n\n\n\n\n\n  // Fonction pour réinitialiser le provider\n  const resetProvider = async () => {\n    try {\n      if (typeof window.ethereum !== \"undefined\") {\n        const newProvider = new ethers.providers.Web3Provider(window.ethereum);\n        setProvider(newProvider); // Mettre à jour le provider\n\n        // Attendre que React ait bien mis à jour le provider\n        return newProvider.getSigner(); // Retourner le signer après que le provider ait été mis à jour\n      } else {\n        throw new Error(\"Aucun fournisseur Ethereum n'est disponible.\");\n      }\n    } catch (error) {\n      console.error(\"Erreur dans resetProvider:\", error);\n      alert(\"Erreur lors de la réinitialisation du provider.\");\n      return null;\n    }\n  };\n\n  // Vérification du réseau à chaque fois qu'il change\n  useEffect(() => {\n    const changeNetworkHandler = async () => {\n      try {\n        await resetProvider(); // Remet à jour le provider lorsque le réseau change\n        console.log(\"Le provider a été réinitialisé après le changement de réseau.\");\n      } catch (error) {\n        console.error(\"Erreur lors du changement de réseau et réinitialisation du provider:\", error);\n      }\n    };\n\n    if (typeof window.ethereum !== \"undefined\") {\n      window.ethereum.on('chainChanged', changeNetworkHandler);\n    }\n\n    // Nettoyage quand le composant est démonté\n    return () => {\n      if (typeof window.ethereum !== \"undefined\") {\n        window.ethereum.removeListener('chainChanged', changeNetworkHandler);\n      }\n    };\n  }, []);\n  \n\n\n\n  const handlePayment = async () => {\n    if (loading || transactionInProgress) {\n      console.log(\"Transaction déjà en cours, veuillez patienter.\");\n      return; // Empêche l'exécution si une autre transaction est en cours\n    }\n    setLoading(true);  // Empêche d'envoyer une nouvelle transaction si une est déjà en cours\n    \n    if (!walletConnected) {\n      alert(\"Veuillez connecter votre wallet avant de procéder.\");\n      setLoading(false);  // Permet de déverrouiller le bouton si une erreur survient\n      setTransactionInProgress(false);  // Réinitialise l'état de la transaction\n      return;\n    }\n    \n    // Vérifie que le contrat est bien initialisé\n    if (!contractInstance) {\n      console.error(\"Le contrat n'est pas initialisé.\");\n      setLoading(false);\n      setTransactionInProgress(false);\n      return;\n    }\n\n    // Vérifie que le produit est bien sélectionné\n    if (!productId || !productInfo[productId]) {\n      alert(\"Veuillez sélectionner un produit valide et essayer de nouveau.\");\n      setLoading(false);\n      setTransactionInProgress(false);\n      return;\n    }\n\n    // Vérifie que l'utilisateur est sur le bon réseau\n    const isCorrectNetwork = await checkNetwork();\n    if (!isCorrectNetwork) {\n      setLoading(false);\n      setTransactionInProgress(false);\n      return;\n    }\n\n    // Vérifier que le provider est disponible\n    if (!provider) {\n      alert(\"Reconnexion au provider effectuée. Veuillez renouveler l'opération.\");\n      await resetProvider();\n      setLoading(false);\n      setTransactionInProgress(false);\n      return;\n    }\n      \n\n    // Récupération du prix en USD depuis IPFS\n    let fetchedPriceInUsd = await fetchPriceFromIFPS(productId);\n    if (fetchedPriceInUsd <= 0) {\n      alert(\"Le prix du produit est invalide.\");\n      setLoading(false);\n      setTransactionInProgress(false);\n      return;\n    }\n\n    // Récupération du taux de conversion BNB/USD\n    const bnbToUsdRate = await getBnbToUsdRate();\n    if (bnbToUsdRate <= 0) {\n      alert(\"Erreur de récupération du taux de conversion BNB/USD.\");\n      setLoading(false);\n      setTransactionInProgress(false);\n      return;\n    }\n\n    // Récupérer les détails du produit\n    const productDetails = productInfo[productId];\n\n    if (!productDetails || !productDetails.exists || productDetails.price <= 0) {\n      alert(\"Produit invalide ou prix incorrect.\");\n      setLoading(false);\n      setTransactionInProgress(false);\n      return;\n    }\n\n    // --- Ajout de la fonction pour récupérer le prix du produit ---\n    let amountIn = 0;\n    try {\n      // Utilisation directement de fetchedPriceInUsd\n      amountIn = fetchedPriceInUsd;\n\n      // Vérification de la devise et calcul du montant à envoyer\n      if (selectedCurrency === 'USDT') {\n        amountIn = fetchedPriceInUsd; // Utilise directement le prix en USD\n      } else if (selectedCurrency === 'BNB') {\n        amountIn = fetchedPriceInUsd / bnbToUsdRate; // Conversion de USD en BNB\n      } else {\n        alert(\"Devise non supportée pour ce paiement.\");\n        setLoading(false);\n        setTransactionInProgress(false);\n        return;\n      }\n\n      // Logs de vérification\n      console.log(\"Prix du produit en USD:\", fetchedPriceInUsd);\n      console.log(\"Taux de conversion BNB/USD:\", bnbToUsdRate);\n      console.log(\"Montant en BNB à envoyer:\", amountIn);\n\n      // Vérifier que amountIn est valide et non nul avant d'envoyer la transaction\n      if (parseFloat(amountIn) <= 0) {\n        alert(\"Le montant à payer est invalide (0 ou négatif).\");\n        setLoading(false);\n        setTransactionInProgress(false);\n        return;\n      }\n\n      // Convertir le montant à un format acceptable (fixé à 18 décimales)\n      amountIn = parseFloat(amountIn).toFixed(18);\n      console.log('Montant final pour la transaction:', amountIn);\n\n      // Envoyer la transaction\n      await checkAllowance(amountIn);  // Passe amountIn ici\n      await payForProduct(productId, amountIn);  // Passe amountIn ici\n\n      await sendTransaction(amountIn, fetchedPriceInUsd);\n\n      console.log(\"Transaction envoyée.\");\n\n    } catch (error) {\n      console.error(\"Erreur lors de l'envoi de la transaction:\", error.message);\n      alert(\"Une erreur s'est produite lors de l'envoi de la transaction. Vérifiez votre solde et les paramètres.\");\n    } finally {\n      setLoading(false);  // Permet de déverrouiller le bouton après l'exécution\n      setTransactionInProgress(false);  // Réinitialise l'état de la transaction\n    }\n};\n\n  \n\n  \n  \n  // Mise à jour des informations du produit sélectionné\n  const updateProductInfo = (selectedProductId) => {\n    setProductId(selectedProductId);\n\n    // Vérifie si le produit existe et s'il est valide\n    if (productInfo && productInfo[selectedProductId]) {\n        const productDetails = productInfo[selectedProductId];\n\n        // Vérifie que le produit existe et a un prix valide\n        if (productDetails.exists && productDetails.price > 0) {\n            setProductPrice(productDetails.price);\n            \n            // Mise à jour du prix converti\n            if (selectedCurrency === 'USDT') {\n                setConvertedPrice(productDetails.price.toString());\n            } else if (selectedCurrency === 'BNB') {\n                setConvertedPrice((productDetails.price / bnbToUsdRate).toString());\n            }\n        } else {\n            alert(\"Produit invalide ou prix incorrect.\");\n            return;\n        }\n    } else {\n        alert(\"Produit non trouvé !\");\n        return;\n    }\n};\n\n\n\n  // Gestion du changement de devise (USD ou BNB)\n  const handleCurrencyChange = (event) => {\n    const newCurrency = event.target.value;\n    setSelectedCurrency(newCurrency);\n\n    if (newCurrency === 'USDT') {\n      setConvertedPrice(productPrice ? productPrice.toString() : null);\n    } else if (newCurrency === 'BNB') {\n      setConvertedPrice(productPrice ? (productPrice / bnbToUsdRate).toString() : null);\n    }\n  };\n\n  // Liste des produits\n  const products = {\n    product1: { price: 5, exists: true, title: \"Indicateur Daily\" },\n    product2: { price: 295, exists: true, title: \"Indicateur 4h/1h\" },\n    product3: { price: 495, exists: true, title: \"Indicateur 15mn\" }\n  };\n  \n\n  return (\n    <div className=\"App\">\n      {/* Afficher un message de chargement si `loading` est true */}\n      {loading && <div>Chargement des produits...</div>}\n\n      {/* Contenu principal */}\n      <div className=\"parallax-container\">\n        <video id=\"video-background\" autoPlay loop muted>\n          {/* Remplace la source locale par l'URL IPFS */}\n          <source \n            src=\"https://gateway.pinata.cloud/ipfs/QmPZ8v3KzeyH2Dqz29TZFWe4kswkUETJyesZFCFULtagwv\" \n            type=\"video/mp4\" \n          />\n          Votre navigateur ne supporte pas les vidéos HTML5.\n        </video>\n\n        {/* Contenu défilant */}\n        <div className=\"content\">\n          \n\n          {/* Bouton de connexion du wallet en haut à droite */}\n          <div className=\"wallet-connect-button\">\n            <button\n      \n              onClick={connectWallet}\n              disabled={walletConnected} // Désactive le bouton une fois connecté\n            >\n              {walletConnected ? (\n                <>\n                  <span>Wallet connecté : {walletAddress}</span>\n                  <span className=\"arrow-icon\">→</span> {/* Icône flèche */}\n                </>\n              ) : (\n                'Connecter le wallet'\n              )}\n            </button>\n          </div>\n\n          {/* Conteneur du formulaire de paiement */}\n          <div className=\"payment-wrapper\">\n            <h1> Les Indicateurs à Levier </h1>\n\n            {productId && productInfo && (\n              <div>\n                <p>Produit choisi : {productInfo[productId]?.title}</p>\n                <p>Prix du produit : {convertedPrice ? convertedPrice : 'Chargement...'} {selectedCurrency}</p>\n                <p>Le produit est {productInfo.exists ? 'disponible' : 'indisponible'}</p>\n              </div>\n            )}\n\n            <select onChange={(e) => updateProductInfo(e.target.value)} value={productId}>\n              <option value=\"\">Choisi Ton Indicateur</option>\n              <option value=\"product1\">Indicateur Daily</option>\n              <option value=\"product2\">Indicateur 4h/1h</option>\n              <option value=\"product3\">Indicateur 15mn</option>\n            </select>\n\n            <select onChange={handleCurrencyChange} value={selectedCurrency}>\n              <option value=\"USDT\">USD</option>\n              <option value=\"BNB\">BNB</option>\n            </select>\n\n            {/* Bouton de paiement */}\n            <button onClick={handlePayment} disabled={loading || transactionInProgress}>\n              {loading || transactionInProgress ? \"Paiement en cours...\" : \"Acheter\"}\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  \n  \n};\n\n\nexport default App;\n\n\n\n\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';  // Cette ligne doit être valide avec React 18\nimport App from './App';\nimport './index.css'; // Ajoute cette ligne dans ton fichier JavaScript\nimport './App.css'; \n\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n"],"sourceRoot":""}