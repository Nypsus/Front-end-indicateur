{"version":3,"sources":["App.js","index.js"],"names":["usdtAddress","usdtABI","ethers","providers","JsonRpcProvider","App","web3Modal","setWeb3Modal","useState","provider","setProvider","walletConnected","setWalletConnected","walletAddress","setWalletAddress","selectedProductId","setSelectedProductId","selectedProduct","setSelectedProduct","products","product1","price","exists","title","product2","product3","productId","setProductId","productPrice","setProductPrice","bnbToUsdRate","setBnbToUsdRate","selectedCurrency","setSelectedCurrency","convertedPrice","setConvertedPrice","contractInstance","setContractInstance","productInfo","setProductInfo","useEffect","modal","Web3Modal","cacheProvider","providerOptions","walletconnect","package","WalletConnectProvider","options","infuraId","metamask","trustwallet","interval","setInterval","web3ModalElement","document","querySelector","style","zIndex","clearInterval","hideIframe","iframe","display","async","contractAddress","contractABI","contract","Contract","getSigner","productDetails","error","console","loadBlockchainData","response","axios","get","data","binancecoin","usd","fetchBnbToUsdRate","checkAllowance","tokenContract","allowance","address","lt","amount","log","approveToken","tx","approve","hash","wait","payForProduct","alert","Error","priceInWei","utils","parseUnits","amountIn","toString","buyProduct","value","receipt","_jsxs","className","children","_jsx","onClick","instance","connect","newProvider","Web3Provider","signer","getAddress","clearCachedProvider","window","ethereum","request","method","params","eth_accounts","setTimeout","reconnectToMetaMask","retryError","onChange","e","updateProductInfo","target","event","newCurrency","parseFloat","toFixed","message","ReactDOM","createRoot","getElementById","render","React","StrictMode"],"mappings":"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","file":"static/js/main.c6020652.chunk.js","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\n\nimport Web3Modal from 'web3modal';\nimport { ethers } from 'ethers';\nimport axios from 'axios';\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport process from 'process';\nimport './App.css'; // Importation du fichier CSS\nimport './index.css'; // Ajoute cette ligne dans ton fichier JavaScript\n\n\n// Adresse du contrat USDT sur BSC (assure-toi que c'est l'adresse correcte pour le réseau que tu utilises)\nconst usdtAddress = '0x55d398326f99059fF775485246999027B3197955'; // Adresse du contrat USDT sur Binance Smart Chain\n\n// ABI pour le contrat USDT\nconst usdtABI = [\n  \"function balanceOf(address) view returns (uint256)\",\n  \"function allowance(address, address) view returns (uint256)\",\n  \"function approve(address spender, uint256 amount) public returns (bool)\",\n  \"function transferFrom(address sender, address recipient, uint256 amount) public returns (bool)\"\n];\n\n\n\n\nconst contractAddress = '0xCd25eee89Bb01603f0E0cf8D8C243966a926761d';\nconst bscTestnetRpcUrl = \"https://bsc-dataseed.binance.org/\"; // BSC Mainnet\nconst bscTestnetProvider = new ethers.providers.JsonRpcProvider(bscTestnetRpcUrl);\n\n\n\n\nfunction App() {\n  const [web3Modal, setWeb3Modal] = useState(null);\n  const [provider, setProvider] = useState(null);\n  const [walletConnected, setWalletConnected] = useState(false);\n  const [walletAddress, setWalletAddress] = useState('');\n  const [selectedProductId, setSelectedProductId] = useState(null);  // Ajouter l'état selectedProductId\n  const [selectedProduct, setSelectedProduct] = useState('product1');\n  // Définir les produits avec leurs informations\n  const products = {\n    product1: { price: 5, exists: true, title: \"Indicateur Daily\" },\n    product2: { price: 295, exists: true, title: \"Indicateur 4h/1h\" },\n    product3: { price: 495, exists: true, title: \"Indicateur 15mn\" }\n  };\n\n  const [productId, setProductId] = useState('');\n  const [productPrice, setProductPrice] = useState(null);\n  const [bnbToUsdRate, setBnbToUsdRate] = useState(null);\n  const [selectedCurrency, setSelectedCurrency] = useState('USD');\n  const [convertedPrice, setConvertedPrice] = useState(null);\n  const [contractInstance, setContractInstance] = useState(null); // Déclarez `contractInstance` ici\n  const [productInfo, setProductInfo] = useState({}); // Déclarer l'état productInfo\n\n\n\n\n\n\n\n  \n  // Initialisation de Web3Modal pour la connexion aux portefeuilles\n  useEffect(() => {\n  const modal = new Web3Modal({\n    cacheProvider: true, // Gardera en cache la dernière connexion\n    providerOptions: {\n      walletconnect: {\n        package: WalletConnectProvider, // Utilisation de WalletConnectProvider\n        options: {\n          infuraId: \"e759bc5af90042a1b66c5a01aae905af\" // Remplace avec ton propre infura ID\n        }\n      },\n      metamask: {\n        package: null, // MetaMask ne nécessite pas de package\n        \n      },\n      trustwallet: {\n        package: WalletConnectProvider, // Utilisation de WalletConnectProvider pour Trust Wallet\n        options: {\n          infuraId: \"pDtEhrK4AAiPfirK7qsQI25NJlgrtMu1bBcFDqV4J95GTCAR2d/8Lg\" // Remplace avec ton propre infura ID\n        }\n      },\n      \n      // Ajoute d'autres options de portefeuille ici si nécessaire (par exemple : Fortmatic, etc.)\n    }\n  });\n\n  setWeb3Modal(modal);\n\n  // Vérifie si la modale est présente dans le DOM\n  const interval = setInterval(() => {\n    const web3ModalElement = document.querySelector('.web3-modal-container');\n    if (web3ModalElement) {\n      web3ModalElement.style.zIndex = '999999'; // Modale au-dessus de tout\n      clearInterval(interval);\n    }\n  }, 100);\n\n  return () => clearInterval(interval);\n\n}, []);\n\n  \n\n\n  // Masquer l'iframe si elle est présente\n  const hideIframe = () => {\n    const iframe = document.querySelector('iframe');\n    if (iframe) {\n      iframe.style.display = 'none'; // ou iframe.remove() si tu préfères\n    }\n  };\n\n  // Appel de la fonction pour masquer l'iframe au moment où Web3Modal est chargé\n  hideIframe();\n  \n\n  // Fonction pour reconnecter MetaMask\n  const reconnectToMetaMask = async () => {\n    if (typeof window.ethereum === \"undefined\") {\n      alert(\"MetaMask n'est pas installé !\");\n      return;\n    }\n\n    try {\n      \n      await window.ethereum.request({\n        method: 'wallet_requestPermissions',\n        params: [{\n          eth_accounts: {}\n        }]\n      });\n\n      setTimeout(async () => {\n        const accounts = await window.ethereum.request({\n          method: 'eth_requestAccounts',\n        });\n\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n        const address = await signer.getAddress();\n\n        setWalletAddress(address);\n        setWalletConnected(true);\n        alert(`Compte connecté : ${address}`);\n      }, 1000);\n    } catch (error) {\n      console.error('Erreur de connexion à MetaMask :', error);\n      alert('Échec de la connexion à MetaMask.');\n    }\n  };\n\n\n  // Connexion au wallet via Web3Modal\n  const connectWallet = async () => {\n    if (!web3Modal) {\n      console.error(\"Web3Modal non initialisé\");\n      return;\n    }\n    \n    try {\n      console.log(\"Tentative de connexion au wallet...\");\n      \n      \n      // Connexion via Web3Modal\n      const instance = await web3Modal.connect();\n      const newProvider = new ethers.providers.Web3Provider(instance);\n      \n      // S'assurer que le provider est correctement défini\n      if (!newProvider) {\n        console.error(\"Le fournisseur Web3 n'a pas été correctement créé\");\n        return;\n      }\n      \n      setProvider(newProvider);\n  \n      // Récupérer l'adresse du wallet\n      const signer = newProvider.getSigner();\n      const address = await signer.getAddress();\n      \n      setWalletAddress(address);\n      setWalletConnected(true);\n      \n      console.log(`Wallet connecté: ${address}`);\n    } catch (error) {\n      console.error(\"Erreur lors de la connexion au portefeuille:\", error);\n      alert(\"Erreur de connexion au portefeuille. Veuillez connecter votre wallet.\");\n      // Ferme Web3Modal\n      web3Modal.clearCachedProvider();\n\n      // Relance le processus de reconnexion via MetaMask\n      try {\n        if (typeof window.ethereum !== \"undefined\") {\n          await reconnectToMetaMask();\n        } else {\n          alert(\"MetaMask n'est pas installé.\");\n        }\n      } catch (retryError) {\n        console.error(\"Échec de la reconnexion à MetaMask\", retryError);\n        alert(\"La reconnexion à MetaMask a échoué.\");\n      }\n    }\n  };\n  \n\n  // Récupération du taux de conversion BNB vers USD\n  const fetchBnbToUsdRate = async () => {\n    try {\n      const response = await axios.get('https://api.coingecko.com/api/v3/simple/price?ids=binancecoin&vs_currencies=usd');\n      setBnbToUsdRate(response.data.binancecoin.usd);\n    } catch (error) {\n      console.error('Erreur lors de la récupération du taux BNB -> USD', error);\n    }\n  };\n\n   // Charger les données du contrat et les informations du produit\nuseEffect(() => {\n  const loadBlockchainData = async () => {\n    if (provider) {\n      // Adresse du contrat et ABI\n      const contractAddress = '0xCd25eee89Bb01603f0E0cf8D8C243966a926761d';\n      const contractABI = [\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"token\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"addAllowedToken\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"token\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"amount\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"string\",\n        \"name\": \"productId\",\n        \"type\": \"string\"\n      }\n    ],\n    \"name\": \"pay\",\n    \"outputs\": [],\n    \"stateMutability\": \"payable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"token\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"removeAllowedToken\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address[]\",\n        \"name\": \"tokens\",\n        \"type\": \"address[]\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"constructor\"\n  },\n  {\n    \"anonymous\": false,\n    \"inputs\": [\n      {\n        \"indexed\": true,\n        \"internalType\": \"address\",\n        \"name\": \"user\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": false,\n        \"internalType\": \"uint256\",\n        \"name\": \"amount\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"indexed\": false,\n        \"internalType\": \"address\",\n        \"name\": \"token\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": false,\n        \"internalType\": \"string\",\n        \"name\": \"productId\",\n        \"type\": \"string\"\n      }\n    ],\n    \"name\": \"PaymentReceived\",\n    \"type\": \"event\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"string\",\n        \"name\": \"productId\",\n        \"type\": \"string\"\n      }\n    ],\n    \"name\": \"removeProduct\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"string\",\n        \"name\": \"productId\",\n        \"type\": \"string\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"price\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"setProductPrice\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"amount\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"withdraw\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"token\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"amount\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"withdrawToken\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"allowedTokens\",\n    \"outputs\": [\n      {\n        \"internalType\": \"bool\",\n        \"name\": \"\",\n        \"type\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"token\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"isTokenAllowed\",\n    \"outputs\": [\n      {\n        \"internalType\": \"bool\",\n        \"name\": \"\",\n        \"type\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"owner\",\n    \"outputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"\",\n        \"type\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"string\",\n        \"name\": \"\",\n        \"type\": \"string\"\n      }\n    ],\n    \"name\": \"products\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"price\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"bool\",\n        \"name\": \"exists\",\n        \"type\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n\n    \n  }\n];\n\n\n\n\n        // Crée une nouvelle instance du contrat avec le provider\n      const contract = new ethers.Contract(contractAddress, contractABI, provider.getSigner());\n\n      // Appel direct à la méthode du contrat, sans attendre que contractInstance soit mis à jour\n      try {\n        const productDetails = await contract.products(\"product1\");\n        setProductInfo(productDetails);\n        setProductPrice(productDetails.price);\n      } catch (error) {\n        console.error(\"Erreur lors de la récupération des informations du produit:\", error);\n      }\n      \n      // Stocke cette instance dans l'état\n      setContractInstance(contract);\n    }\n  };\n\n  loadBlockchainData();\n  fetchBnbToUsdRate();\n}, [provider]);  // Dépendance sur 'provider' uniquement, pas besoin de contractInstance ici\n\n\n\n\n\n\nconst sendTransaction = async (amountIn, selectedCurrency) => {\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\n  const signer = provider.getSigner();\n  const amountInEther = ethers.utils.parseUnits(amountIn.toString(), 18);\n\n  try {\n    // Vérification du solde pour l'USDT\n    if (selectedCurrency === 'USDT') {\n      await checkAllowance(amountInEther);\n    }\n\n    // Vérifiez que vous avez assez de fonds (pour BNB)\n    const walletBalance = await provider.getBalance(signer.getAddress());\n    if (selectedCurrency === 'BNB' && walletBalance.lt(amountInEther)) {\n      alert(\"Solde insuffisant pour couvrir la transaction.\");\n      return;\n    }\n\n    // Préparez la transaction\n    const tx = selectedCurrency === 'BNB'\n      ? { to: contractAddress, value: amountInEther, gasLimit: 5000 }\n      : { to: contractAddress, value: 0, gasLimit: 5000 }; // Pour USDT, on envoie 0 BNB\n\n    const transactionResponse = await signer.sendTransaction(tx);\n    console.log(\"Transaction envoyée, hash:\", transactionResponse.hash);\n\n    const receipt = await transactionResponse.wait();\n    console.log(\"Transaction confirmée dans le bloc:\", receipt.blockNumber);\n  } catch (error) {\n    console.error(\"Erreur lors de l'envoi de la transaction:\", error);\n    alert(\"Une erreur s'est produite lors de l'envoi de la transaction.\");\n  }\n};\n\n// Fonction pour approuver USDT\nconst approveUSDT = async (amountToSend) => {\n  const signer = new ethers.providers.Web3Provider(window.ethereum).getSigner();\n  const usdtContract = new ethers.Contract(usdtAddress, usdtABI, signer);\n\n  try {\n    const allowance = await usdtContract.allowance(await signer.getAddress(), contractAddress);\n    console.log(\"Allowance actuelle:\", allowance.toString());\n\n    if (allowance.lt(amountToSend)) {\n      console.log(\"Allowance insuffisante, approbation en cours...\");\n      const tx = await usdtContract.approve(contractAddress, amountToSend);\n      const receipt = await tx.wait();\n\n      if (receipt.status === 1) {\n        console.log(\"Allowance mise à jour !\");\n      } else {\n        console.error(\"L'approbation de l'allowance a échoué.\");\n        throw new Error(\"Échec de l'approbation de l'allowance.\");\n      }\n    } else {\n      console.log(\"Allowance suffisante.\");\n    }\n  } catch (error) {\n    console.error(\"Erreur lors de l'approbation de l'allowance USDT :\", error);\n  }\n};\n\n// Vérification de l'allowance\nconst checkAllowance = async (amount) => {\n  try {\n    // Assure-toi de récupérer l'instance du token, par exemple USDT\n    const tokenContract = new ethers.Contract(usdtAddress, usdtABI, provider.getSigner());\n    const allowance = await tokenContract.allowance(walletAddress, contractInstance.address);\n\n    if (allowance.lt(amount)) {\n      // Si l'allowance est insuffisante, demander une approbation\n      console.log(\"Allowance insuffisante, demande d'approbation...\");\n      await approveToken(amount);\n    } else {\n      console.log(\"Allowance suffisante\");\n      // Proceed with the payment if allowance is sufficient\n    }\n  } catch (error) {\n    console.error(\"Erreur lors de la vérification de l'allowance\", error);\n  }\n};\n\n\nconst approveToken = async (amount) => {\n  try {\n    const tokenContract = new ethers.Contract(usdtAddress, usdtABI, provider.getSigner());\n    \n    // L'appel à `approve` sur le contrat du token\n    const tx = await tokenContract.approve(contractInstance.address, amount);\n    console.log(\"Transaction d'approbation envoyée:\", tx.hash);\n\n    // Attendre que la transaction soit confirmée\n    await tx.wait();\n    console.log(\"Approvisionnement effectué avec succès\");\n\n    // Une fois l'approve effectué, appeler la fonction de paiement\n    await payForProduct(amount);\n  } catch (error) {\n    console.error(\"Erreur lors de l'approbation du token\", error);\n    alert(\"Échec de l'approbation du token.\");\n  }\n};\n\nconst payForProduct = async (amountIn) => {\n  try {\n    // Vérifie que le contrat est bien initialisé\n    if (!contractInstance) {\n      throw new Error(\"Le contrat n'est pas initialisé.\");\n    }\n\n    // Récupérer les détails du produit sélectionné\n    const productDetails = products[selectedProductId]; // Utilise selectedProductId pour récupérer les détails du produit\n    if (!productDetails || !productDetails.exists || productDetails.price <= 0) {\n      throw new Error(\"Produit invalide ou prix incorrect.\");\n    }\n\n    // Convertir le prix du produit en unités appropriées (wei pour Ethereum)\n    const priceInWei = ethers.utils.parseUnits(amountIn.toString(), selectedCurrency === 'USDT' ? 6 : 18); // Conversion du montant en fonction de la devise\n\n    // Appel au contrat pour effectuer l'achat\n    const tx = await contractInstance.buyProduct(\n      selectedProductId,   // Identifiant du produit\n      priceInWei,          // Montant à envoyer (en fonction de la devise)\n      { value: selectedCurrency === 'BNB' ? priceInWei : 0 } // Si c'est BNB, l'envoyer dans le champ 'value'\n    );\n    \n    // Attendre que la transaction soit minée (confirmée)\n    const receipt = await tx.wait();\n    console.log(\"Transaction réussie:\", receipt);\n\n    // Effectuer des actions post-paiement, comme rediriger l'utilisateur, afficher un message de confirmation, etc.\n    alert(\"Paiement effectué avec succès !\");\n\n  } catch (error) {\n    console.error(\"Erreur lors du paiement:\", error);\n    alert(\"Une erreur s'est produite lors du paiement. Veuillez réessayer.\");\n  }\n};\n\n\n\n// Fonction pour le paiement\nconst handlePayment = async () => {\n  if (!walletConnected) {\n    alert(\"Veuillez connecter votre wallet avant de procéder.\");\n    return;\n  }\n\n  if (productId && productPrice) {\n    let amountIn = 0;\n    try {\n      if (selectedCurrency === 'USD') {\n        amountIn = productPrice;\n      } else if (selectedCurrency === 'BNB') {\n        if (!bnbToUsdRate) {\n          alert(\"Le taux de conversion BNB vers USD est en cours de chargement.\");\n          return;\n        }\n        amountIn = productPrice / bnbToUsdRate;\n      } else {\n        alert(\"Devise non supportée pour ce paiement.\");\n        return;\n      }\n\n      amountIn = parseFloat(amountIn).toFixed(18); // Conversion en format compatible Ethereum\n      // Vérification de l'allowance et approbation si nécessaire\n      await checkAllowance(ethers.utils.parseUnits(amountIn.toString(), selectedCurrency === 'USDT' ? 6 : 18));\n\n      await payForProduct(amountIn);  // Effectue le paiement une fois l'allowance confirmée\n\n      console.log(\"Transaction envoyée.\");\n    } catch (error) {\n      console.error(\"Erreur lors du calcul du montant:\", error.message);\n      alert(\"Une erreur s'est produite. Veuillez vérifier vos paramètres.\");\n    }\n  } else {\n    alert(\"Veuillez sélectionner un produit valide.\");\n  }\n};\n\n// Mise à jour des informations du produit\nconst updateProductInfo = (selectedProductId) => {\n  setProductId(selectedProductId);\n  const productDetails = products[selectedProductId];\n\n  if (productDetails) {\n    const { price, exists } = productDetails;\n    setProductPrice(price);\n    setProductInfo({ price, exists });\n\n    if (selectedCurrency === 'USD') {\n      setConvertedPrice(price ? price.toString() : null);\n    } else if (selectedCurrency === 'BNB') {\n      setConvertedPrice(price ? (price / bnbToUsdRate).toString() : null);\n    }\n  } else {\n    console.error(\"Produit non trouvé !\");\n  }\n};\n\n// Gestion du changement de devise\nconst handleCurrencyChange = (event) => {\n  const newCurrency = event.target.value;\n  setSelectedCurrency(newCurrency);\n\n  if (newCurrency === 'USD') {\n    setConvertedPrice(productPrice ? productPrice.toString() : null);\n  } else if (newCurrency === 'BNB') {\n    setConvertedPrice(productPrice ? (productPrice / bnbToUsdRate).toString() : null);\n  }\n};\n\nreturn (\n  <div className=\"App\">\n    <h1>Test de Paiement Multi-Produits avec Blockchain</h1>\n    <button onClick={connectWallet}>\n      {walletConnected ? `Wallet connecté : ${walletAddress}` : 'Connecter le wallet'}\n    </button>\n\n    {productId && productInfo && (\n      <div>\n        <p>Produit choisi : {productId}</p>\n        <p>Prix du produit : {convertedPrice ? convertedPrice : 'Chargement...'} {selectedCurrency}</p>\n        <p>Le produit est {productInfo.exists ? 'disponible' : 'indisponible'}</p>\n      </div>\n    )}\n\n    <select onChange={(e) => updateProductInfo(e.target.value)} value={productId}>\n      <option value=\"\">Sélectionnez un produit</option>\n      <option value=\"product1\">Produit 1</option>\n      <option value=\"product2\">Produit 2</option>\n      <option value=\"product3\">Produit 3</option>\n    </select>\n\n    <select onChange={handleCurrencyChange} value={selectedCurrency}>\n      <option value=\"USD\">USD</option>\n      <option value=\"BNB\">BNB</option>\n    </select>\n\n    <button onClick={handlePayment}>Payer pour le produit</button>\n  </div>\n);\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';  // Cette ligne doit être valide avec React 18\nimport App from './App';\nimport './index.css'; // Ajoute cette ligne dans ton fichier JavaScript\nimport './App.css'; \n\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n"],"sourceRoot":""}