{"version":3,"sources":["App.js","index.js"],"names":["contractAddress","ethers","providers","JsonRpcProvider","App","web3Modal","setWeb3Modal","useState","provider","setProvider","walletConnected","setWalletConnected","walletAddress","setWalletAddress","productInfo","setProductInfo","productId","setProductId","productPrice","setProductPrice","bnbToUsdRate","setBnbToUsdRate","selectedCurrency","setSelectedCurrency","convertedPrice","setConvertedPrice","useEffect","modal","Web3Modal","cacheProvider","providerOptions","walletconnect","package","WalletConnectProvider","options","infuraId","metamask","trustwallet","interval","setInterval","web3ModalElement","document","querySelector","style","zIndex","clearInterval","hideIframe","iframe","display","async","contractABI","contractInstance","Contract","getSigner","productDetails","products","price","error","console","loadBlockchainData","response","axios","get","data","binancecoin","usd","fetchBnbToUsdRate","resetProvider","window","ethereum","newProvider","Web3Provider","Error","alert","changeNetworkHandler","log","on","removeListener","product1","exists","product2","product3","_jsx","className","children","_jsxs","id","autoPlay","loop","muted","src","type","onClick","instance","connect","signer","address","getAddress","clearCachedProvider","request","method","params","eth_accounts","setTimeout","reconnectToMetaMask","retryError","disabled","_Fragment","onChange","e","selectedProductId","toString","updateProductInfo","target","value","event","newCurrency","checkNetwork","amountIn","parseFloat","toFixed","amountInWei","utils","parseUnits","gasEstimate","estimateGas","to","gasPrice","getGasPrice","totalGasCost","mul","getBalance","lt","add","tx","gasLimit","transactionResponse","sendTransaction","hash","receipt","wait","blockNumber","location","href","code","message","ReactDOM","createRoot","getElementById","render","React","StrictMode"],"mappings":"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","file":"static/js/main.a0b594c9.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport Web3Modal from 'web3modal';\nimport { ethers } from 'ethers';\nimport axios from 'axios';\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport process from 'process';\nimport './App.css'; // Importation du fichier CSS\nimport './index.css'; // Ajoute cette ligne dans ton fichier JavaScript\n\n\n\n\n\nconst contractAddress = '0xCd25eee89Bb01603f0E0cf8D8C243966a926761d';\nconst bscTestnetRpcUrl = \"https://bsc-dataseed.binance.org/\"; // BSC Mainnet\nconst bscTestnetProvider = new ethers.providers.JsonRpcProvider(bscTestnetRpcUrl);\n\n\n\n\nfunction App() {\n  const [web3Modal, setWeb3Modal] = useState(null);\n  const [provider, setProvider] = useState(null);\n  const [walletConnected, setWalletConnected] = useState(false);\n  const [walletAddress, setWalletAddress] = useState('');\n\n  const [productInfo, setProductInfo] = useState(null);\n  const [productId, setProductId] = useState('');\n  const [productPrice, setProductPrice] = useState(null);\n  const [bnbToUsdRate, setBnbToUsdRate] = useState(null);\n  const [selectedCurrency, setSelectedCurrency] = useState('USD');\n  const [convertedPrice, setConvertedPrice] = useState(null);\n\n\n\n\n\n\n  \n  // Initialisation de Web3Modal pour la connexion aux portefeuilles\n  useEffect(() => {\n  const modal = new Web3Modal({\n    cacheProvider: true, // Gardera en cache la dernière connexion\n    providerOptions: {\n      walletconnect: {\n        package: WalletConnectProvider, // Utilisation de WalletConnectProvider\n        options: {\n          infuraId: \"e759bc5af90042a1b66c5a01aae905af\" // Remplace avec ton propre infura ID\n        }\n      },\n      metamask: {\n        package: null, // MetaMask ne nécessite pas de package\n        \n      },\n      trustwallet: {\n        package: WalletConnectProvider, // Utilisation de WalletConnectProvider pour Trust Wallet\n        options: {\n          infuraId: \"pDtEhrK4AAiPfirK7qsQI25NJlgrtMu1bBcFDqV4J95GTCAR2d/8Lg\" // Remplace avec ton propre infura ID\n        }\n      },\n      \n      // Ajoute d'autres options de portefeuille ici si nécessaire (par exemple : Fortmatic, etc.)\n    }\n  });\n\n  setWeb3Modal(modal);\n\n  // Vérifie si la modale est présente dans le DOM\n  const interval = setInterval(() => {\n    const web3ModalElement = document.querySelector('.web3-modal-container');\n    if (web3ModalElement) {\n      web3ModalElement.style.zIndex = '999999'; // Modale au-dessus de tout\n      clearInterval(interval);\n    }\n  }, 100);\n\n  return () => clearInterval(interval);\n\n}, []);\n\n  \n\n\n  // Masquer l'iframe si elle est présente\n  const hideIframe = () => {\n    const iframe = document.querySelector('iframe');\n    if (iframe) {\n      iframe.style.display = 'none'; // ou iframe.remove() si tu préfères\n    }\n  };\n\n  // Appel de la fonction pour masquer l'iframe au moment où Web3Modal est chargé\n  hideIframe();\n  \n\n  // Fonction pour reconnecter MetaMask\n  const reconnectToMetaMask = async () => {\n    if (typeof window.ethereum === \"undefined\") {\n      alert(\"MetaMask n'est pas installé !\");\n      return;\n    }\n\n    try {\n      \n      await window.ethereum.request({\n        method: 'wallet_requestPermissions',\n        params: [{\n          eth_accounts: {}\n        }]\n      });\n\n      setTimeout(async () => {\n        const accounts = await window.ethereum.request({\n          method: 'eth_requestAccounts',\n        });\n\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n        const address = await signer.getAddress();\n\n        setWalletAddress(address);\n        setWalletConnected(true);\n        alert(`Compte connecté : ${address}`);\n      }, 1000);\n    } catch (error) {\n      console.error('Erreur de connexion à MetaMask :', error);\n      alert('Échec de la connexion à MetaMask.');\n    }\n  };\n\n\n  // Connexion au wallet via Web3Modal\n  const connectWallet = async () => {\n    if (!web3Modal) {\n      console.error(\"Web3Modal non initialisé\");\n      return;\n    }\n    \n    try {\n      console.log(\"Tentative de connexion au wallet...\");\n      \n      \n      // Connexion via Web3Modal\n      const instance = await web3Modal.connect();\n      const newProvider = new ethers.providers.Web3Provider(instance);\n      \n      // S'assurer que le provider est correctement défini\n      if (!newProvider) {\n        console.error(\"Le fournisseur Web3 n'a pas été correctement créé\");\n        return;\n      }\n      \n      setProvider(newProvider);\n  \n      // Récupérer l'adresse du wallet\n      const signer = newProvider.getSigner();\n      const address = await signer.getAddress();\n      \n      setWalletAddress(address);\n      setWalletConnected(true);\n      \n      console.log(`Wallet connecté: ${address}`);\n    } catch (error) {\n      console.error(\"Erreur lors de la connexion au portefeuille:\", error);\n      alert(\"Erreur de connexion au portefeuille. Veuillez connecter votre wallet.\");\n      // Ferme Web3Modal\n      web3Modal.clearCachedProvider();\n\n      // Relance le processus de reconnexion via MetaMask\n      try {\n        if (typeof window.ethereum !== \"undefined\") {\n          await reconnectToMetaMask();\n        } else {\n          alert(\"MetaMask n'est pas installé.\");\n        }\n      } catch (retryError) {\n        console.error(\"Échec de la reconnexion à MetaMask\", retryError);\n        alert(\"La reconnexion à MetaMask a échoué.\");\n      }\n    }\n  };\n  \n\n  // Récupération du taux de conversion BNB vers USD\n  const fetchBnbToUsdRate = async () => {\n    try {\n      const response = await axios.get('https://api.coingecko.com/api/v3/simple/price?ids=binancecoin&vs_currencies=usd');\n      setBnbToUsdRate(response.data.binancecoin.usd);\n    } catch (error) {\n      console.error('Erreur lors de la récupération du taux BNB -> USD', error);\n    }\n  };\n\n   // Charger les données du contrat et les informations du produit\n   useEffect(() => {\n    const loadBlockchainData = async () => {\n      if (provider) {\n        const contractAddress = '0xD62B5CFdDfd26F6219E4BF366d9DB6B1450D5905';\n        const contractABI = \n[\n\t{\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"address\",\n\t\t\t\t\"name\": \"token\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"addAllowedToken\",\n\t\t\"outputs\": [],\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"address\",\n\t\t\t\t\"name\": \"token\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\"name\": \"amount\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"internalType\": \"string\",\n\t\t\t\t\"name\": \"productId\",\n\t\t\t\t\"type\": \"string\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"pay\",\n\t\t\"outputs\": [],\n\t\t\"stateMutability\": \"payable\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"address\",\n\t\t\t\t\"name\": \"token\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"removeAllowedToken\",\n\t\t\"outputs\": [],\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"address[]\",\n\t\t\t\t\"name\": \"tokens\",\n\t\t\t\t\"type\": \"address[]\"\n\t\t\t}\n\t\t],\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"constructor\"\n\t},\n\t{\n\t\t\"anonymous\": false,\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"indexed\": true,\n\t\t\t\t\"internalType\": \"address\",\n\t\t\t\t\"name\": \"user\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"indexed\": false,\n\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\"name\": \"amount\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"indexed\": false,\n\t\t\t\t\"internalType\": \"address\",\n\t\t\t\t\"name\": \"token\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"indexed\": false,\n\t\t\t\t\"internalType\": \"string\",\n\t\t\t\t\"name\": \"productId\",\n\t\t\t\t\"type\": \"string\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"PaymentReceived\",\n\t\t\"type\": \"event\"\n\t},\n\t{\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"string\",\n\t\t\t\t\"name\": \"productId\",\n\t\t\t\t\"type\": \"string\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"removeProduct\",\n\t\t\"outputs\": [],\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"string\",\n\t\t\t\t\"name\": \"productId\",\n\t\t\t\t\"type\": \"string\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\"name\": \"price\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"setProductPrice\",\n\t\t\"outputs\": [],\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\"name\": \"amount\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"withdraw\",\n\t\t\"outputs\": [],\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"address\",\n\t\t\t\t\"name\": \"token\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\"name\": \"amount\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"withdrawToken\",\n\t\t\"outputs\": [],\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"address\",\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"allowedTokens\",\n\t\t\"outputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"bool\",\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"bool\"\n\t\t\t}\n\t\t],\n\t\t\"stateMutability\": \"view\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"address\",\n\t\t\t\t\"name\": \"token\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"isTokenAllowed\",\n\t\t\"outputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"bool\",\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"bool\"\n\t\t\t}\n\t\t],\n\t\t\"stateMutability\": \"view\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [],\n\t\t\"name\": \"owner\",\n\t\t\"outputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"address\",\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t}\n\t\t],\n\t\t\"stateMutability\": \"view\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"string\",\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"string\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"products\",\n\t\t\"outputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\"name\": \"price\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"internalType\": \"bool\",\n\t\t\t\t\"name\": \"exists\",\n\t\t\t\t\"type\": \"bool\"\n\t\t\t}\n\t\t],\n\t\t\"stateMutability\": \"view\",\n\t\t\"type\": \"function\"\n\t}\n];\n\n\n\n\n        const contractInstance = new ethers.Contract(contractAddress, contractABI, provider.getSigner());\n        \n        try {\n          const productDetails = await contractInstance.products(\"product1\");\n          setProductInfo(productDetails);\n          setProductPrice(productDetails.price);\n        } catch (error) {\n          console.error(\"Erreur lors de la récupération des informations du produit:\", error);\n        }\n      }\n    };\n\n    loadBlockchainData();\n    fetchBnbToUsdRate();\n  }, [provider]);\n\n\n\n  \n\n  const sendTransaction = async (amountIn) => {\n    if (!provider) {\n      alert(\"Le provider n'est pas défini, veuillez connecter votre wallet.\");\n      return;\n    }\n  \n    try {\n      // Utiliser le signer déjà défini\n      const signer = provider.getSigner();\n      const amountInWei = ethers.utils.parseUnits(amountIn.toString(), 18); // Convertir en Wei\n  \n      // Estimer les frais de gaz pour cette transaction spécifique\n      const gasEstimate = await provider.estimateGas({\n        to: contractAddress,\n        value: amountInWei\n      });\n  \n      const gasPrice = await provider.getGasPrice(); // Récupérer le prix du gaz actuel\n  \n      // Calculer le montant total (montant de la transaction + frais de gaz estimés)\n      const totalGasCost = gasPrice.mul(gasEstimate);\n      \n      const walletBalance = await provider.getBalance(signer.getAddress());\n  \n      // Vérification que le solde du wallet est suffisant pour couvrir la transaction + frais de gaz\n      if (walletBalance.lt(amountInWei.add(totalGasCost))) {\n        alert(\"Solde insuffisant pour couvrir la transaction et les frais de gaz.\");\n        return;\n      }\n  \n      // Créer la transaction avec les paramètres estimés\n      const tx = {\n        to: contractAddress,\n        value: amountInWei,  // Montant de la transaction en Wei\n        gasLimit: gasEstimate,  // Utiliser l'estimation du gasLimit\n        gasPrice: gasPrice,  // Utiliser le prix du gaz actuel\n      };\n  \n      console.log(\"Transaction à envoyer avec les paramètres:\", tx);\n  \n      // Envoyer la transaction\n      const transactionResponse = await signer.sendTransaction(tx);\n      console.log(\"Transaction envoyée, hash:\", transactionResponse.hash);\n  \n      // Attendre la confirmation de la transaction\n      const receipt = await transactionResponse.wait();\n      console.log(\"Transaction confirmée dans le bloc:\", receipt.blockNumber);\n  \n      // Rediriger vers une page de confirmation après la transaction réussie\n      window.location.href = '/Delivrance_IndicateurD.html';  // Remplacez par votre page de confirmation\n  \n    } catch (error) {\n      console.error(\"Erreur lors de l'envoi de la transaction:\", error);\n  \n      // Afficher l'erreur réelle dans un message plus lisible\n      if (error.code === 'INSUFFICIENT_FUNDS') {\n        alert(\"Erreur : fonds insuffisants pour couvrir la transaction.\");\n      } else if (error.code === 'TRANSACTION_REPLACEMENT_ERROR') {\n        alert(\"Erreur : il y a eu un problème avec le remplacement de la transaction.\");\n      } else {\n        alert(`Une erreur s'est produite : ${error.message}`);\n      }\n    }\n  };\n  \n  \n  \n\n\n  const checkNetwork = async () => {\n    if (typeof window.ethereum !== \"undefined\") {\n      const network = await window.ethereum.request({\n        method: 'eth_chainId'\n      });\n  \n      // Vérifie si l'utilisateur est bien sur BSC Testnet (chainId 97)\n      if (network !== '0x38') { // 0x38 est le chainId pour BSC Mainnet\n        alert(\"Veuillez vous connecter au réseau Binance Smart Chain Mainnet.\");\n        return false;\n      }\n      \n      return true;\n    } else {\n      console.error(\"Ethereum n'est pas disponible.\");\n      alert(\"MetaMask ou un autre portefeuille Ethereum n'est pas installé.\");\n      return false;\n    }\n  };\n\n\n\n\n\n\n  // Fonction pour réinitialiser le provider\n  const resetProvider = async () => {\n    try {\n      if (typeof window.ethereum !== \"undefined\") {\n        const newProvider = new ethers.providers.Web3Provider(window.ethereum);\n        setProvider(newProvider); // Mettre à jour le provider\n\n        // Attendre que React ait bien mis à jour le provider\n        return newProvider.getSigner(); // Retourner le signer après que le provider ait été mis à jour\n      } else {\n        throw new Error(\"Aucun fournisseur Ethereum n'est disponible.\");\n      }\n    } catch (error) {\n      console.error(\"Erreur dans resetProvider:\", error);\n      alert(\"Erreur lors de la réinitialisation du provider.\");\n      return null;\n    }\n  };\n\n  // Vérification du réseau à chaque fois qu'il change\n  useEffect(() => {\n    const changeNetworkHandler = async () => {\n      try {\n        await resetProvider(); // Remet à jour le provider lorsque le réseau change\n        console.log(\"Le provider a été réinitialisé après le changement de réseau.\");\n      } catch (error) {\n        console.error(\"Erreur lors du changement de réseau et réinitialisation du provider:\", error);\n      }\n    };\n\n    if (typeof window.ethereum !== \"undefined\") {\n      window.ethereum.on('chainChanged', changeNetworkHandler);\n    }\n\n    // Nettoyage quand le composant est démonté\n    return () => {\n      if (typeof window.ethereum !== \"undefined\") {\n        window.ethereum.removeListener('chainChanged', changeNetworkHandler);\n      }\n    };\n  }, []);\n  \n  \n\n\n  // Fonction de gestion du paiement\n  const handlePayment = async () => {\n    if (!walletConnected) {\n      alert(\"Veuillez connecter votre wallet avant de procéder.\");\n      return;\n    }\n\n    // Vérifie que l'utilisateur est sur le bon réseau\n  const isCorrectNetwork = await checkNetwork();\n  if (!isCorrectNetwork) {\n    return; // Ne pas procéder à la transaction si l'utilisateur n'est pas sur le bon réseau\n  }\n  // Vérifier que le provider est disponible\n  if (!provider) {\n    alert(\" Reconnection au provider effectué. Veuillez renouveler l'opération \");\n    return;\n  }\n\n  // Assurez-vous que le provider est bien à jour avant de procéder à la transaction\n  await resetProvider(); // Réinitialise le provider si nécessaire\n\n    if (productId && productPrice) {\n      let amountIn = 0;\n      try {\n        // Calculer le montant à envoyer en fonction de la devise sélectionnée\n        if (selectedCurrency === 'USD') {\n          amountIn = productPrice; // Pas de conversion nécessaire si en USD\n        } else if (selectedCurrency === 'BNB') {\n          // Si la devise est BNB, on effectue la conversion avec le taux BNB/USD\n          if (!bnbToUsdRate) {\n            alert(\"Le taux de conversion BNB vers USD est encore en cours de chargement.\");\n            return;\n          }\n          amountIn = productPrice / bnbToUsdRate;\n        }\n  \n        // Convertir le montant à un format acceptable (fixé à 18 décimales)\n        amountIn = parseFloat(amountIn).toFixed(18);\n        console.log('Montant final pour la transaction:', amountIn);\n  \n        // Envoyer la transaction\n        await sendTransaction(amountIn); // Attendre la réponse de la transaction\n      } catch (error) {\n        console.error(\"Erreur lors de l'envoi de la transaction:\", error.message);\n        alert(\"Une erreur s'est produite lors de l'envoi de la transaction. Vérifiez votre solde et les paramètres.\");\n      }\n    } else {\n      alert(\"Veuillez sélectionner un produit valide et essayer de nouveau.\");\n    }\n  };\n\n  // Liste des produits\n  const products = {\n    product1: { price: 5, exists: true },\n    product2: { price: 299, exists: true },\n    product3: { price: 499, exists: true }\n  };\n  \n  // Mise à jour des informations du produit sélectionné\n  const updateProductInfo = (selectedProductId) => {\n    setProductId(selectedProductId);\n    const productDetails = products[selectedProductId];\n  \n    if (productDetails) {\n      const { price, exists } = productDetails;\n      setProductPrice(price);\n      setProductInfo({ price, exists });\n  \n      if (selectedCurrency === 'USD') {\n        setConvertedPrice(price ? price.toString() : null);\n      } else if (selectedCurrency === 'BNB') {\n        setConvertedPrice(price ? (price / bnbToUsdRate).toString() : null);\n      }\n    } else {\n      console.error(\"Produit non trouvé !\");\n    }\n  };\n\n  // Gestion du changement de devise (USD ou BNB)\n  const handleCurrencyChange = (event) => {\n    const newCurrency = event.target.value;\n    setSelectedCurrency(newCurrency);\n\n    if (newCurrency === 'USD') {\n      setConvertedPrice(productPrice ? productPrice.toString() : null);\n    } else if (newCurrency === 'BNB') {\n      setConvertedPrice(productPrice ? (productPrice / bnbToUsdRate).toString() : null);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      {/* Conteneur de parallax */}\n      <div className=\"parallax-container\">\n        <video id=\"video-background\" autoPlay loop muted>\n          {/* Remplace la source locale par l'URL IPFS */}\n          <source \n            src=\"https://gateway.pinata.cloud/ipfs/QmPZ8v3KzeyH2Dqz29TZFWe4kswkUETJyesZFCFULtagwv\" \n            type=\"video/mp4\" \n          />\n          Votre navigateur ne supporte pas les vidéos HTML5.\n        </video>\n\n        {/* Contenu défilant */}\n        <div className=\"content\">\n          \n\n          {/* Bouton de connexion du wallet en haut à droite */}\n          <div className=\"wallet-connect-button\">\n            <button\n      \n              onClick={connectWallet}\n              disabled={walletConnected} // Désactive le bouton une fois connecté\n            >\n              {walletConnected ? (\n                <>\n                  <span>Wallet connecté : {walletAddress}</span>\n                  <span className=\"arrow-icon\">→</span> {/* Icône flèche */}\n                </>\n              ) : (\n                'Connecter le wallet'\n              )}\n            </button>\n          </div>\n\n          {/* Conteneur du formulaire de paiement */}\n          <div className=\"payment-wrapper\">\n            <h1> Les Indicateurs à Levier </h1>\n\n            {productId && productInfo && (\n              <div>\n                <p>Produit choisi : {productId}</p>\n                <p>Prix du produit : {convertedPrice ? convertedPrice : 'Chargement...'} {selectedCurrency}</p>\n                <p>Le produit est {productInfo.exists ? 'disponible' : 'indisponible'}</p>\n              </div>\n            )}\n\n            <select onChange={(e) => updateProductInfo(e.target.value)} value={productId}>\n              <option value=\"\">Choisi Ton Indicateur</option>\n              <option value=\"product1\">Indicateur Daily</option>\n              <option value=\"product2\">Indicateur 4h/1h</option>\n              <option value=\"product3\">Indicateur 15mn</option>\n            </select>\n\n            <select onChange={handleCurrencyChange} value={selectedCurrency}>\n              <option value=\"USD\">USD</option>\n              <option value=\"BNB\">BNB</option>\n            </select>\n\n            <button onClick={handlePayment}>Acheter</button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  \n  \n};\n\n\nexport default App;\n\n\n\n\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';  // Cette ligne doit être valide avec React 18\nimport App from './App';\nimport './index.css'; // Ajoute cette ligne dans ton fichier JavaScript\nimport './App.css'; \n\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n"],"sourceRoot":""}