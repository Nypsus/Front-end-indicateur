{"version":3,"sources":["App.js","index.js"],"names":["usdtAddress","usdtABI","contractAddress","ethers","providers","JsonRpcProvider","App","web3Modal","setWeb3Modal","useState","provider","setProvider","walletConnected","setWalletConnected","walletAddress","setWalletAddress","productInfo","setProductInfo","productId","setProductId","productPrice","setProductPrice","bnbToUsdRate","setBnbToUsdRate","selectedCurrency","setSelectedCurrency","convertedPrice","setConvertedPrice","contractInstance","setContractInstance","useEffect","modal","Web3Modal","cacheProvider","providerOptions","walletconnect","package","WalletConnectProvider","options","infuraId","metamask","trustwallet","interval","setInterval","web3ModalElement","document","querySelector","style","zIndex","clearInterval","hideIframe","iframe","display","async","contractABI","contract","Contract","getSigner","productDetails","products","price","error","console","loadBlockchainData","response","axios","get","data","binancecoin","usd","fetchBnbToUsdRate","loading","setLoading","ipfsUrl","productsFromIpfs","product1","product2","product3","fetchProductInfo","resetProvider","window","ethereum","newProvider","Web3Provider","Error","alert","changeNetworkHandler","log","on","removeListener","_jsxs","className","children","_jsx","id","autoPlay","loop","muted","src","type","onClick","instance","connect","signer","address","getAddress","clearCachedProvider","request","method","params","eth_accounts","setTimeout","reconnectToMetaMask","retryError","disabled","_Fragment","exists","onChange","e","selectedProductId","toString","updateProductInfo","target","value","event","newCurrency","checkNetwork","tx","wait","message","amountIn","parseFloat","toFixed","amountInEther","utils","parseUnits","gasLimit","adjustedGasPrice","getGasPrice","mul","walletBalance","getBalance","lt","add","usdtContract","balanceOf","to","gasPrice","tokenAmount","transferFrom","transactionResponse","sendTransaction","hash","receipt","blockNumber","location","href","ReactDOM","createRoot","getElementById","render","React","StrictMode"],"mappings":"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","file":"static/js/main.c689b98b.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport Web3Modal from 'web3modal';\nimport { ethers } from 'ethers';\nimport axios from 'axios';\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport process from 'process';\nimport './App.css'; // Importation du fichier CSS\nimport './index.css'; // Ajoute cette ligne dans ton fichier JavaScript\n\n\n// Adresse du contrat USDT sur BSC (assure-toi que c'est l'adresse correcte pour le réseau que tu utilises)\nconst usdtAddress = '0x55d398326f99059fF775485246999027B3197955'; // Adresse du contrat USDT sur Binance Smart Chain\n\n// ABI pour le contrat USDT\nconst usdtABI = [\n  // Seules les parties nécessaires pour ton utilisation, par exemple :\n  {\n    \"constant\": true,\n    \"inputs\": [\n      {\n        \"name\": \"_owner\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"balanceOf\",\n    \"outputs\": [\n      {\n        \"name\": \"balance\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"payable\": false,\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": false,\n    \"inputs\": [\n      {\n        \"name\": \"_to\",\n        \"type\": \"address\"\n      },\n      {\n        \"name\": \"_value\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"transferFrom\",\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bool\"\n      }\n    ],\n    \"payable\": false,\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  }\n];\n\n\n\nconst contractAddress = '0xCd25eee89Bb01603f0E0cf8D8C243966a926761d';\nconst bscTestnetRpcUrl = \"https://bsc-dataseed.binance.org/\"; // BSC Mainnet\nconst bscTestnetProvider = new ethers.providers.JsonRpcProvider(bscTestnetRpcUrl);\n\n\n\n\nfunction App() {\n  const [web3Modal, setWeb3Modal] = useState(null);\n  const [provider, setProvider] = useState(null);\n  const [walletConnected, setWalletConnected] = useState(false);\n  const [walletAddress, setWalletAddress] = useState('');\n\n  const [productInfo, setProductInfo] = useState(null);\n  const [productId, setProductId] = useState('');\n  const [productPrice, setProductPrice] = useState(null);\n  const [bnbToUsdRate, setBnbToUsdRate] = useState(null);\n  const [selectedCurrency, setSelectedCurrency] = useState('USD');\n  const [convertedPrice, setConvertedPrice] = useState(null);\n  const [contractInstance, setContractInstance] = useState(null); // Déclarez `contractInstance` ici\n\n\n\n\n\n\n\n  \n  // Initialisation de Web3Modal pour la connexion aux portefeuilles\n  useEffect(() => {\n  const modal = new Web3Modal({\n    cacheProvider: true, // Gardera en cache la dernière connexion\n    providerOptions: {\n      walletconnect: {\n        package: WalletConnectProvider, // Utilisation de WalletConnectProvider\n        options: {\n          infuraId: \"e759bc5af90042a1b66c5a01aae905af\" // Remplace avec ton propre infura ID\n        }\n      },\n      metamask: {\n        package: null, // MetaMask ne nécessite pas de package\n        \n      },\n      trustwallet: {\n        package: WalletConnectProvider, // Utilisation de WalletConnectProvider pour Trust Wallet\n        options: {\n          infuraId: \"pDtEhrK4AAiPfirK7qsQI25NJlgrtMu1bBcFDqV4J95GTCAR2d/8Lg\" // Remplace avec ton propre infura ID\n        }\n      },\n      \n      // Ajoute d'autres options de portefeuille ici si nécessaire (par exemple : Fortmatic, etc.)\n    }\n  });\n\n  setWeb3Modal(modal);\n\n  // Vérifie si la modale est présente dans le DOM\n  const interval = setInterval(() => {\n    const web3ModalElement = document.querySelector('.web3-modal-container');\n    if (web3ModalElement) {\n      web3ModalElement.style.zIndex = '999999'; // Modale au-dessus de tout\n      clearInterval(interval);\n    }\n  }, 100);\n\n  return () => clearInterval(interval);\n\n}, []);\n\n  \n\n\n  // Masquer l'iframe si elle est présente\n  const hideIframe = () => {\n    const iframe = document.querySelector('iframe');\n    if (iframe) {\n      iframe.style.display = 'none'; // ou iframe.remove() si tu préfères\n    }\n  };\n\n  // Appel de la fonction pour masquer l'iframe au moment où Web3Modal est chargé\n  hideIframe();\n  \n\n  // Fonction pour reconnecter MetaMask\n  const reconnectToMetaMask = async () => {\n    if (typeof window.ethereum === \"undefined\") {\n      alert(\"MetaMask n'est pas installé !\");\n      return;\n    }\n\n    try {\n      \n      await window.ethereum.request({\n        method: 'wallet_requestPermissions',\n        params: [{\n          eth_accounts: {}\n        }]\n      });\n\n      setTimeout(async () => {\n        const accounts = await window.ethereum.request({\n          method: 'eth_requestAccounts',\n        });\n\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n        const address = await signer.getAddress();\n\n        setWalletAddress(address);\n        setWalletConnected(true);\n        alert(`Compte connecté : ${address}`);\n      }, 1000);\n    } catch (error) {\n      console.error('Erreur de connexion à MetaMask :', error);\n      alert('Échec de la connexion à MetaMask.');\n    }\n  };\n\n\n  // Connexion au wallet via Web3Modal\n  const connectWallet = async () => {\n    if (!web3Modal) {\n      console.error(\"Web3Modal non initialisé\");\n      return;\n    }\n    \n    try {\n      console.log(\"Tentative de connexion au wallet...\");\n      \n      \n      // Connexion via Web3Modal\n      const instance = await web3Modal.connect();\n      const newProvider = new ethers.providers.Web3Provider(instance);\n      \n      // S'assurer que le provider est correctement défini\n      if (!newProvider) {\n        console.error(\"Le fournisseur Web3 n'a pas été correctement créé\");\n        return;\n      }\n      \n      setProvider(newProvider);\n  \n      // Récupérer l'adresse du wallet\n      const signer = newProvider.getSigner();\n      const address = await signer.getAddress();\n      \n      setWalletAddress(address);\n      setWalletConnected(true);\n      \n      console.log(`Wallet connecté: ${address}`);\n    } catch (error) {\n      console.error(\"Erreur lors de la connexion au portefeuille:\", error);\n      alert(\"Erreur de connexion au portefeuille. Veuillez connecter votre wallet.\");\n      // Ferme Web3Modal\n      web3Modal.clearCachedProvider();\n\n      // Relance le processus de reconnexion via MetaMask\n      try {\n        if (typeof window.ethereum !== \"undefined\") {\n          await reconnectToMetaMask();\n        } else {\n          alert(\"MetaMask n'est pas installé.\");\n        }\n      } catch (retryError) {\n        console.error(\"Échec de la reconnexion à MetaMask\", retryError);\n        alert(\"La reconnexion à MetaMask a échoué.\");\n      }\n    }\n  };\n  \n\n  // Récupération du taux de conversion BNB vers USD\n  const fetchBnbToUsdRate = async () => {\n    try {\n      const response = await axios.get('https://api.coingecko.com/api/v3/simple/price?ids=binancecoin&vs_currencies=usd');\n      setBnbToUsdRate(response.data.binancecoin.usd);\n    } catch (error) {\n      console.error('Erreur lors de la récupération du taux BNB -> USD', error);\n    }\n  };\n\n   // Charger les données du contrat et les informations du produit\n   useEffect(() => {\n    const loadBlockchainData = async () => {\n      if (provider) {\n        const contractAddress = '0xD62B5CFdDfd26F6219E4BF366d9DB6B1450D5905';\n        const contractABI = \n[\n\t{\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"address\",\n\t\t\t\t\"name\": \"token\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"addAllowedToken\",\n\t\t\"outputs\": [],\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"address\",\n\t\t\t\t\"name\": \"token\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\"name\": \"amount\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"internalType\": \"string\",\n\t\t\t\t\"name\": \"productId\",\n\t\t\t\t\"type\": \"string\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"pay\",\n\t\t\"outputs\": [],\n\t\t\"stateMutability\": \"payable\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"address\",\n\t\t\t\t\"name\": \"token\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"removeAllowedToken\",\n\t\t\"outputs\": [],\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"address[]\",\n\t\t\t\t\"name\": \"tokens\",\n\t\t\t\t\"type\": \"address[]\"\n\t\t\t}\n\t\t],\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"constructor\"\n\t},\n\t{\n\t\t\"anonymous\": false,\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"indexed\": true,\n\t\t\t\t\"internalType\": \"address\",\n\t\t\t\t\"name\": \"user\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"indexed\": false,\n\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\"name\": \"amount\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"indexed\": false,\n\t\t\t\t\"internalType\": \"address\",\n\t\t\t\t\"name\": \"token\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"indexed\": false,\n\t\t\t\t\"internalType\": \"string\",\n\t\t\t\t\"name\": \"productId\",\n\t\t\t\t\"type\": \"string\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"PaymentReceived\",\n\t\t\"type\": \"event\"\n\t},\n\t{\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"string\",\n\t\t\t\t\"name\": \"productId\",\n\t\t\t\t\"type\": \"string\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"removeProduct\",\n\t\t\"outputs\": [],\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"string\",\n\t\t\t\t\"name\": \"productId\",\n\t\t\t\t\"type\": \"string\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\"name\": \"price\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"setProductPrice\",\n\t\t\"outputs\": [],\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\"name\": \"amount\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"withdraw\",\n\t\t\"outputs\": [],\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"address\",\n\t\t\t\t\"name\": \"token\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\"name\": \"amount\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"withdrawToken\",\n\t\t\"outputs\": [],\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"address\",\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"allowedTokens\",\n\t\t\"outputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"bool\",\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"bool\"\n\t\t\t}\n\t\t],\n\t\t\"stateMutability\": \"view\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"address\",\n\t\t\t\t\"name\": \"token\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"isTokenAllowed\",\n\t\t\"outputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"bool\",\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"bool\"\n\t\t\t}\n\t\t],\n\t\t\"stateMutability\": \"view\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [],\n\t\t\"name\": \"owner\",\n\t\t\"outputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"address\",\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t}\n\t\t],\n\t\t\"stateMutability\": \"view\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"string\",\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"string\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"products\",\n\t\t\"outputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\"name\": \"price\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"internalType\": \"bool\",\n\t\t\t\t\"name\": \"exists\",\n\t\t\t\t\"type\": \"bool\"\n\t\t\t}\n\t\t],\n\t\t\"stateMutability\": \"view\",\n\t\t\"type\": \"function\"\n\n    \n\t}\n];\n\n\n\n\n        // Crée une nouvelle instance du contrat\n        const contract = new ethers.Contract(contractAddress, contractABI, provider.getSigner());\n\n        // Stocke cette instance dans l'état\n        setContractInstance(contract);\n        \n        try {\n          const productDetails = await contractInstance.products(\"product1\");\n          setProductInfo(productDetails);\n          setProductPrice(productDetails.price);\n        } catch (error) {\n          console.error(\"Erreur lors de la récupération des informations du produit:\", error);\n        }\n\n        \n      }\n    };\n\n    loadBlockchainData();\n    fetchBnbToUsdRate();\n  }, [provider]);\n\n\n\n  const [loading, setLoading] = useState(false); // Ajout de l'état loading\n\n  const fetchProductInfo = async () => {\n    setLoading(true);  // On met à true pour indiquer qu'on charge les données\n    try {\n      // URL du fichier JSON hébergé sur IPFS via Pinata\n      const ipfsUrl = 'https://gateway.pinata.cloud/ipfs/Qme4BKfGHuMukLnbf7LqZTqK6snH57eFbENeqVzLfg28eg';\n      const response = await axios.get(ipfsUrl);\n      const productsFromIpfs = response.data;\n    \n      // Vérification de la structure du JSON\n      if (productsFromIpfs && productsFromIpfs.product1 && productsFromIpfs.product2 && productsFromIpfs.product3) {\n        setProductInfo(productsFromIpfs);\n      } else {\n        console.error(\"Structure des produits invalide sur IPFS.\");\n      }\n    } catch (error) {\n      console.error('Erreur lors de la récupération des informations du produit depuis IPFS:', error);\n    } finally {\n      setLoading(false);  // Lorsque les données sont chargées ou en cas d'erreur, on met loading à false\n    }\n  };\n\n  \n  \n  useEffect(() => {\n    fetchProductInfo();\n  }, []);\n  \n  \n\n  const sendTransaction = async (amountIn) => {\n    if (!provider) {\n      alert(\"Le provider n'est pas défini, veuillez connecter votre wallet.\");\n      return;\n    }\n  \n    try {\n      // Utilise le provider et signer déjà définis via Web3Modal\n      const signer = provider.getSigner();\n      const amountInEther = ethers.utils.parseUnits(amountIn.toString(), 18);\n  \n      // Obtenez le prix du gaz actuel\n      const gasLimit = 200000;  // Limite de gaz pour la transaction\n      const gasPrice = await provider.getGasPrice();  // Utilise le prix actuel du gaz\n      const adjustedGasPrice = gasPrice.mul(2);  // Ajuste le prix du gaz si nécessaire\n\n      // Vérifiez que vous avez assez de fonds\n      const walletBalance = await provider.getBalance(signer.getAddress());\n      if (selectedCurrency === 'BNB' && walletBalance.lt(amountInEther.add(adjustedGasPrice))) {\n        alert(\"Solde insuffisant pour couvrir la transaction et les frais de gaz en BNB.\");\n        return;\n      } \n  \n      if (selectedCurrency === 'USDT') {\n        // Vérification du solde en USDT\n        const usdtContract = new ethers.Contract(usdtAddress, usdtABI, signer);\n        const usdtBalance = await usdtContract.balanceOf(signer.getAddress());\n        if (usdtBalance.lt(amountInEther)) {\n          alert(\"Solde insuffisant en USDT pour couvrir la transaction.\");\n          return;\n        }\n      }\n\n      // Préparez la transaction\n      const tx = {\n        to: contractAddress,\n        value: selectedCurrency === 'BNB' ? amountInEther : 0,  // Montant en BNB\n        gasLimit: gasLimit,\n        gasPrice: adjustedGasPrice,\n      };\n  \n      if (selectedCurrency === 'USDT') {\n        const usdtContract = new ethers.Contract(usdtAddress, usdtABI, signer);\n        const tokenAmount = ethers.utils.parseUnits(amountIn.toString(), 6); // USDT a 6 décimales\n        await usdtContract.transferFrom(signer.getAddress(), contractAddress, tokenAmount);\n        console.log(\"USDT envoyés au contrat.\");\n      }\n\n      const transactionResponse = await signer.sendTransaction(tx);\n      console.log(\"Transaction envoyée:\", transactionResponse.hash);\n      await transactionResponse.wait();\n  \n      // Attendez la confirmation de la transaction\n      const receipt = await transactionResponse.wait();\n      console.log(\"Transaction confirmée dans le bloc:\", receipt.blockNumber);\n\n      // Rediriger vers une nouvelle page après la transaction réussie\n      window.location.href = '/Delivrance_IndicateurD.html';  // Remplace '/confirmation.html' par le chemin de la page HTML\n\n  \n    } catch (error) {\n      console.error(\"Erreur lors de l'envoi de la transaction:\", error);\n      alert(\"Une erreur s'est produite lors de l'envoi de la transaction.\");\n    }\n  };\n\n\n  const checkNetwork = async () => {\n    if (typeof window.ethereum !== \"undefined\") {\n      const network = await window.ethereum.request({\n        method: 'eth_chainId'\n      });\n  \n      // Vérifie si l'utilisateur est bien sur BSC Testnet (chainId 97)\n      if (network !== '0x38') { // 0x38 est le chainId pour BSC Mainnet\n        alert(\"Veuillez vous connecter au réseau Binance Smart Chain Mainnet.\");\n        return false;\n      }\n      \n      return true;\n    } else {\n      console.error(\"Ethereum n'est pas disponible.\");\n      alert(\"MetaMask ou un autre portefeuille Ethereum n'est pas installé.\");\n      return false;\n    }\n  };\n\n\n\n\n\n\n  // Fonction pour réinitialiser le provider\n  const resetProvider = async () => {\n    try {\n      if (typeof window.ethereum !== \"undefined\") {\n        const newProvider = new ethers.providers.Web3Provider(window.ethereum);\n        setProvider(newProvider); // Mettre à jour le provider\n\n        // Attendre que React ait bien mis à jour le provider\n        return newProvider.getSigner(); // Retourner le signer après que le provider ait été mis à jour\n      } else {\n        throw new Error(\"Aucun fournisseur Ethereum n'est disponible.\");\n      }\n    } catch (error) {\n      console.error(\"Erreur dans resetProvider:\", error);\n      alert(\"Erreur lors de la réinitialisation du provider.\");\n      return null;\n    }\n  };\n\n  // Vérification du réseau à chaque fois qu'il change\n  useEffect(() => {\n    const changeNetworkHandler = async () => {\n      try {\n        await resetProvider(); // Remet à jour le provider lorsque le réseau change\n        console.log(\"Le provider a été réinitialisé après le changement de réseau.\");\n      } catch (error) {\n        console.error(\"Erreur lors du changement de réseau et réinitialisation du provider:\", error);\n      }\n    };\n\n    if (typeof window.ethereum !== \"undefined\") {\n      window.ethereum.on('chainChanged', changeNetworkHandler);\n    }\n\n    // Nettoyage quand le composant est démonté\n    return () => {\n      if (typeof window.ethereum !== \"undefined\") {\n        window.ethereum.removeListener('chainChanged', changeNetworkHandler);\n      }\n    };\n  }, []);\n  \n  \n\n\n  // Fonction de gestion du paiement\n  const handlePayment = async () => {\n    if (!walletConnected) {\n      alert(\"Veuillez connecter votre wallet avant de procéder.\");\n      return;\n    }\n\n    // Vérifie que l'utilisateur est sur le bon réseau\n  const isCorrectNetwork = await checkNetwork();\n  if (!isCorrectNetwork) {\n    return; // Ne pas procéder à la transaction si l'utilisateur n'est pas sur le bon réseau\n  }\n  // Vérifier que le provider est disponible\n  if (!provider) {\n    alert(\" Reconnection au provider effectué. Veuillez renouveler l'opération \");\n    return;\n  }\n\n  // Assurez-vous que le provider est bien à jour avant de procéder à la transaction\n  await resetProvider(); // Réinitialise le provider si nécessaire\n\n  // Vérifie si un produit a été sélectionné et si ses informations sont valides\n  if (productId && productInfo && productInfo[productId]) {\n    const productDetails = productInfo[productId];\n    \n    // Vérifie si le produit existe et a un prix valide\n    if (!productDetails.exists || productDetails.price <= 0) {\n      alert(\"Produit invalide ou prix incorrect.\");\n      return;\n    }\n\n    // **Mise à jour du produit dans le smart contrat** (c'est ici que tu ajoutes la mise à jour)\n    try {\n      const tx = await contractInstance.setProductPrice(productId, productDetails.price);\n      await tx.wait(); // Attends que la transaction soit minée\n      console.log(\"Produit mis à jour dans le contrat avec succès !\");\n    } catch (error) {\n      console.error(\"Erreur lors de la mise à jour du produit dans le contrat:\", error.message);\n      alert(\"Erreur lors de la mise à jour du produit dans le smart contrat.\");\n      return; // Si l'update échoue, on ne poursuit pas le paiement\n    }\n\n    let amountIn = 0;\n    try {\n      // Calculer le montant à envoyer en fonction de la devise sélectionnée\n      if (selectedCurrency === 'USD') {\n        amountIn = productPrice; // Pas de conversion nécessaire si en USD\n      } else if (selectedCurrency === 'BNB') {\n        // Si la devise est BNB, on effectue la conversion avec le taux BNB/USD\n        if (!bnbToUsdRate) {\n          alert(\"Le taux de conversion BNB vers USD est encore en cours de chargement.\");\n          return;\n        }\n        amountIn = productPrice / bnbToUsdRate;\n      }\n  \n      // Convertir le montant à un format acceptable (fixé à 18 décimales)\n      amountIn = parseFloat(amountIn).toFixed(18);\n      console.log('Montant final pour la transaction:', amountIn);\n  \n      // Envoyer la transaction\n      await sendTransaction(amountIn); // Attendre la réponse de la transaction\n    } catch (error) {\n      console.error(\"Erreur lors de l'envoi de la transaction:\", error.message);\n      alert(\"Une erreur s'est produite lors de l'envoi de la transaction. Vérifiez votre solde et les paramètres.\");\n    }\n  } else {\n    alert(\"Veuillez sélectionner un produit valide et essayer de nouveau.\");\n  }\n};\n\n  \n  \n  // Mise à jour des informations du produit sélectionné\n  const updateProductInfo = (selectedProductId) => {\n    setProductId(selectedProductId);\n    \n    // Récupérer les détails du produit depuis l'état \"productInfo\" (même si c'est depuis IPFS)\n    const productDetails = productInfo[selectedProductId];\n  \n    if (productDetails) {\n      const { price, exists } = productDetails;\n      setProductPrice(price);\n      setProductInfo({ price, exists });\n  \n      if (selectedCurrency === 'USD') {\n        setConvertedPrice(price ? price.toString() : null);\n      } else if (selectedCurrency === 'BNB') {\n        setConvertedPrice(price ? (price / bnbToUsdRate).toString() : null);\n      }\n    } else {\n      console.error(\"Produit non trouvé !\");\n    }\n  };\n\n  // Gestion du changement de devise (USD ou BNB)\n  const handleCurrencyChange = (event) => {\n    const newCurrency = event.target.value;\n    setSelectedCurrency(newCurrency);\n\n    if (newCurrency === 'USD') {\n      setConvertedPrice(productPrice ? productPrice.toString() : null);\n    } else if (newCurrency === 'BNB') {\n      setConvertedPrice(productPrice ? (productPrice / bnbToUsdRate).toString() : null);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      {/* Afficher un message de chargement si `loading` est true */}\n      {loading && <div>Chargement des produits...</div>}\n\n      {/* Contenu principal */}\n      <div className=\"parallax-container\">\n        <video id=\"video-background\" autoPlay loop muted>\n          {/* Remplace la source locale par l'URL IPFS */}\n          <source \n            src=\"https://gateway.pinata.cloud/ipfs/QmPZ8v3KzeyH2Dqz29TZFWe4kswkUETJyesZFCFULtagwv\" \n            type=\"video/mp4\" \n          />\n          Votre navigateur ne supporte pas les vidéos HTML5.\n        </video>\n\n        {/* Contenu défilant */}\n        <div className=\"content\">\n          \n\n          {/* Bouton de connexion du wallet en haut à droite */}\n          <div className=\"wallet-connect-button\">\n            <button\n      \n              onClick={connectWallet}\n              disabled={walletConnected} // Désactive le bouton une fois connecté\n            >\n              {walletConnected ? (\n                <>\n                  <span>Wallet connecté : {walletAddress}</span>\n                  <span className=\"arrow-icon\">→</span> {/* Icône flèche */}\n                </>\n              ) : (\n                'Connecter le wallet'\n              )}\n            </button>\n          </div>\n\n          {/* Conteneur du formulaire de paiement */}\n          <div className=\"payment-wrapper\">\n            <h1> Les Indicateurs à Levier </h1>\n\n            {productId && productInfo && (\n              <div>\n                <p>Produit choisi : {productId}</p>\n                <p>Prix du produit : {convertedPrice ? convertedPrice : 'Chargement...'} {selectedCurrency}</p>\n                <p>Le produit est {productInfo.exists ? 'disponible' : 'indisponible'}</p>\n              </div>\n            )}\n\n            <select onChange={(e) => updateProductInfo(e.target.value)} value={productId}>\n              <option value=\"\">Choisi Ton Indicateur</option>\n              <option value=\"product1\">Indicateur Daily</option>\n              <option value=\"product2\">Indicateur 4h/1h</option>\n              <option value=\"product3\">Indicateur 15mn</option>\n            </select>\n\n            <select onChange={handleCurrencyChange} value={selectedCurrency}>\n              <option value=\"USDT\">USD</option>\n              <option value=\"BNB\">BNB</option>\n            </select>\n\n            <button onClick={handlePayment}>Acheter</button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  \n  \n};\n\n\nexport default App;\n\n\n\n\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';  // Cette ligne doit être valide avec React 18\nimport App from './App';\nimport './index.css'; // Ajoute cette ligne dans ton fichier JavaScript\nimport './App.css'; \n\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n"],"sourceRoot":""}