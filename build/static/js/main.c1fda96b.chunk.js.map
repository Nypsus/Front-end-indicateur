{"version":3,"sources":["App.js","index.js"],"names":["ethers","providers","JsonRpcProvider","App","web3Modal","setWeb3Modal","useState","provider","setProvider","walletConnected","setWalletConnected","walletAddress","setWalletAddress","productInfo","setProductInfo","selectedProductId","setSelectedProductId","productId","setProductId","productPrice","setProductPrice","bnbToUsdRate","setBnbToUsdRate","selectedCurrency","setSelectedCurrency","convertedPrice","setConvertedPrice","contractInstance","setContractInstance","products","product1","price","exists","title","product2","product3","useEffect","modal","Web3Modal","cacheProvider","providerOptions","walletconnect","package","WalletConnectProvider","options","infuraId","metamask","trustwallet","interval","setInterval","web3ModalElement","document","querySelector","style","zIndex","clearInterval","hideIframe","iframe","display","connectWallet","async","console","log","instance","connect","newProvider","Web3Provider","error","signer","getSigner","address","getAddress","alert","clearCachedProvider","window","ethereum","request","method","params","eth_accounts","setTimeout","reconnectToMetaMask","retryError","getBNBToUSDTRate","response","axios","get","data","binancecoin","usd","contractAddress","contractABI","contract","Contract","productDetails","loadBlockchainData","loading","setLoading","transactionInProgress","setTransactionInProgress","errorMessage","setErrorMessage","_jsx","className","children","_jsxs","id","autoPlay","loop","muted","src","type","onClick","disabled","_Fragment","onChange","event","selectedId","target","value","toString","updateProductInfo","amountIn","utils","parseUnits","priceInUSDT","priceInBNB","product","bnbToUSDTRate","getProductPriceInBNB","tx","pay","constants","AddressZero","wait","status","payForProduct","message","color","ReactDOM","createRoot","getElementById","render","React","StrictMode"],"mappings":"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","file":"static/js/main.c1fda96b.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport Web3Modal from 'web3modal';\nimport { ethers } from 'ethers';\nimport axios from 'axios';\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport process from 'process';\nimport './App.css'; // Importation du fichier CSS\nimport './index.css'; // Ajoute cette ligne dans ton fichier JavaScript\n\n\n// Adresse du contrat USDT sur BSC (assure-toi que c'est l'adresse correcte pour le réseau que tu utilises)\nconst usdtAddress = '0x55d398326f99059fF775485246999027B3197955'; // Adresse du contrat USDT sur Binance Smart Chain\n\n// ABI pour le contrat USDT\nconst usdtABI = [\n  \"function balanceOf(address) view returns (uint256)\",\n  \"function allowance(address, address) view returns (uint256)\",\n  \"function approve(address spender, uint256 amount) public returns (bool)\",\n  \"function transferFrom(address sender, address recipient, uint256 amount) public returns (bool)\"\n];\n\n\n\n\nconst contractAddress = '0xCd25eee89Bb01603f0E0cf8D8C243966a926761d';\nconst bscTestnetRpcUrl = \"https://bsc-dataseed.binance.org/\"; // BSC Mainnet\nconst bscTestnetProvider = new ethers.providers.JsonRpcProvider(bscTestnetRpcUrl);\n\n\n\n\nfunction App() {\n  const [web3Modal, setWeb3Modal] = useState(null);\n  const [provider, setProvider] = useState(null);\n  const [walletConnected, setWalletConnected] = useState(false);\n  const [walletAddress, setWalletAddress] = useState('');\n\n  const [productInfo, setProductInfo] = useState(null);\n  const [selectedProductId, setSelectedProductId] = useState(null); // ou un ID de produit par défaut\n\n  const [productId, setProductId] = useState('');\n  const [productPrice, setProductPrice] = useState(null);\n  const [bnbToUsdRate, setBnbToUsdRate] = useState(null);\n  const [selectedCurrency, setSelectedCurrency] = useState('USD');\n  const [convertedPrice, setConvertedPrice] = useState(null);\n  const [contractInstance, setContractInstance] = useState(null); // Déclarez `contractInstance` ici\n  const products = {\n    product1: { price: 5, exists: true, title: \"Indicateur Daily\" },\n    product2: { price: 295, exists: true, title: \"Indicateur 4h/1h\" },\n    product3: { price: 495, exists: true, title: \"Indicateur 15mn\" }\n  };\n  \n\n\n\n\n\n\n  \n  // Initialisation de Web3Modal pour la connexion aux portefeuilles\n  useEffect(() => {\n  const modal = new Web3Modal({\n    cacheProvider: true, // Gardera en cache la dernière connexion\n    providerOptions: {\n      walletconnect: {\n        package: WalletConnectProvider, // Utilisation de WalletConnectProvider\n        options: {\n          infuraId: \"e759bc5af90042a1b66c5a01aae905af\" // Remplace avec ton propre infura ID\n        }\n      },\n      metamask: {\n        package: null, // MetaMask ne nécessite pas de package\n        \n      },\n      trustwallet: {\n        package: WalletConnectProvider, // Utilisation de WalletConnectProvider pour Trust Wallet\n        options: {\n          infuraId: \"pDtEhrK4AAiPfirK7qsQI25NJlgrtMu1bBcFDqV4J95GTCAR2d/8Lg\" // Remplace avec ton propre infura ID\n        }\n      },\n      \n      // Ajoute d'autres options de portefeuille ici si nécessaire (par exemple : Fortmatic, etc.)\n    }\n  });\n\n  setWeb3Modal(modal);\n\n  // Vérifie si la modale est présente dans le DOM\n  const interval = setInterval(() => {\n    const web3ModalElement = document.querySelector('.web3-modal-container');\n    if (web3ModalElement) {\n      web3ModalElement.style.zIndex = '999999'; // Modale au-dessus de tout\n      clearInterval(interval);\n    }\n  }, 100);\n\n  return () => clearInterval(interval);\n\n}, []);\n\n  \n\n\n  // Masquer l'iframe si elle est présente\n  const hideIframe = () => {\n    const iframe = document.querySelector('iframe');\n    if (iframe) {\n      iframe.style.display = 'none'; // ou iframe.remove() si tu préfères\n    }\n  };\n\n  // Appel de la fonction pour masquer l'iframe au moment où Web3Modal est chargé\n  hideIframe();\n  \n\n  // Fonction pour reconnecter MetaMask\n  const reconnectToMetaMask = async () => {\n    if (typeof window.ethereum === \"undefined\") {\n      alert(\"MetaMask n'est pas installé !\");\n      return;\n    }\n\n    try {\n      \n      await window.ethereum.request({\n        method: 'wallet_requestPermissions',\n        params: [{\n          eth_accounts: {}\n        }]\n      });\n\n      setTimeout(async () => {\n        const accounts = await window.ethereum.request({\n          method: 'eth_requestAccounts',\n        });\n\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n        const address = await signer.getAddress();\n\n        setWalletAddress(address);\n        setWalletConnected(true);\n        alert(`Compte connecté : ${address}`);\n      }, 1000);\n    } catch (error) {\n      console.error('Erreur de connexion à MetaMask :', error);\n      alert('Échec de la connexion à MetaMask.');\n    }\n  };\n\n\n  // Connexion au wallet via Web3Modal\n  const connectWallet = async () => {\n    if (!web3Modal) {\n      console.error(\"Web3Modal non initialisé\");\n      return;\n    }\n    \n    try {\n      console.log(\"Tentative de connexion au wallet...\");\n      \n      \n      // Connexion via Web3Modal\n      const instance = await web3Modal.connect();\n      const newProvider = new ethers.providers.Web3Provider(instance);\n      \n      // S'assurer que le provider est correctement défini\n      if (!newProvider) {\n        console.error(\"Le fournisseur Web3 n'a pas été correctement créé\");\n        return;\n      }\n      \n      setProvider(newProvider);\n  \n      // Récupérer l'adresse du wallet\n      const signer = newProvider.getSigner();\n      const address = await signer.getAddress();\n      \n      setWalletAddress(address);\n      setWalletConnected(true);\n      \n      console.log(`Wallet connecté: ${address}`);\n    } catch (error) {\n      console.error(\"Erreur lors de la connexion au portefeuille:\", error);\n      alert(\"Erreur de connexion au portefeuille. Veuillez connecter votre wallet.\");\n      // Ferme Web3Modal\n      web3Modal.clearCachedProvider();\n\n      // Relance le processus de reconnexion via MetaMask\n      try {\n        if (typeof window.ethereum !== \"undefined\") {\n          await reconnectToMetaMask();\n        } else {\n          alert(\"MetaMask n'est pas installé.\");\n        }\n      } catch (retryError) {\n        console.error(\"Échec de la reconnexion à MetaMask\", retryError);\n        alert(\"La reconnexion à MetaMask a échoué.\");\n      }\n    }\n  };\n  \n\n  // Récupération du taux de conversion BNB vers USD\n  const getBNBToUSDTRate = async () => {\n    try {\n      const response = await axios.get('https://api.coingecko.com/api/v3/simple/price?ids=binancecoin&vs_currencies=usd');\n      setBnbToUsdRate(response.data.binancecoin.usd);\n    } catch (error) {\n      console.error('Erreur lors de la récupération du taux BNB -> USD', error);\n    }\n  };\n\n   // Charger les données du contrat et les informations du produit\nuseEffect(() => {\n  const loadBlockchainData = async () => {\n    if (provider) {\n      // Adresse du contrat et ABI\n      const contractAddress = '0xCd25eee89Bb01603f0E0cf8D8C243966a926761d';\n      const contractABI = [\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"token\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"addAllowedToken\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"token\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"amount\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"string\",\n        \"name\": \"productId\",\n        \"type\": \"string\"\n      }\n    ],\n    \"name\": \"pay\",\n    \"outputs\": [],\n    \"stateMutability\": \"payable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"token\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"removeAllowedToken\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address[]\",\n        \"name\": \"tokens\",\n        \"type\": \"address[]\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"constructor\"\n  },\n  {\n    \"anonymous\": false,\n    \"inputs\": [\n      {\n        \"indexed\": true,\n        \"internalType\": \"address\",\n        \"name\": \"user\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": false,\n        \"internalType\": \"uint256\",\n        \"name\": \"amount\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"indexed\": false,\n        \"internalType\": \"address\",\n        \"name\": \"token\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": false,\n        \"internalType\": \"string\",\n        \"name\": \"productId\",\n        \"type\": \"string\"\n      }\n    ],\n    \"name\": \"PaymentReceived\",\n    \"type\": \"event\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"string\",\n        \"name\": \"productId\",\n        \"type\": \"string\"\n      }\n    ],\n    \"name\": \"removeProduct\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"string\",\n        \"name\": \"productId\",\n        \"type\": \"string\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"price\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"setProductPrice\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"amount\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"withdraw\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"token\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"amount\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"withdrawToken\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"allowedTokens\",\n    \"outputs\": [\n      {\n        \"internalType\": \"bool\",\n        \"name\": \"\",\n        \"type\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"token\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"isTokenAllowed\",\n    \"outputs\": [\n      {\n        \"internalType\": \"bool\",\n        \"name\": \"\",\n        \"type\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"owner\",\n    \"outputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"\",\n        \"type\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"string\",\n        \"name\": \"\",\n        \"type\": \"string\"\n      }\n    ],\n    \"name\": \"products\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"price\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"bool\",\n        \"name\": \"exists\",\n        \"type\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n\n    \n  }\n];\n\n\n\n\n        // Crée une nouvelle instance du contrat avec le provider\n      const contract = new ethers.Contract(contractAddress, contractABI, provider.getSigner());\n\n      // Appel direct à la méthode du contrat, sans attendre que contractInstance soit mis à jour\n      try {\n        const productDetails = await contract.products(\"product1\");\n        setProductInfo(productDetails);\n        setProductPrice(productDetails.price);\n      } catch (error) {\n        console.error(\"Erreur lors de la récupération des informations du produit:\", error);\n      }\n      \n      // Stocke cette instance dans l'état\n      setContractInstance(contract);\n    }\n  };\n\n  loadBlockchainData();\n  getBNBToUSDTRate();\n}, [provider]);  // Dépendance sur 'provider' uniquement, pas besoin de contractInstance ici\n\n\n\n  \n  \n  \n  \n  \n\n\n\n\n  const [loading, setLoading] = useState(false); // Ajout de l'état loading\n  const [transactionInProgress, setTransactionInProgress] = useState(false);\n\n  \n  \n  // Fonction pour approuver USDT\n  const approveUSDT = async (amountToSend) => {\n    const signer = new ethers.providers.Web3Provider(window.ethereum).getSigner();\n    const usdtContract = new ethers.Contract(usdtAddress, usdtABI, signer);\n    \n    try {\n      const allowance = await usdtContract.allowance(await signer.getAddress(), contractAddress);\n      console.log(\"Allowance actuelle:\", allowance.toString());\n  \n      if (allowance.lt(amountToSend)) {\n        console.log(\"Allowance insuffisante, approbation en cours...\");\n        const tx = await usdtContract.approve(contractAddress, amountToSend);\n        const receipt = await tx.wait();\n  \n        if (receipt.status === 1) {\n          console.log(\"Allowance mise à jour !\");\n        } else {\n          console.error(\"L'approbation de l'allowance a échoué.\");\n          throw new Error(\"Échec de l'approbation de l'allowance.\");\n        }\n      } else {\n        console.log(\"Allowance suffisante.\");\n      }\n    } catch (error) {\n      console.error(\"Erreur lors de l'approbation de l'allowance USDT :\", error);\n    }\n  };\n  \n  \n  \n \n  const [errorMessage, setErrorMessage] = useState('');\n  \n  \n  \n  \n  // Fonction pour le paiement\n  const handlePayment = async () => {\n    if (!walletConnected) {\n      alert(\"Veuillez connecter votre wallet avant de procéder.\");\n      return;\n    }\n  \n    if (productId && productPrice) {\n      let amountIn = 0;\n  \n      try {\n        // Calculer le montant à envoyer en BNB (prix en USDT, conversion via API ou taux fixe)\n        if (selectedCurrency === 'USD') {\n          // Convertir le prix en USDT vers BNB via le taux de conversion\n          if (!bnbToUsdRate) {\n            alert(\"Le taux de conversion BNB vers USD est en cours de chargement.\");\n            return;\n          }\n          amountIn = productPrice / bnbToUsdRate;  // Convertir le prix de USDT à BNB\n        } else {\n          alert(\"Seul le paiement en BNB est autorisé.\");\n          return;\n        }\n  \n        // Convertir en format compatible Ethereum (wei)\n        amountIn = ethers.utils.parseUnits(amountIn.toString(), 18); // Utiliser 18 pour BNB\n        console.log('Montant pour la transaction:', amountIn);\n  \n        // Effectuer le paiement directement en BNB\n        console.log(\"Paiement prêt à être effectué.\");\n        await payForProduct(amountIn);\n  \n        console.log(\"Transaction envoyée.\");\n      } catch (error) {\n        console.error(\"Erreur lors du calcul du montant:\", error.message);\n        setErrorMessage(\"Une erreur s'est produite. Veuillez vérifier vos paramètres.\");\n        alert(\"Une erreur s'est produite. Veuillez vérifier vos paramètres.\");\n      }\n    } else {\n      alert(\"Veuillez sélectionner un produit valide.\");\n    }\n  };\n  \n  \n\n  // Vérification de l'allowance\n  const checkAllowance = async (amount) => {\n    const tokenContract = new ethers.Contract(usdtAddress, usdtABI, provider.getSigner());\n    const allowance = await tokenContract.allowance(walletAddress, contractInstance.address);\n    \n    if (allowance.lt(amount)) {\n      console.log(\"Allowance insuffisante, demande d'approbation...\");\n      await approveUSDT(amount);  // Approuve le montant si l'allowance est insuffisante\n    } else {\n      console.log(\"Allowance suffisante\");\n      // Proceed with the payment if allowance is sufficient\n    }\n  };\n  \n  \n  // Mise à jour des informations du produit\n\n  const updateProductInfo = (selectedProductId) => {\n    setProductId(selectedProductId);\n    const productDetails = products[selectedProductId];  // Recherche du produit dans l'objet 'products'\n    \n    if (productDetails) {\n      const { price, exists } = productDetails;\n      setProductPrice(price);\n      setProductInfo({ price, exists });\n  \n      // Calculer et afficher le prix en BNB (même si l'utilisateur voit le prix en USDT pour info)\n      if (selectedCurrency === 'USD' && bnbToUsdRate) {\n        const convertedPrice = price / bnbToUsdRate;\n        setConvertedPrice(convertedPrice.toString());\n      }\n    } else {\n      console.error(\"Produit non trouvé !\");\n      alert(\"Produit inexistant !\");\n      setProductInfo({ exists: false });\n      setProductPrice(null);\n      setConvertedPrice(null);\n    }\n  };\n  \n  \n\n  async function getProductPriceInBNB(productId) {\n    // Récupérer le prix en USDT du smart contract\n    const product = await contractInstance.products(productId);\n    if (!product.exists) {\n        alert(\"Produit inexistant\");\n        return;\n    }\n\n    const priceInUSDT = product.price;\n\n    // Conversion du prix en USDT en BNB (à l'aide d'un oracle ou d'un service externe)\n    const bnbToUSDTRate = await getBNBToUSDTRate(); // Récupérer le taux de conversion\n\n    const priceInBNB = priceInUSDT / bnbToUSDTRate;\n\n    console.log(\"Prix en USDT:\", priceInUSDT);\n    console.log(\"Prix en BNB:\", priceInBNB);\n    \n    return { priceInUSDT, priceInBNB };\n}\n\n\n  \n\n\n\n // Fonction pour initier le paiement en BNB\nasync function payForProduct(productId) {\n    const { priceInUSDT, priceInBNB } = await getProductPriceInBNB(productId);\n\n    // Afficher le prix en BNB et USDT à l'utilisateur\n    alert(`Prix du produit : ${priceInUSDT} USDT (équivalent à ${priceInBNB} BNB)`);\n\n    // L'utilisateur envoie les BNB, mais on passe le montant en USDT au smart contract\n    const tx = await contractInstance.pay(\n        ethers.constants.AddressZero, // Adresse 0 pour le paiement en BNB\n        ethers.utils.parseUnits(priceInBNB.toString(), 'ether'), // Montant en BNB\n        productId,  // ID du produit\n        {\n            value: ethers.utils.parseUnits(priceInBNB.toString(), 'ether'), // Montant à payer en BNB\n        }\n    );\n\n    const receipt = await tx.wait();\n    if (receipt.status === 1) {\n        alert(\"Achat réussi !\");\n    } else {\n        alert(\"Échec de la transaction.\");\n    }\n}\n  \n  \n\n\nconst handleProductSelection = (event) => {\n    const selectedId = event.target.value;\n    setSelectedProductId(selectedId);  // Met à jour l'ID du produit sélectionné\n    updateProductInfo(selectedId);     // Met à jour les infos du produit en fonction de l'ID\n  };\n  \n  \n  \n  return (\n    <div className=\"App\">\n      {/* Conteneur de parallax */}\n      <div className=\"parallax-container\">\n        <video id=\"video-background\" autoPlay loop muted>\n          {/* Remplace la source locale par l'URL IPFS */}\n          <source \n            src=\"https://gateway.pinata.cloud/ipfs/QmPZ8v3KzeyH2Dqz29TZFWe4kswkUETJyesZFCFULtagwv\" \n            type=\"video/mp4\" \n          />\n          Votre navigateur ne supporte pas les vidéos HTML5.\n        </video>\n  \n        {/* Contenu défilant */}\n        <div className=\"content\">\n          {/* Bouton de connexion du wallet en haut à droite */}\n          <div className=\"wallet-connect-button\">\n            <button\n              onClick={connectWallet}\n              disabled={walletConnected} // Désactive le bouton une fois connecté\n            >\n              {walletConnected ? (\n                <>\n                  <span>Wallet connecté : {walletAddress}</span>\n                  <span className=\"arrow-icon\">→</span> {/* Icône flèche */}\n                </>\n              ) : (\n                'Connecter le wallet'\n              )}\n            </button>\n          </div>\n  \n          {/* Conteneur du formulaire de paiement */}\n          <div className=\"payment-wrapper\">\n            <h1>Les Indicateurs à Levier</h1>\n  \n            <button onClick={connectWallet}>\n              {walletConnected ? `Wallet connecté : ${walletAddress}` : 'Connecter le wallet'}\n            </button>\n  \n            {productId && productInfo && (\n              <div>\n                <p>Produit choisi : {productId}</p>\n                <p>Prix du produit en USDT : {productPrice} USDT</p>\n                <p>Prix du produit équivalent en BNB : {convertedPrice ? convertedPrice : 'Chargement...'} BNB</p>\n                <p>Le produit est {productInfo.exists ? 'disponible' : 'indisponible'}</p>\n              </div>\n            )}\n  \n            <select onChange={handleProductSelection} value={selectedProductId}>\n              <option value=\"\">Sélectionnez un produit</option>\n              <option value=\"product1\">Produit 1</option>\n              <option value=\"product2\">Produit 2</option>\n              <option value=\"product3\">Produit 3</option>\n            </select>\n  \n            <button onClick={handlePayment}>Payer pour le produit en BNB</button>\n  \n            {errorMessage && <p style={{ color: 'red' }}>{errorMessage}</p>}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n  \n  };\n  \n  export default App;\n  ","import React from 'react';\nimport ReactDOM from 'react-dom/client';  // Cette ligne doit être valide avec React 18\nimport App from './App';\nimport './index.css'; // Ajoute cette ligne dans ton fichier JavaScript\nimport './App.css'; \n\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n"],"sourceRoot":""}