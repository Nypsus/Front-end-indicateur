[{"/home/nypsus/mon-projet-deploiement/Front-end-indicateur/src/index.js":"1","/home/nypsus/mon-projet-deploiement/Front-end-indicateur/src/App.js":"2"},{"size":374,"mtime":1743798152135,"results":"3","hashOfConfig":"4"},{"size":22567,"mtime":1743799829222,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1o49djn",{"filePath":"8","messages":"9","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"/home/nypsus/mon-projet-deploiement/Front-end-indicateur/src/index.js",[],"/home/nypsus/mon-projet-deploiement/Front-end-indicateur/src/App.js",["11","12","13"],"import React, { useEffect, useState, useRef } from 'react';\r\nimport Web3Modal from 'web3modal';\r\nimport { ethers } from 'ethers';\r\nimport axios from 'axios';\r\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\r\nimport process from 'process';\r\nimport './App.css'; // Importation du fichier CSS\r\nimport './index.css'; // Ajoute cette ligne dans ton fichier JavaScript\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst contractAddress = '0xCd25eee89Bb01603f0E0cf8D8C243966a926761d';\r\nconst bscTestnetRpcUrl = \"https://bsc-dataseed.binance.org/\"; // BSC Mainnet\r\nconst bscTestnetProvider = new ethers.providers.JsonRpcProvider(bscTestnetRpcUrl);\r\n\r\n\r\n\r\n\r\nfunction App() {\r\n  const [web3Modal, setWeb3Modal] = useState(null);\r\n  const [provider, setProvider] = useState(null);\r\n  const [walletConnected, setWalletConnected] = useState(false);\r\n  const [walletAddress, setWalletAddress] = useState('');\r\n\r\n  const [productInfo, setProductInfo] = useState(null);\r\n  const [productId, setProductId] = useState('');\r\n  const [productPrice, setProductPrice] = useState(null);\r\n  const [bnbToUsdRate, setBnbToUsdRate] = useState(null);\r\n  const [selectedCurrency, setSelectedCurrency] = useState('USD');\r\n  const [convertedPrice, setConvertedPrice] = useState(null);\r\n\r\n\r\n\r\n\r\n\r\n\r\n  \r\n  // Initialisation de Web3Modal pour la connexion aux portefeuilles\r\n  useEffect(() => {\r\n  const modal = new Web3Modal({\r\n    cacheProvider: true, // Gardera en cache la dernière connexion\r\n    providerOptions: {\r\n      walletconnect: {\r\n        package: WalletConnectProvider, // Utilisation de WalletConnectProvider\r\n        options: {\r\n          infuraId: \"e759bc5af90042a1b66c5a01aae905af\" // Remplace avec ton propre infura ID\r\n        }\r\n      },\r\n      metamask: {\r\n        package: null, // MetaMask ne nécessite pas de package\r\n        \r\n      },\r\n      trustwallet: {\r\n        package: WalletConnectProvider, // Utilisation de WalletConnectProvider pour Trust Wallet\r\n        options: {\r\n          infuraId: \"pDtEhrK4AAiPfirK7qsQI25NJlgrtMu1bBcFDqV4J95GTCAR2d/8Lg\" // Remplace avec ton propre infura ID\r\n        }\r\n      },\r\n      \r\n      // Ajoute d'autres options de portefeuille ici si nécessaire (par exemple : Fortmatic, etc.)\r\n    }\r\n  });\r\n\r\n  setWeb3Modal(modal);\r\n\r\n  // Vérifie si la modale est présente dans le DOM\r\n  const interval = setInterval(() => {\r\n    const web3ModalElement = document.querySelector('.web3-modal-container');\r\n    if (web3ModalElement) {\r\n      web3ModalElement.style.zIndex = '999999'; // Modale au-dessus de tout\r\n      clearInterval(interval);\r\n    }\r\n  }, 100);\r\n\r\n  return () => clearInterval(interval);\r\n\r\n}, []);\r\n\r\n  \r\n\r\n\r\n  // Masquer l'iframe si elle est présente\r\n  const hideIframe = () => {\r\n    const iframe = document.querySelector('iframe');\r\n    if (iframe) {\r\n      iframe.style.display = 'none'; // ou iframe.remove() si tu préfères\r\n    }\r\n  };\r\n\r\n  // Appel de la fonction pour masquer l'iframe au moment où Web3Modal est chargé\r\n  hideIframe();\r\n  \r\n\r\n  // Fonction pour reconnecter MetaMask\r\n  const reconnectToMetaMask = async () => {\r\n    if (typeof window.ethereum === \"undefined\") {\r\n      alert(\"MetaMask n'est pas installé !\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      \r\n      await window.ethereum.request({\r\n        method: 'wallet_requestPermissions',\r\n        params: [{\r\n          eth_accounts: {}\r\n        }]\r\n      });\r\n\r\n      setTimeout(async () => {\r\n        const accounts = await window.ethereum.request({\r\n          method: 'eth_requestAccounts',\r\n        });\r\n\r\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n        const signer = provider.getSigner();\r\n        const address = await signer.getAddress();\r\n\r\n        setWalletAddress(address);\r\n        setWalletConnected(true);\r\n        alert(`Compte connecté : ${address}`);\r\n      }, 1000);\r\n    } catch (error) {\r\n      console.error('Erreur de connexion à MetaMask :', error);\r\n      alert('Échec de la connexion à MetaMask.');\r\n    }\r\n  };\r\n\r\n\r\n  // Connexion au wallet via Web3Modal\r\n  const connectWallet = async () => {\r\n    if (!web3Modal) {\r\n      console.error(\"Web3Modal non initialisé\");\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      console.log(\"Tentative de connexion au wallet...\");\r\n      \r\n      \r\n      // Connexion via Web3Modal\r\n      const instance = await web3Modal.connect();\r\n      const newProvider = new ethers.providers.Web3Provider(instance);\r\n      \r\n      // S'assurer que le provider est correctement défini\r\n      if (!newProvider) {\r\n        console.error(\"Le fournisseur Web3 n'a pas été correctement créé\");\r\n        return;\r\n      }\r\n      \r\n      setProvider(newProvider);\r\n  \r\n      // Récupérer l'adresse du wallet\r\n      const signer = newProvider.getSigner();\r\n      const address = await signer.getAddress();\r\n      \r\n      setWalletAddress(address);\r\n      setWalletConnected(true);\r\n      \r\n      console.log(`Wallet connecté: ${address}`);\r\n    } catch (error) {\r\n      console.error(\"Erreur lors de la connexion au portefeuille:\", error);\r\n      alert(\"Erreur de connexion au portefeuille. Veuillez connecter votre wallet.\");\r\n      // Ferme Web3Modal\r\n      web3Modal.clearCachedProvider();\r\n\r\n      // Relance le processus de reconnexion via MetaMask\r\n      try {\r\n        if (typeof window.ethereum !== \"undefined\") {\r\n          await reconnectToMetaMask();\r\n        } else {\r\n          alert(\"MetaMask n'est pas installé.\");\r\n        }\r\n      } catch (retryError) {\r\n        console.error(\"Échec de la reconnexion à MetaMask\", retryError);\r\n        alert(\"La reconnexion à MetaMask a échoué.\");\r\n      }\r\n    }\r\n  };\r\n  \r\n\r\n  // Récupération du taux de conversion BNB vers USD\r\n  const fetchBnbToUsdRate = async () => {\r\n    try {\r\n      const response = await axios.get('https://api.coingecko.com/api/v3/simple/price?ids=binancecoin&vs_currencies=usd');\r\n      setBnbToUsdRate(response.data.binancecoin.usd);\r\n    } catch (error) {\r\n      console.error('Erreur lors de la récupération du taux BNB -> USD', error);\r\n    }\r\n  };\r\n\r\n   // Charger les données du contrat et les informations du produit\r\n   useEffect(() => {\r\n    const loadBlockchainData = async () => {\r\n      if (provider) {\r\n        const contractAddress = '0xD62B5CFdDfd26F6219E4BF366d9DB6B1450D5905';\r\n        const contractABI = \r\n[\r\n    {\r\n        \"inputs\": [\r\n            {\r\n                \"internalType\": \"address\",\r\n                \"name\": \"token\",\r\n                \"type\": \"address\"\r\n            }\r\n        ],\r\n        \"name\": \"addAllowedToken\",\r\n        \"outputs\": [],\r\n        \"stateMutability\": \"nonpayable\",\r\n        \"type\": \"function\"\r\n    },\r\n    {\r\n        \"inputs\": [\r\n            {\r\n                \"internalType\": \"address\",\r\n                \"name\": \"token\",\r\n                \"type\": \"address\"\r\n            },\r\n            {\r\n                \"internalType\": \"uint256\",\r\n                \"name\": \"amount\",\r\n                \"type\": \"uint256\"\r\n            },\r\n            {\r\n                \"internalType\": \"string\",\r\n                \"name\": \"productId\",\r\n                \"type\": \"string\"\r\n            }\r\n        ],\r\n        \"name\": \"pay\",\r\n        \"outputs\": [],\r\n        \"stateMutability\": \"payable\",\r\n        \"type\": \"function\"\r\n    },\r\n    {\r\n        \"inputs\": [\r\n            {\r\n                \"internalType\": \"address\",\r\n                \"name\": \"token\",\r\n                \"type\": \"address\"\r\n            }\r\n        ],\r\n        \"name\": \"removeAllowedToken\",\r\n        \"outputs\": [],\r\n        \"stateMutability\": \"nonpayable\",\r\n        \"type\": \"function\"\r\n    },\r\n    {\r\n        \"inputs\": [\r\n            {\r\n                \"internalType\": \"address[]\",\r\n                \"name\": \"tokens\",\r\n                \"type\": \"address[]\"\r\n            }\r\n        ],\r\n        \"stateMutability\": \"nonpayable\",\r\n        \"type\": \"constructor\"\r\n    },\r\n    {\r\n        \"anonymous\": false,\r\n        \"inputs\": [\r\n            {\r\n                \"indexed\": true,\r\n                \"internalType\": \"address\",\r\n                \"name\": \"user\",\r\n                \"type\": \"address\"\r\n            },\r\n            {\r\n                \"indexed\": false,\r\n                \"internalType\": \"uint256\",\r\n                \"name\": \"amount\",\r\n                \"type\": \"uint256\"\r\n            },\r\n            {\r\n                \"indexed\": false,\r\n                \"internalType\": \"address\",\r\n                \"name\": \"token\",\r\n                \"type\": \"address\"\r\n            },\r\n            {\r\n                \"indexed\": false,\r\n                \"internalType\": \"string\",\r\n                \"name\": \"productId\",\r\n                \"type\": \"string\"\r\n            }\r\n        ],\r\n        \"name\": \"PaymentReceived\",\r\n        \"type\": \"event\"\r\n    },\r\n    {\r\n        \"inputs\": [\r\n            {\r\n                \"internalType\": \"string\",\r\n                \"name\": \"productId\",\r\n                \"type\": \"string\"\r\n            }\r\n        ],\r\n        \"name\": \"removeProduct\",\r\n        \"outputs\": [],\r\n        \"stateMutability\": \"nonpayable\",\r\n        \"type\": \"function\"\r\n    },\r\n    {\r\n        \"inputs\": [\r\n            {\r\n                \"internalType\": \"string\",\r\n                \"name\": \"productId\",\r\n                \"type\": \"string\"\r\n            },\r\n            {\r\n                \"internalType\": \"uint256\",\r\n                \"name\": \"price\",\r\n                \"type\": \"uint256\"\r\n            }\r\n        ],\r\n        \"name\": \"setProductPrice\",\r\n        \"outputs\": [],\r\n        \"stateMutability\": \"nonpayable\",\r\n        \"type\": \"function\"\r\n    },\r\n    {\r\n        \"inputs\": [\r\n            {\r\n                \"internalType\": \"uint256\",\r\n                \"name\": \"amount\",\r\n                \"type\": \"uint256\"\r\n            }\r\n        ],\r\n        \"name\": \"withdraw\",\r\n        \"outputs\": [],\r\n        \"stateMutability\": \"nonpayable\",\r\n        \"type\": \"function\"\r\n    },\r\n    {\r\n        \"inputs\": [\r\n            {\r\n                \"internalType\": \"address\",\r\n                \"name\": \"token\",\r\n                \"type\": \"address\"\r\n            },\r\n            {\r\n                \"internalType\": \"uint256\",\r\n                \"name\": \"amount\",\r\n                \"type\": \"uint256\"\r\n            }\r\n        ],\r\n        \"name\": \"withdrawToken\",\r\n        \"outputs\": [],\r\n        \"stateMutability\": \"nonpayable\",\r\n        \"type\": \"function\"\r\n    },\r\n    {\r\n        \"inputs\": [\r\n            {\r\n                \"internalType\": \"address\",\r\n                \"name\": \"\",\r\n                \"type\": \"address\"\r\n            }\r\n        ],\r\n        \"name\": \"allowedTokens\",\r\n        \"outputs\": [\r\n            {\r\n                \"internalType\": \"bool\",\r\n                \"name\": \"\",\r\n                \"type\": \"bool\"\r\n            }\r\n        ],\r\n        \"stateMutability\": \"view\",\r\n        \"type\": \"function\"\r\n    },\r\n    {\r\n        \"inputs\": [\r\n            {\r\n                \"internalType\": \"address\",\r\n                \"name\": \"token\",\r\n                \"type\": \"address\"\r\n            }\r\n        ],\r\n        \"name\": \"isTokenAllowed\",\r\n        \"outputs\": [\r\n            {\r\n                \"internalType\": \"bool\",\r\n                \"name\": \"\",\r\n                \"type\": \"bool\"\r\n            }\r\n        ],\r\n        \"stateMutability\": \"view\",\r\n        \"type\": \"function\"\r\n    },\r\n    {\r\n        \"inputs\": [],\r\n        \"name\": \"owner\",\r\n        \"outputs\": [\r\n            {\r\n                \"internalType\": \"address\",\r\n                \"name\": \"\",\r\n                \"type\": \"address\"\r\n            }\r\n        ],\r\n        \"stateMutability\": \"view\",\r\n        \"type\": \"function\"\r\n    },\r\n    {\r\n        \"inputs\": [\r\n            {\r\n                \"internalType\": \"string\",\r\n                \"name\": \"\",\r\n                \"type\": \"string\"\r\n            }\r\n        ],\r\n        \"name\": \"products\",\r\n        \"outputs\": [\r\n            {\r\n                \"internalType\": \"uint256\",\r\n                \"name\": \"price\",\r\n                \"type\": \"uint256\"\r\n            },\r\n            {\r\n                \"internalType\": \"bool\",\r\n                \"name\": \"exists\",\r\n                \"type\": \"bool\"\r\n            }\r\n        ],\r\n        \"stateMutability\": \"view\",\r\n        \"type\": \"function\"\r\n    }\r\n];\r\n\r\n\r\n\r\n\r\n        const contractInstance = new ethers.Contract(contractAddress, contractABI, provider.getSigner());\r\n        \r\n        try {\r\n          const productDetails = await contractInstance.products(\"product1\");\r\n          setProductInfo(productDetails);\r\n          setProductPrice(productDetails.price);\r\n        } catch (error) {\r\n          console.error(\"Erreur lors de la récupération des informations du produit:\", error);\r\n        }\r\n      }\r\n    };\r\n\r\n    loadBlockchainData();\r\n    fetchBnbToUsdRate();\r\n  }, [provider]);\r\n\r\n\r\n\r\n  \r\n\r\n  const sendTransaction = async (amountIn) => {\r\n    if (!provider) {\r\n      alert(\"Le provider n'est pas défini, veuillez connecter votre wallet.\");\r\n      return;\r\n    }\r\n  \r\n    try {\r\n      // Utilise le provider et signer déjà définis via Web3Modal\r\n      const signer = provider.getSigner();\r\n      const amountInEther = ethers.utils.parseUnits(amountIn.toString(), 18);\r\n  \r\n      // Obtenez le prix du gaz actuel\r\n      const gasPrice = await provider.getGasPrice();\r\n      const adjustedGasPrice = gasPrice.mul(2); // Augmenter le prix du gaz pour garantir l'exécution\r\n  \r\n      // Vérifiez que vous avez assez de fonds\r\n      const walletBalance = await provider.getBalance(signer.getAddress());\r\n      if (walletBalance.lt(amountInEther.add(adjustedGasPrice))) {\r\n        alert(\"Solde insuffisant pour couvrir la transaction et les frais de gaz.\");\r\n        return;\r\n      }\r\n  \r\n      // Préparez la transaction\r\n      const tx = {\r\n        to: contractAddress,\r\n        value: amountInEther,\r\n        gasLimit: 100000, // Limite de gaz pour l'interaction avec un contrat\r\n        gasPrice: adjustedGasPrice // Utilisez le prix ajusté du gaz\r\n      };\r\n  \r\n      // Envoyer la transaction\r\n      const transactionResponse = await signer.sendTransaction(tx);\r\n      console.log(\"Transaction envoyée, hash:\", transactionResponse.hash);\r\n  \r\n      // Attendez la confirmation de la transaction\r\n      const receipt = await transactionResponse.wait();\r\n      console.log(\"Transaction confirmée dans le bloc:\", receipt.blockNumber);\r\n\r\n      // Rediriger vers une nouvelle page après la transaction réussie\r\n      window.location.href = '/Delivrance_IndicateurD.html';  // Remplace '/confirmation.html' par le chemin de la page HTML\r\n\r\n  \r\n    } catch (error) {\r\n      console.error(\"Erreur lors de l'envoi de la transaction:\", error);\r\n      alert(\"Une erreur s'est produite lors de l'envoi de la transaction.\");\r\n    }\r\n  };\r\n\r\n\r\n  const checkNetwork = async () => {\r\n    if (typeof window.ethereum !== \"undefined\") {\r\n      const network = await window.ethereum.request({\r\n        method: 'eth_chainId'\r\n      });\r\n  \r\n      // Vérifie si l'utilisateur est bien sur BSC Testnet (chainId 97)\r\n      if (network !== '0x38') { // 0x38 est le chainId pour BSC Mainnet\r\n        alert(\"Veuillez vous connecter au réseau Binance Smart Chain Mainnet.\");\r\n        return false;\r\n      }\r\n      \r\n      return true;\r\n    } else {\r\n      console.error(\"Ethereum n'est pas disponible.\");\r\n      alert(\"MetaMask ou un autre portefeuille Ethereum n'est pas installé.\");\r\n      return false;\r\n    }\r\n  };\r\n\r\n\r\n\r\n\r\n\r\n\r\n  // Fonction pour réinitialiser le provider\r\n  const resetProvider = async () => {\r\n    try {\r\n      if (typeof window.ethereum !== \"undefined\") {\r\n        const newProvider = new ethers.providers.Web3Provider(window.ethereum);\r\n        setProvider(newProvider); // Mettre à jour le provider\r\n\r\n        // Attendre que React ait bien mis à jour le provider\r\n        return newProvider.getSigner(); // Retourner le signer après que le provider ait été mis à jour\r\n      } else {\r\n        throw new Error(\"Aucun fournisseur Ethereum n'est disponible.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Erreur dans resetProvider:\", error);\r\n      alert(\"Erreur lors de la réinitialisation du provider.\");\r\n      return null;\r\n    }\r\n  };\r\n\r\n  // Vérification du réseau à chaque fois qu'il change\r\n  useEffect(() => {\r\n    const changeNetworkHandler = async () => {\r\n      try {\r\n        await resetProvider(); // Remet à jour le provider lorsque le réseau change\r\n        console.log(\"Le provider a été réinitialisé après le changement de réseau.\");\r\n      } catch (error) {\r\n        console.error(\"Erreur lors du changement de réseau et réinitialisation du provider:\", error);\r\n      }\r\n    };\r\n\r\n    if (typeof window.ethereum !== \"undefined\") {\r\n      window.ethereum.on('chainChanged', changeNetworkHandler);\r\n    }\r\n\r\n    // Nettoyage quand le composant est démonté\r\n    return () => {\r\n      if (typeof window.ethereum !== \"undefined\") {\r\n        window.ethereum.removeListener('chainChanged', changeNetworkHandler);\r\n      }\r\n    };\r\n  }, []);\r\n  \r\n  \r\n\r\n\r\n  // Fonction de gestion du paiement\r\n  const handlePayment = async () => {\r\n    if (!walletConnected) {\r\n      alert(\"Veuillez connecter votre wallet avant de procéder.\");\r\n      return;\r\n    }\r\n\r\n    // Vérifie que l'utilisateur est sur le bon réseau\r\n  const isCorrectNetwork = await checkNetwork();\r\n  if (!isCorrectNetwork) {\r\n    return; // Ne pas procéder à la transaction si l'utilisateur n'est pas sur le bon réseau\r\n  }\r\n  // Vérifier que le provider est disponible\r\n  if (!provider) {\r\n    alert(\" Reconnection au provider effectué. Veuillez renouveler l'opération \");\r\n    return;\r\n  }\r\n\r\n  // Assurez-vous que le provider est bien à jour avant de procéder à la transaction\r\n  await resetProvider(); // Réinitialise le provider si nécessaire\r\n\r\n    if (productId && productPrice) {\r\n      let amountIn = 0;\r\n      try {\r\n        // Calculer le montant à envoyer en fonction de la devise sélectionnée\r\n        if (selectedCurrency === 'USD') {\r\n          amountIn = productPrice; // Pas de conversion nécessaire si en USD\r\n        } else if (selectedCurrency === 'BNB') {\r\n          // Si la devise est BNB, on effectue la conversion avec le taux BNB/USD\r\n          if (!bnbToUsdRate) {\r\n            alert(\"Le taux de conversion BNB vers USD est encore en cours de chargement.\");\r\n            return;\r\n          }\r\n          amountIn = productPrice / bnbToUsdRate;\r\n        }\r\n  \r\n        // Convertir le montant à un format acceptable (fixé à 18 décimales)\r\n        amountIn = parseFloat(amountIn).toFixed(18);\r\n        console.log('Montant final pour la transaction:', amountIn);\r\n  \r\n        // Envoyer la transaction\r\n        await sendTransaction(amountIn); // Attendre la réponse de la transaction\r\n      } catch (error) {\r\n        console.error(\"Erreur lors de l'envoi de la transaction:\", error.message);\r\n        alert(\"Une erreur s'est produite lors de l'envoi de la transaction. Vérifiez votre solde et les paramètres.\");\r\n      }\r\n    } else {\r\n      alert(\"Veuillez sélectionner un produit valide et essayer de nouveau.\");\r\n    }\r\n  };\r\n\r\n  // Liste des produits\r\n  const products = {\r\n    product1: { price: 5, exists: true },\r\n    product2: { price: 299, exists: true },\r\n    product3: { price: 499, exists: true }\r\n  };\r\n  \r\n  // Mise à jour des informations du produit sélectionné\r\n  const updateProductInfo = (selectedProductId) => {\r\n    setProductId(selectedProductId);\r\n    const productDetails = products[selectedProductId];\r\n  \r\n    if (productDetails) {\r\n      const { price, exists } = productDetails;\r\n      setProductPrice(price);\r\n      setProductInfo({ price, exists });\r\n  \r\n      if (selectedCurrency === 'USD') {\r\n        setConvertedPrice(price ? price.toString() : null);\r\n      } else if (selectedCurrency === 'BNB') {\r\n        setConvertedPrice(price ? (price / bnbToUsdRate).toString() : null);\r\n      }\r\n    } else {\r\n      console.error(\"Produit non trouvé !\");\r\n    }\r\n  };\r\n\r\n  // Gestion du changement de devise (USD ou BNB)\r\n  const handleCurrencyChange = (event) => {\r\n    const newCurrency = event.target.value;\r\n    setSelectedCurrency(newCurrency);\r\n\r\n    if (newCurrency === 'USD') {\r\n      setConvertedPrice(productPrice ? productPrice.toString() : null);\r\n    } else if (newCurrency === 'BNB') {\r\n      setConvertedPrice(productPrice ? (productPrice / bnbToUsdRate).toString() : null);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {/* Conteneur de parallax */}\r\n      <div className=\"parallax-container\">\r\n        <video id=\"video-background\" autoPlay loop muted>\r\n        <source src={process.env.PUBLIC_URL + \"/video/egyptfutur2.mp4\"} type=\"video/mp4\" />\r\n\r\n\r\n          Votre navigateur ne supporte pas les vidéos HTML5.\r\n        </video>\r\n\r\n        {/* Contenu défilant */}\r\n        <div className=\"content\">\r\n          \r\n\r\n          {/* Bouton de connexion du wallet en haut à droite */}\r\n          <div className=\"wallet-connect-button\">\r\n            <button\r\n      \r\n              onClick={connectWallet}\r\n              disabled={walletConnected} // Désactive le bouton une fois connecté\r\n            >\r\n              {walletConnected ? (\r\n                <>\r\n                  <span>Wallet connecté : {walletAddress}</span>\r\n                  <span className=\"arrow-icon\">→</span> {/* Icône flèche */}\r\n                </>\r\n              ) : (\r\n                'Connecter le wallet'\r\n              )}\r\n            </button>\r\n          </div>\r\n\r\n          {/* Conteneur du formulaire de paiement */}\r\n          <div className=\"payment-wrapper\">\r\n            <h1> Les Indicateurs à Levier </h1>\r\n\r\n            {productId && productInfo && (\r\n              <div>\r\n                <p>Produit choisi : {productId}</p>\r\n                <p>Prix du produit : {convertedPrice ? convertedPrice : 'Chargement...'} {selectedCurrency}</p>\r\n                <p>Le produit est {productInfo.exists ? 'disponible' : 'indisponible'}</p>\r\n              </div>\r\n            )}\r\n\r\n            <select onChange={(e) => updateProductInfo(e.target.value)} value={productId}>\r\n              <option value=\"\">Choisi Ton Indicateur</option>\r\n              <option value=\"product1\">Indicateur Daily</option>\r\n              <option value=\"product2\">Indicateur 4h/1h</option>\r\n              <option value=\"product3\">Indicateur 15mn</option>\r\n            </select>\r\n\r\n            <select onChange={handleCurrencyChange} value={selectedCurrency}>\r\n              <option value=\"USD\">USD</option>\r\n              <option value=\"BNB\">BNB</option>\r\n            </select>\r\n\r\n            <button onClick={handlePayment}>Acheter</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  \r\n  \r\n};\r\n\r\n\r\nexport default App;\r\n\r\n\r\n\r\n\r\n\r\n\r\n",{"ruleId":"14","severity":1,"message":"15","line":1,"column":38,"nodeType":"16","messageId":"17","endLine":1,"endColumn":44},{"ruleId":"14","severity":1,"message":"18","line":18,"column":7,"nodeType":"16","messageId":"17","endLine":18,"endColumn":25},{"ruleId":"14","severity":1,"message":"19","line":115,"column":15,"nodeType":"16","messageId":"17","endLine":115,"endColumn":23},"no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'bscTestnetProvider' is assigned a value but never used.","'accounts' is assigned a value but never used."]