{"ast":null,"code":"import React,{useState,useEffect,useCallback}from'react';import Web3Modal from'web3modal';import{ethers}from'ethers';import axios from'axios';import WalletConnectProvider from\"@walletconnect/web3-provider\";import process from'process';import'./App.css';// Importation du fichier CSS\nimport'./index.css';// Ajoute cette ligne dans ton fichier JavaScript\n// Adresse du contrat USDT sur BSC (assure-toi que c'est l'adresse correcte pour le réseau que tu utilises)\nimport{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const usdtAddress='0x55d398326f99059fF775485246999027B3197955';// Adresse du contrat USDT sur Binance Smart Chain\n// ABI pour le contrat USDT\nconst usdtABI=[\"function balanceOf(address) view returns (uint256)\",\"function allowance(address, address) view returns (uint256)\",\"function approve(address spender, uint256 amount) public returns (bool)\",\"function transferFrom(address sender, address recipient, uint256 amount) public returns (bool)\"];const contractAddress='0xCd25eee89Bb01603f0E0cf8D8C243966a926761d';const bscTestnetRpcUrl=\"https://bsc-dataseed.binance.org/\";// BSC Mainnet\nconst bscTestnetProvider=new ethers.providers.JsonRpcProvider(bscTestnetRpcUrl);function App(){const[web3Modal,setWeb3Modal]=useState(null);const[provider,setProvider]=useState(null);const[walletConnected,setWalletConnected]=useState(false);const[walletAddress,setWalletAddress]=useState('');const[selectedProductId,setSelectedProductId]=useState(null);// Ajouter l'état selectedProductId\nconst[productInfo,setProductInfo]=useState({product1:{price:5,exists:true,title:\"Indicateur Daily\"},product2:{price:295,exists:true,title:\"Indicateur 4h/1h\"},product3:{price:495,exists:true,title:\"Indicateur 15mn\"}});const[productId,setProductId]=useState('');const[productPrice,setProductPrice]=useState(null);const[bnbToUsdRate,setBnbToUsdRate]=useState(null);const[selectedCurrency,setSelectedCurrency]=useState('USD');const[convertedPrice,setConvertedPrice]=useState(null);const[contractInstance,setContractInstance]=useState(null);// Déclarez `contractInstance` ici\n// Initialisation de Web3Modal pour la connexion aux portefeuilles\nuseEffect(()=>{const modal=new Web3Modal({cacheProvider:true,// Gardera en cache la dernière connexion\nproviderOptions:{walletconnect:{package:WalletConnectProvider,// Utilisation de WalletConnectProvider\noptions:{infuraId:\"e759bc5af90042a1b66c5a01aae905af\"// Remplace avec ton propre infura ID\n}},metamask:{package:null// MetaMask ne nécessite pas de package\n},trustwallet:{package:WalletConnectProvider,// Utilisation de WalletConnectProvider pour Trust Wallet\noptions:{infuraId:\"pDtEhrK4AAiPfirK7qsQI25NJlgrtMu1bBcFDqV4J95GTCAR2d/8Lg\"// Remplace avec ton propre infura ID\n}}// Ajoute d'autres options de portefeuille ici si nécessaire (par exemple : Fortmatic, etc.)\n}});setWeb3Modal(modal);// Vérifie si la modale est présente dans le DOM\nconst interval=setInterval(()=>{const web3ModalElement=document.querySelector('.web3-modal-container');if(web3ModalElement){web3ModalElement.style.zIndex='999999';// Modale au-dessus de tout\nclearInterval(interval);}},100);return()=>clearInterval(interval);},[]);// Masquer l'iframe si elle est présente\nconst hideIframe=()=>{const iframe=document.querySelector('iframe');if(iframe){iframe.style.display='none';// ou iframe.remove() si tu préfères\n}};// Appel de la fonction pour masquer l'iframe au moment où Web3Modal est chargé\nhideIframe();// Fonction pour reconnecter MetaMask\nconst reconnectToMetaMask=async()=>{if(typeof window.ethereum===\"undefined\"){alert(\"MetaMask n'est pas installé !\");return;}try{await window.ethereum.request({method:'wallet_requestPermissions',params:[{eth_accounts:{}}]});setTimeout(async()=>{const accounts=await window.ethereum.request({method:'eth_requestAccounts'});const provider=new ethers.providers.Web3Provider(window.ethereum);const signer=provider.getSigner();const address=await signer.getAddress();setWalletAddress(address);setWalletConnected(true);alert(`Compte connecté : ${address}`);},1000);}catch(error){console.error('Erreur de connexion à MetaMask :',error);alert('Échec de la connexion à MetaMask.');}};// Connexion au wallet via Web3Modal\nconst connectWallet=async()=>{if(!web3Modal){console.error(\"Web3Modal non initialisé\");return;}try{console.log(\"Tentative de connexion au wallet...\");// Connexion via Web3Modal\nconst instance=await web3Modal.connect();const newProvider=new ethers.providers.Web3Provider(instance);// S'assurer que le provider est correctement défini\nif(!newProvider){console.error(\"Le fournisseur Web3 n'a pas été correctement créé\");return;}setProvider(newProvider);// Récupérer l'adresse du wallet\nconst signer=newProvider.getSigner();const address=await signer.getAddress();setWalletAddress(address);setWalletConnected(true);console.log(`Wallet connecté: ${address}`);}catch(error){console.error(\"Erreur lors de la connexion au portefeuille:\",error);alert(\"Erreur de connexion au portefeuille. Veuillez connecter votre wallet.\");// Ferme Web3Modal\nweb3Modal.clearCachedProvider();// Relance le processus de reconnexion via MetaMask\ntry{if(typeof window.ethereum!==\"undefined\"){await reconnectToMetaMask();}else{alert(\"MetaMask n'est pas installé.\");}}catch(retryError){console.error(\"Échec de la reconnexion à MetaMask\",retryError);alert(\"La reconnexion à MetaMask a échoué.\");}}};// Récupération du taux de conversion BNB vers USD\nconst fetchBnbToUsdRate=async()=>{try{const response=await axios.get('https://api.coingecko.com/api/v3/simple/price?ids=binancecoin&vs_currencies=usd');setBnbToUsdRate(response.data.binancecoin.usd);}catch(error){console.error('Erreur lors de la récupération du taux BNB -> USD',error);}};// Charger les données du contrat et les informations du produit\nuseEffect(()=>{const loadBlockchainData=async()=>{if(provider){// Adresse du contrat et ABI\nconst contractAddress='0xD62B5CFdDfd26F6219E4BF366d9DB6B1450D5905';const contractABI=[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"addAllowedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"productId\",\"type\":\"string\"}],\"name\":\"pay\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"removeAllowedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"productId\",\"type\":\"string\"}],\"name\":\"PaymentReceived\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"productId\",\"type\":\"string\"}],\"name\":\"removeProduct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"productId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setProductPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"isTokenAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"products\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}];// Crée une nouvelle instance du contrat avec le provider\nconst contract=new ethers.Contract(contractAddress,contractABI,provider.getSigner());// Appel direct à la méthode du contrat, sans attendre que contractInstance soit mis à jour\ntry{const productDetails=await contract.products(\"product1\");setProductInfo(productDetails);setProductPrice(productDetails.price);}catch(error){console.error(\"Erreur lors de la récupération des informations du produit:\",error);}// Stocke cette instance dans l'état\nsetContractInstance(contract);}};loadBlockchainData();fetchBnbToUsdRate();},[provider]);// Dépendance sur 'provider' uniquement, pas besoin de contractInstance ici\n// Fonction pour approuver USDT (modifiée avec log)\nconst approveUSDT=async amountToSend=>{// Récupérer le signer à partir du provider\nconst signer=provider.getSigner();// Créer une instance du contrat USDT\nconst usdtContract=new ethers.Contract(usdtAddress,usdtABI,signer);try{// Convertir le montant à envoyer en wei (assurez-vous que 'amountToSend' est bien en \"USDT\" avec 6 décimales)\nconst amountToSendInWei=ethers.utils.parseUnits(amountToSend.toString(),6);// 6 décimales pour USDT\n// Vérifier l'allowance actuelle\nconst allowance=await usdtContract.allowance(await signer.getAddress(),contractAddress);// Log de l'allowance actuelle pour vérifier la valeur\nconsole.log(\"Allowance actuelle:\",allowance.toString());// Si l'allowance est insuffisante, approuver le montant nécessaire\nif(allowance.lt(amountToSendInWei)){console.log(\"Allowance insuffisante, approbation en cours...\");const tx=await usdtContract.approve(contractAddress,amountToSendInWei);await tx.wait();console.log(\"Allowance mise à jour !\");}else{console.log(\"Allowance suffisante.\");}}catch(error){console.error(\"Erreur lors de l'approbation de l'allowance USDT :\",error);}};// Fonction pour vérifier l'allowance et l'approuver si nécessaire\nconst checkAllowance=async amountToSend=>{if(contractInstance){try{const usdtContract=new ethers.Contract(usdtAddress,usdtABI,provider.getSigner());const allowance=await usdtContract.allowance(walletAddress,contractAddress);console.log(\"Allowance:\",allowance.toString());if(allowance.lt(amountToSend)){alert(\"Vous devez approuver le contrat pour envoyer cette transaction.\");await usdtContract.approve(contractAddress,amountToSend);}}catch(error){console.error(\"Erreur lors de la vérification de l'allowance:\",error);}}};const payForProduct=async(productId,amount)=>{if(contractInstance){try{// 1. Récupération du prix du produit\nconst price=fetchProductInfo(productId);// Vérifie si le prix est valide\nif(price===null){console.error(\"Produit non trouvé ou prix invalide\");alert(\"Le prix du produit est invalide.\");return;// On arrête ici si le produit est invalide\n}// 2. Si le prix est valide, on continue avec la transaction\nconsole.log(\"Prix du produit récupéré:\",price);const tx=await contractInstance.pay(usdtAddress,amount,productId,{gasLimit:200000// Ajuste selon les besoins\n});await tx.wait();// Attends la confirmation de la transaction\nconsole.log(\"Paiement effectué avec succès !\");}catch(error){console.error(\"Erreur lors du paiement:\",error);alert(\"Une erreur s'est produite lors du paiement.\");}}};const[loading,setLoading]=useState(false);// Ajout de l'état loading\nconst[transactionInProgress,setTransactionInProgress]=useState(false);const fetchProductInfo=productId=>{const localProducts={product1:{price:5,exists:true,title:\"Indicateur Daily\"},product2:{price:295,exists:true,title:\"Indicateur 4h/1h\"},product3:{price:495,exists:true,title:\"Indicateur 15mn\"}};const product=localProducts[productId];return product?product.price:null;// Retourne null si le produit n'existe pas\n};// Fonction pour tester l'approbation\nconst approveTest=async()=>{const signer=provider.getSigner();// Créer une instance du contrat USDT\nconst usdtContract=new ethers.Contract(usdtAddress,usdtABI,signer);// Montant à tester : 1 USDT (6 décimales)\nconst amountToSendInWei=ethers.utils.parseUnits(\"1\",6);// 1 USDT avec 6 décimales\ntry{// Approuver la transaction pour le contrat\nconst tx=await usdtContract.approve(contractAddress,amountToSendInWei);// Attendre la confirmation de la transaction\nconst receipt=await tx.wait();// Vérifier si la transaction a bien été minée\nif(receipt.status===1){console.log(\"Test d'approbation réussi !\");}else{console.error(\"Test d'approbation échoué.\");}}catch(error){console.error(\"Erreur dans le test d'approbation : \",error);}};// Fonction conversion BNB/USDT\nconst getBnbToUsdRate=async()=>{try{const response=await axios.get('https://api.coingecko.com/api/v3/simple/price?ids=binancecoin&vs_currencies=usd');const bnbToUsdRate=response.data.binancecoin.usd;return bnbToUsdRate;}catch(error){console.error(\"Erreur lors de la récupération du taux de conversion BNB/USD :\",error);return 0;}};// Fonction de paiement avec gestion des prix et de l'allowance\nconst sendTransaction=async(amountIn,fetchedPriceInUsd)=>{if(!provider){alert(\"Le provider n'est pas défini, veuillez connecter votre wallet.\");return;}try{const signer=provider.getSigner();// Convertir correctement le montant selon la devise\nconst amountToSend=selectedCurrency==='USDT'?ethers.utils.parseUnits(amountIn.toString(),6)// USDT a 6 décimales\n:ethers.utils.parseUnits(amountIn.toString(),18);// BNB a 18 décimales\n// Obtenir le gas price et l'ajuster\nconst gasLimit=50000;const gasPrice=await provider.getGasPrice();const adjustedGasPrice=gasPrice.mul(110).div(100);// +10%\nconsole.log(\"GasPrice ajusté : \",adjustedGasPrice.toString());// Vérifier le solde pour BNB\nconst walletBalance=await provider.getBalance(signer.getAddress());if(selectedCurrency==='BNB'&&walletBalance.lt(amountToSend.add(adjustedGasPrice))){alert(\"Solde insuffisant pour couvrir la transaction et les frais de gaz en BNB.\");return;}// Vérifier le solde + allowance pour USDT\nif(selectedCurrency==='USDT'){const usdtContract=new ethers.Contract(usdtAddress,usdtABI,signer);const usdtBalance=await usdtContract.balanceOf(signer.getAddress());if(usdtBalance.lt(amountToSend)){alert(\"Solde insuffisant en USDT pour couvrir la transaction.\");return;}const allowance=await usdtContract.allowance(signer.getAddress(),contractAddress);if(allowance.lt(amountToSend)){// Appel à la fonction approveUSDT si l'allowance est insuffisante\nalert(\"Vous devez approuver le contrat pour utiliser vos USDT.\");await approveUSDT(amountToSend);// Appel de la fonction approveUSDT pour donner l'allowance nécessaire\n}}// Préparer la transaction\nconst tx={to:contractAddress,value:selectedCurrency==='BNB'?amountToSend:0,gasLimit:gasLimit,gasPrice:adjustedGasPrice,data:ethers.utils.defaultAbiCoder.encode([\"uint256\"],[fetchedPriceInUsd])};let transactionResponse;if(selectedCurrency==='USDT'){const usdtContract=new ethers.Contract(usdtAddress,usdtABI,signer);transactionResponse=await usdtContract.transferFrom(signer.getAddress(),contractAddress,amountToSend);console.log(\"USDT envoyés au contrat.\");}else{transactionResponse=await signer.sendTransaction(tx);console.log(\"Transaction envoyée:\",transactionResponse.hash);}const receipt=await transactionResponse.wait();if(receipt.status===1){console.log(\"Transaction réussie !\");alert(\"Paiement effectué avec succès.\");window.location.href='/Delivrance_IndicateurD.html';}else{alert(\"Échec de la transaction.\");}}catch(error){console.error(\"Erreur lors de l'envoi de la transaction:\",error.message);alert(\"Une erreur s'est produite lors de l'envoi de la transaction.\");}finally{console.log(\"Transaction terminée.\");}};const checkNetwork=async()=>{if(typeof window.ethereum!==\"undefined\"){const network=await window.ethereum.request({method:'eth_chainId'});// Vérifie si l'utilisateur est bien sur BSC Testnet (chainId 97)\nif(network!=='0x38'){// 0x38 est le chainId pour BSC Mainnet\nalert(\"Veuillez vous connecter au réseau Binance Smart Chain Mainnet.\");return false;}return true;}else{console.error(\"Ethereum n'est pas disponible.\");alert(\"MetaMask ou un autre portefeuille Ethereum n'est pas installé.\");return false;}};// Fonction pour réinitialiser le provider\nconst resetProvider=async()=>{try{if(typeof window.ethereum!==\"undefined\"){const newProvider=new ethers.providers.Web3Provider(window.ethereum);setProvider(newProvider);// Mettre à jour le provider\n// Attendre que React ait bien mis à jour le provider\nreturn newProvider.getSigner();// Retourner le signer après que le provider ait été mis à jour\n}else{throw new Error(\"Aucun fournisseur Ethereum n'est disponible.\");}}catch(error){console.error(\"Erreur dans resetProvider:\",error);alert(\"Erreur lors de la réinitialisation du provider.\");return null;}};// Vérification du réseau à chaque fois qu'il change\nuseEffect(()=>{const changeNetworkHandler=async()=>{try{await resetProvider();// Remet à jour le provider lorsque le réseau change\nconsole.log(\"Le provider a été réinitialisé après le changement de réseau.\");}catch(error){console.error(\"Erreur lors du changement de réseau et réinitialisation du provider:\",error);}};if(typeof window.ethereum!==\"undefined\"){window.ethereum.on('chainChanged',changeNetworkHandler);}// Nettoyage quand le composant est démonté\nreturn()=>{if(typeof window.ethereum!==\"undefined\"){window.ethereum.removeListener('chainChanged',changeNetworkHandler);}};},[]);const handlePayment=async()=>{if(loading||transactionInProgress){console.log(\"Transaction déjà en cours, veuillez patienter.\");return;// Empêche l'exécution si une autre transaction est en cours\n}setLoading(true);// Empêche d'envoyer une nouvelle transaction si une est déjà en cours\n// Vérifie que le prix est valide avant de procéder\nif(convertedPrice===null||parseFloat(convertedPrice)<=0){alert(\"Prix invalide ou non défini pour le produit.\");setLoading(false);setTransactionInProgress(false);return;}if(!walletConnected){alert(\"Veuillez connecter votre wallet avant de procéder.\");setLoading(false);// Permet de déverrouiller le bouton si une erreur survient\nsetTransactionInProgress(false);// Réinitialise l'état de la transaction\nreturn;}// Vérifie que le contrat est bien initialisé\nif(!contractInstance){console.error(\"Le contrat n'est pas initialisé.\");setLoading(false);setTransactionInProgress(false);return;}// Vérifie que le produit est bien sélectionné\nif(!productId||!productInfo[productId]){alert(\"Veuillez sélectionner un produit valide et essayer de nouveau.\");setLoading(false);setTransactionInProgress(false);return;}// Vérifie que l'utilisateur est sur le bon réseau\nconst isCorrectNetwork=await checkNetwork();if(!isCorrectNetwork){setLoading(false);setTransactionInProgress(false);return;}// Vérifier que le provider est disponible\nif(!provider){alert(\"Reconnexion au provider effectuée. Veuillez renouveler l'opération.\");await resetProvider();setLoading(false);setTransactionInProgress(false);return;}// Récupération du prix en USD depuis IPFS\nlet fetchedPriceInUsd=await fetchProductInfo(productId);if(fetchedPriceInUsd<=0){alert(\"Le prix du produit est invalide.\");setLoading(false);setTransactionInProgress(false);return;}console.log(\"Prix du produit en USD récupéré dans handlePayment:\",fetchedPriceInUsd);// Récupération du taux de conversion BNB/USD\nconst bnbToUsdRate=await getBnbToUsdRate();if(bnbToUsdRate<=0){alert(\"Erreur de récupération du taux de conversion BNB/USD.\");setLoading(false);setTransactionInProgress(false);return;}// Récupérer les détails du produit\nconst productDetails=productInfo[productId];if(!productDetails||!productDetails.exists||productDetails.price<=0){alert(\"Produit invalide ou prix incorrect.\");setLoading(false);setTransactionInProgress(false);return;}// --- Ajout de la fonction pour récupérer le prix du produit ---\nlet amountIn=0;try{// Utilisation directement de fetchedPriceInUsd\namountIn=fetchedPriceInUsd;// Vérification de la devise et calcul du montant à envoyer\nif(selectedCurrency==='USDT'){amountIn=fetchedPriceInUsd;// Utilise directement le prix en USD\n}else if(selectedCurrency==='BNB'){amountIn=fetchedPriceInUsd/bnbToUsdRate;// Conversion de USD en BNB\n}else{alert(\"Devise non supportée pour ce paiement.\");setLoading(false);setTransactionInProgress(false);return;}// Logs de vérification\nconsole.log(\"Prix du produit en USD:\",fetchedPriceInUsd);console.log(\"Taux de conversion BNB/USD:\",bnbToUsdRate);console.log(\"Montant en BNB à envoyer:\",amountIn);// Vérifier que amountIn est valide et non nul avant d'envoyer la transaction\nif(parseFloat(amountIn)<=0){alert(\"Le montant à payer est invalide (0 ou négatif).\");setLoading(false);setTransactionInProgress(false);return;}// Convertir le montant à un format acceptable (fixé à 18 décimales)\namountIn=parseFloat(amountIn).toFixed(18);console.log('Montant final pour la transaction:',amountIn);// Envoyer la transaction\nawait checkAllowance(amountIn);// Passe amountIn ici\nawait payForProduct(productId,amountIn);// Passe amountIn ici\nawait sendTransaction(amountIn,fetchedPriceInUsd);console.log(\"Transaction envoyée.\");}catch(error){console.error(\"Erreur lors de l'envoi de la transaction:\",error.message);alert(\"Une erreur s'est produite lors de l'envoi de la transaction. Vérifiez votre solde et les paramètres.\");}finally{setLoading(false);// Permet de déverrouiller le bouton après l'exécution\nsetTransactionInProgress(false);// Réinitialise l'état de la transaction\n}};// Mise à jour des informations du produit sélectionné\nconst updateProductInfo=useCallback(selectedProductId=>{setProductId(selectedProductId);const price=fetchProductInfo(selectedProductId);// Ajout de la vérification de prix\nif(price!==null&&price>0){const newProductDetails={exists:true,price,title:selectedProductId==='product1'?'Indicateur Daily':selectedProductId==='product2'?'Indicateur 4h/1h':selectedProductId==='product3'?'Indicateur 15mn':'Produit inconnu'};setProductPrice(price);setProductInfo(prevInfo=>({...prevInfo,[selectedProductId]:newProductDetails}));// Debug pour vérifier les valeurs\nconsole.log(\"Produit sélectionné:\",selectedProductId);console.log(\"Prix du produit récupéré:\",price);if(selectedCurrency==='USDT'){setConvertedPrice(price.toString());}else if(selectedCurrency==='BNB'&&bnbToUsdRate>0){setConvertedPrice((price/bnbToUsdRate).toString());}}else{// Log d'erreur si le prix est invalide\nconsole.error(\"Prix invalide ou produit non trouvé.\");alert(\"Produit invalide ou prix incorrect.\");}},[selectedCurrency,bnbToUsdRate]);useEffect(()=>{if(selectedCurrency==='USDT'){// Récupérer le prix en USD pour USDT\nconst priceInUsd=fetchProductInfo(productId);setConvertedPrice(priceInUsd.toString());}else if(selectedCurrency==='BNB'){// Récupérer le prix en USD et effectuer la conversion pour BNB\nconst priceInUsd=fetchProductInfo(productId);setConvertedPrice((priceInUsd/bnbToUsdRate).toString());}},[productId,selectedCurrency,bnbToUsdRate]);// Assure-toi que toutes les dépendances sont présentes\nconst handleCurrencyChange=event=>{setSelectedCurrency(event.target.value);};return/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[loading&&/*#__PURE__*/_jsx(\"div\",{children:\"Chargement des produits...\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"parallax-container\",children:[/*#__PURE__*/_jsxs(\"video\",{id:\"video-background\",autoPlay:true,loop:true,muted:true,children:[/*#__PURE__*/_jsx(\"source\",{src:\"https://gateway.pinata.cloud/ipfs/QmPZ8v3KzeyH2Dqz29TZFWe4kswkUETJyesZFCFULtagwv\",type:\"video/mp4\"}),\"Votre navigateur ne supporte pas les vid\\xE9os HTML5.\"]}),/*#__PURE__*/_jsxs(\"div\",{className:\"content\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"wallet-connect-button\",children:/*#__PURE__*/_jsx(\"button\",{onClick:connectWallet,disabled:walletConnected// Désactive le bouton une fois connecté\n,children:walletConnected?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"span\",{children:[\"Wallet connect\\xE9 : \",walletAddress]}),/*#__PURE__*/_jsx(\"span\",{className:\"arrow-icon\",children:\"\\u2192\"}),\" \"]}):'Connecter le wallet'})}),/*#__PURE__*/_jsxs(\"div\",{className:\"payment-wrapper\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\" Les Indicateurs \\xE0 Levier \"}),productId&&productInfo[productId]?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"p\",{children:[\"Produit choisi : \",productInfo[productId].title]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Prix du produit : \",convertedPrice,\" \",selectedCurrency]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Le produit est \",productInfo[productId].exists?'disponible':'indisponible']})]}):/*#__PURE__*/_jsx(\"p\",{children:\"Veuillez choisir un produit.\"}),/*#__PURE__*/_jsxs(\"select\",{onChange:e=>updateProductInfo(e.target.value),value:productId,children:[/*#__PURE__*/_jsx(\"option\",{value:\"\",children:\"Choisi Ton Indicateur\"}),/*#__PURE__*/_jsx(\"option\",{value:\"product1\",children:\"Indicateur Daily\"}),/*#__PURE__*/_jsx(\"option\",{value:\"product2\",children:\"Indicateur 4h/1h\"}),/*#__PURE__*/_jsx(\"option\",{value:\"product3\",children:\"Indicateur 15mn\"})]}),/*#__PURE__*/_jsxs(\"select\",{onChange:handleCurrencyChange,value:selectedCurrency,children:[/*#__PURE__*/_jsx(\"option\",{value:\"USDT\",children:\"USD\"}),/*#__PURE__*/_jsx(\"option\",{value:\"BNB\",children:\"BNB\"})]}),/*#__PURE__*/_jsx(\"button\",{onClick:handlePayment,disabled:loading||transactionInProgress,children:loading||transactionInProgress?\"Paiement en cours...\":\"Acheter\"})]})]})]})]});};export default App;","map":{"version":3,"names":["React","useState","useEffect","useCallback","Web3Modal","ethers","axios","WalletConnectProvider","process","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","usdtAddress","usdtABI","contractAddress","bscTestnetRpcUrl","bscTestnetProvider","providers","JsonRpcProvider","App","web3Modal","setWeb3Modal","provider","setProvider","walletConnected","setWalletConnected","walletAddress","setWalletAddress","selectedProductId","setSelectedProductId","productInfo","setProductInfo","product1","price","exists","title","product2","product3","productId","setProductId","productPrice","setProductPrice","bnbToUsdRate","setBnbToUsdRate","selectedCurrency","setSelectedCurrency","convertedPrice","setConvertedPrice","contractInstance","setContractInstance","modal","cacheProvider","providerOptions","walletconnect","package","options","infuraId","metamask","trustwallet","interval","setInterval","web3ModalElement","document","querySelector","style","zIndex","clearInterval","hideIframe","iframe","display","reconnectToMetaMask","window","ethereum","alert","request","method","params","eth_accounts","setTimeout","accounts","Web3Provider","signer","getSigner","address","getAddress","error","console","connectWallet","log","instance","connect","newProvider","clearCachedProvider","retryError","fetchBnbToUsdRate","response","get","data","binancecoin","usd","loadBlockchainData","contractABI","contract","Contract","productDetails","products","approveUSDT","amountToSend","usdtContract","amountToSendInWei","utils","parseUnits","toString","allowance","lt","tx","approve","wait","checkAllowance","payForProduct","amount","fetchProductInfo","pay","gasLimit","loading","setLoading","transactionInProgress","setTransactionInProgress","localProducts","product","approveTest","receipt","status","getBnbToUsdRate","sendTransaction","amountIn","fetchedPriceInUsd","gasPrice","getGasPrice","adjustedGasPrice","mul","div","walletBalance","getBalance","add","usdtBalance","balanceOf","to","value","defaultAbiCoder","encode","transactionResponse","transferFrom","hash","location","href","message","checkNetwork","network","resetProvider","Error","changeNetworkHandler","on","removeListener","handlePayment","parseFloat","isCorrectNetwork","toFixed","updateProductInfo","newProductDetails","prevInfo","priceInUsd","handleCurrencyChange","event","target","className","children","id","autoPlay","loop","muted","src","type","onClick","disabled","onChange","e"],"sources":["/home/nypsus/mon-projet-deploiement/Front-end-indicateur/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\n\nimport Web3Modal from 'web3modal';\nimport { ethers } from 'ethers';\nimport axios from 'axios';\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport process from 'process';\nimport './App.css'; // Importation du fichier CSS\nimport './index.css'; // Ajoute cette ligne dans ton fichier JavaScript\n\n\n// Adresse du contrat USDT sur BSC (assure-toi que c'est l'adresse correcte pour le réseau que tu utilises)\nconst usdtAddress = '0x55d398326f99059fF775485246999027B3197955'; // Adresse du contrat USDT sur Binance Smart Chain\n\n// ABI pour le contrat USDT\nconst usdtABI = [\n  \"function balanceOf(address) view returns (uint256)\",\n  \"function allowance(address, address) view returns (uint256)\",\n  \"function approve(address spender, uint256 amount) public returns (bool)\",\n  \"function transferFrom(address sender, address recipient, uint256 amount) public returns (bool)\"\n];\n\n\n\n\nconst contractAddress = '0xCd25eee89Bb01603f0E0cf8D8C243966a926761d';\nconst bscTestnetRpcUrl = \"https://bsc-dataseed.binance.org/\"; // BSC Mainnet\nconst bscTestnetProvider = new ethers.providers.JsonRpcProvider(bscTestnetRpcUrl);\n\n\n\n\nfunction App() {\n  const [web3Modal, setWeb3Modal] = useState(null);\n  const [provider, setProvider] = useState(null);\n  const [walletConnected, setWalletConnected] = useState(false);\n  const [walletAddress, setWalletAddress] = useState('');\n  const [selectedProductId, setSelectedProductId] = useState(null);  // Ajouter l'état selectedProductId\n  const [productInfo, setProductInfo] = useState({ \n  product1: { price: 5, exists: true, title: \"Indicateur Daily\" },\n  product2: { price: 295, exists: true, title: \"Indicateur 4h/1h\" },\n  product3: { price: 495, exists: true, title: \"Indicateur 15mn\" }\n});\n\n\n  const [productId, setProductId] = useState('');\n  const [productPrice, setProductPrice] = useState(null);\n  const [bnbToUsdRate, setBnbToUsdRate] = useState(null);\n  const [selectedCurrency, setSelectedCurrency] = useState('USD');\n  const [convertedPrice, setConvertedPrice] = useState(null);\n  const [contractInstance, setContractInstance] = useState(null); // Déclarez `contractInstance` ici\n  \n\n\n\n\n\n\n  \n  // Initialisation de Web3Modal pour la connexion aux portefeuilles\n  useEffect(() => {\n  const modal = new Web3Modal({\n    cacheProvider: true, // Gardera en cache la dernière connexion\n    providerOptions: {\n      walletconnect: {\n        package: WalletConnectProvider, // Utilisation de WalletConnectProvider\n        options: {\n          infuraId: \"e759bc5af90042a1b66c5a01aae905af\" // Remplace avec ton propre infura ID\n        }\n      },\n      metamask: {\n        package: null, // MetaMask ne nécessite pas de package\n        \n      },\n      trustwallet: {\n        package: WalletConnectProvider, // Utilisation de WalletConnectProvider pour Trust Wallet\n        options: {\n          infuraId: \"pDtEhrK4AAiPfirK7qsQI25NJlgrtMu1bBcFDqV4J95GTCAR2d/8Lg\" // Remplace avec ton propre infura ID\n        }\n      },\n      \n      // Ajoute d'autres options de portefeuille ici si nécessaire (par exemple : Fortmatic, etc.)\n    }\n  });\n\n  setWeb3Modal(modal);\n\n  // Vérifie si la modale est présente dans le DOM\n  const interval = setInterval(() => {\n    const web3ModalElement = document.querySelector('.web3-modal-container');\n    if (web3ModalElement) {\n      web3ModalElement.style.zIndex = '999999'; // Modale au-dessus de tout\n      clearInterval(interval);\n    }\n  }, 100);\n\n  return () => clearInterval(interval);\n\n}, []);\n\n  \n\n\n  // Masquer l'iframe si elle est présente\n  const hideIframe = () => {\n    const iframe = document.querySelector('iframe');\n    if (iframe) {\n      iframe.style.display = 'none'; // ou iframe.remove() si tu préfères\n    }\n  };\n\n  // Appel de la fonction pour masquer l'iframe au moment où Web3Modal est chargé\n  hideIframe();\n  \n\n  // Fonction pour reconnecter MetaMask\n  const reconnectToMetaMask = async () => {\n    if (typeof window.ethereum === \"undefined\") {\n      alert(\"MetaMask n'est pas installé !\");\n      return;\n    }\n\n    try {\n      \n      await window.ethereum.request({\n        method: 'wallet_requestPermissions',\n        params: [{\n          eth_accounts: {}\n        }]\n      });\n\n      setTimeout(async () => {\n        const accounts = await window.ethereum.request({\n          method: 'eth_requestAccounts',\n        });\n\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n        const address = await signer.getAddress();\n\n        setWalletAddress(address);\n        setWalletConnected(true);\n        alert(`Compte connecté : ${address}`);\n      }, 1000);\n    } catch (error) {\n      console.error('Erreur de connexion à MetaMask :', error);\n      alert('Échec de la connexion à MetaMask.');\n    }\n  };\n\n\n  // Connexion au wallet via Web3Modal\n  const connectWallet = async () => {\n    if (!web3Modal) {\n      console.error(\"Web3Modal non initialisé\");\n      return;\n    }\n    \n    try {\n      console.log(\"Tentative de connexion au wallet...\");\n      \n      \n      // Connexion via Web3Modal\n      const instance = await web3Modal.connect();\n      const newProvider = new ethers.providers.Web3Provider(instance);\n      \n      // S'assurer que le provider est correctement défini\n      if (!newProvider) {\n        console.error(\"Le fournisseur Web3 n'a pas été correctement créé\");\n        return;\n      }\n      \n      setProvider(newProvider);\n  \n      // Récupérer l'adresse du wallet\n      const signer = newProvider.getSigner();\n      const address = await signer.getAddress();\n      \n      setWalletAddress(address);\n      setWalletConnected(true);\n      \n      console.log(`Wallet connecté: ${address}`);\n    } catch (error) {\n      console.error(\"Erreur lors de la connexion au portefeuille:\", error);\n      alert(\"Erreur de connexion au portefeuille. Veuillez connecter votre wallet.\");\n      // Ferme Web3Modal\n      web3Modal.clearCachedProvider();\n\n      // Relance le processus de reconnexion via MetaMask\n      try {\n        if (typeof window.ethereum !== \"undefined\") {\n          await reconnectToMetaMask();\n        } else {\n          alert(\"MetaMask n'est pas installé.\");\n        }\n      } catch (retryError) {\n        console.error(\"Échec de la reconnexion à MetaMask\", retryError);\n        alert(\"La reconnexion à MetaMask a échoué.\");\n      }\n    }\n  };\n  \n\n  // Récupération du taux de conversion BNB vers USD\n  const fetchBnbToUsdRate = async () => {\n    try {\n      const response = await axios.get('https://api.coingecko.com/api/v3/simple/price?ids=binancecoin&vs_currencies=usd');\n      setBnbToUsdRate(response.data.binancecoin.usd);\n    } catch (error) {\n      console.error('Erreur lors de la récupération du taux BNB -> USD', error);\n    }\n  };\n\n   // Charger les données du contrat et les informations du produit\nuseEffect(() => {\n  const loadBlockchainData = async () => {\n    if (provider) {\n      // Adresse du contrat et ABI\n      const contractAddress = '0xD62B5CFdDfd26F6219E4BF366d9DB6B1450D5905';\n      const contractABI = [\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"token\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"addAllowedToken\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"token\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"amount\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"string\",\n        \"name\": \"productId\",\n        \"type\": \"string\"\n      }\n    ],\n    \"name\": \"pay\",\n    \"outputs\": [],\n    \"stateMutability\": \"payable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"token\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"removeAllowedToken\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address[]\",\n        \"name\": \"tokens\",\n        \"type\": \"address[]\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"constructor\"\n  },\n  {\n    \"anonymous\": false,\n    \"inputs\": [\n      {\n        \"indexed\": true,\n        \"internalType\": \"address\",\n        \"name\": \"user\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": false,\n        \"internalType\": \"uint256\",\n        \"name\": \"amount\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"indexed\": false,\n        \"internalType\": \"address\",\n        \"name\": \"token\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": false,\n        \"internalType\": \"string\",\n        \"name\": \"productId\",\n        \"type\": \"string\"\n      }\n    ],\n    \"name\": \"PaymentReceived\",\n    \"type\": \"event\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"string\",\n        \"name\": \"productId\",\n        \"type\": \"string\"\n      }\n    ],\n    \"name\": \"removeProduct\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"string\",\n        \"name\": \"productId\",\n        \"type\": \"string\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"price\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"setProductPrice\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"amount\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"withdraw\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"token\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"amount\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"withdrawToken\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"allowedTokens\",\n    \"outputs\": [\n      {\n        \"internalType\": \"bool\",\n        \"name\": \"\",\n        \"type\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"token\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"isTokenAllowed\",\n    \"outputs\": [\n      {\n        \"internalType\": \"bool\",\n        \"name\": \"\",\n        \"type\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"owner\",\n    \"outputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"\",\n        \"type\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"string\",\n        \"name\": \"\",\n        \"type\": \"string\"\n      }\n    ],\n    \"name\": \"products\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"price\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"bool\",\n        \"name\": \"exists\",\n        \"type\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n\n    \n  }\n];\n\n\n\n\n        // Crée une nouvelle instance du contrat avec le provider\n      const contract = new ethers.Contract(contractAddress, contractABI, provider.getSigner());\n\n      // Appel direct à la méthode du contrat, sans attendre que contractInstance soit mis à jour\n      try {\n        const productDetails = await contract.products(\"product1\");\n        setProductInfo(productDetails);\n        setProductPrice(productDetails.price);\n      } catch (error) {\n        console.error(\"Erreur lors de la récupération des informations du produit:\", error);\n      }\n      \n      // Stocke cette instance dans l'état\n      setContractInstance(contract);\n    }\n  };\n\n  loadBlockchainData();\n  fetchBnbToUsdRate();\n}, [provider]);  // Dépendance sur 'provider' uniquement, pas besoin de contractInstance ici\n\n\n\n\n\n\n\n// Fonction pour approuver USDT (modifiée avec log)\nconst approveUSDT = async (amountToSend) => {\n  // Récupérer le signer à partir du provider\n  const signer = provider.getSigner();\n\n  // Créer une instance du contrat USDT\n  const usdtContract = new ethers.Contract(usdtAddress, usdtABI, signer);\n\n  try {\n    // Convertir le montant à envoyer en wei (assurez-vous que 'amountToSend' est bien en \"USDT\" avec 6 décimales)\n    const amountToSendInWei = ethers.utils.parseUnits(amountToSend.toString(), 6);  // 6 décimales pour USDT\n\n    // Vérifier l'allowance actuelle\n    const allowance = await usdtContract.allowance(await signer.getAddress(), contractAddress);\n    \n    // Log de l'allowance actuelle pour vérifier la valeur\n    console.log(\"Allowance actuelle:\", allowance.toString());\n\n    // Si l'allowance est insuffisante, approuver le montant nécessaire\n    if (allowance.lt(amountToSendInWei)) {\n      console.log(\"Allowance insuffisante, approbation en cours...\");\n      const tx = await usdtContract.approve(contractAddress, amountToSendInWei);\n      await tx.wait();\n      console.log(\"Allowance mise à jour !\");\n    } else {\n      console.log(\"Allowance suffisante.\");\n    }\n  } catch (error) {\n    console.error(\"Erreur lors de l'approbation de l'allowance USDT :\", error);\n  }\n};\n\n\n\n\n// Fonction pour vérifier l'allowance et l'approuver si nécessaire\nconst checkAllowance = async (amountToSend) => {\n  if (contractInstance) {\n    try {\n      const usdtContract = new ethers.Contract(usdtAddress, usdtABI, provider.getSigner());\n      const allowance = await usdtContract.allowance(walletAddress, contractAddress);\n      \n      console.log(\"Allowance:\", allowance.toString());\n\n      if (allowance.lt(amountToSend)) {\n        alert(\"Vous devez approuver le contrat pour envoyer cette transaction.\");\n        await usdtContract.approve(contractAddress, amountToSend);\n      }\n    } catch (error) {\n      console.error(\"Erreur lors de la vérification de l'allowance:\", error);\n    }\n  }\n};\n\nconst payForProduct = async (productId, amount) => {\n  if (contractInstance) {\n    try {\n      // 1. Récupération du prix du produit\n      const price = fetchProductInfo(productId);\n      \n      // Vérifie si le prix est valide\n      if (price === null) {\n        console.error(\"Produit non trouvé ou prix invalide\");\n        alert(\"Le prix du produit est invalide.\");\n        return; // On arrête ici si le produit est invalide\n      }\n      \n      // 2. Si le prix est valide, on continue avec la transaction\n      console.log(\"Prix du produit récupéré:\", price);\n\n      const tx = await contractInstance.pay(usdtAddress, amount, productId, {\n        gasLimit: 200000,  // Ajuste selon les besoins\n      });\n      await tx.wait();  // Attends la confirmation de la transaction\n      console.log(\"Paiement effectué avec succès !\");\n    } catch (error) {\n      console.error(\"Erreur lors du paiement:\", error);\n      alert(\"Une erreur s'est produite lors du paiement.\");\n    }\n  }\n};\n\n\n\n\n  const [loading, setLoading] = useState(false); // Ajout de l'état loading\n  const [transactionInProgress, setTransactionInProgress] = useState(false);\n\n\n  const fetchProductInfo = (productId) => {\n    const localProducts = {\n      product1: { price: 5, exists: true, title: \"Indicateur Daily\" },\n      product2: { price: 295, exists: true, title: \"Indicateur 4h/1h\" },\n      product3: { price: 495, exists: true, title: \"Indicateur 15mn\" }\n    };\n    const product = localProducts[productId];\n    return product ? product.price : null; // Retourne null si le produit n'existe pas\n  };\n  \n  \n  // Fonction pour tester l'approbation\nconst approveTest = async () => {\n  const signer = provider.getSigner();\n\n  // Créer une instance du contrat USDT\n  const usdtContract = new ethers.Contract(usdtAddress, usdtABI, signer);\n\n  // Montant à tester : 1 USDT (6 décimales)\n  const amountToSendInWei = ethers.utils.parseUnits(\"1\", 6);  // 1 USDT avec 6 décimales\n\n  try {\n    // Approuver la transaction pour le contrat\n    const tx = await usdtContract.approve(contractAddress, amountToSendInWei);\n    \n    // Attendre la confirmation de la transaction\n    const receipt = await tx.wait();\n\n    // Vérifier si la transaction a bien été minée\n    if (receipt.status === 1) {\n      console.log(\"Test d'approbation réussi !\");\n    } else {\n      console.error(\"Test d'approbation échoué.\");\n    }\n  } catch (error) {\n    console.error(\"Erreur dans le test d'approbation : \", error);\n  }\n};\n\n\n\n  \n\n\n// Fonction conversion BNB/USDT\n  const getBnbToUsdRate = async () => {\n    try {\n      const response = await axios.get('https://api.coingecko.com/api/v3/simple/price?ids=binancecoin&vs_currencies=usd');\n      const bnbToUsdRate = response.data.binancecoin.usd;\n      return bnbToUsdRate;\n    } catch (error) {\n      console.error(\"Erreur lors de la récupération du taux de conversion BNB/USD :\", error);\n      return 0;\n    }\n  };\n  \n  \n  \n  \n // Fonction de paiement avec gestion des prix et de l'allowance\nconst sendTransaction = async (amountIn, fetchedPriceInUsd) => {\n  if (!provider) {\n    alert(\"Le provider n'est pas défini, veuillez connecter votre wallet.\");\n    return;\n  }\n\n  try {\n    const signer = provider.getSigner();\n\n    // Convertir correctement le montant selon la devise\n    const amountToSend = selectedCurrency === 'USDT'\n      ? ethers.utils.parseUnits(amountIn.toString(), 6)  // USDT a 6 décimales\n      : ethers.utils.parseUnits(amountIn.toString(), 18); // BNB a 18 décimales\n\n    // Obtenir le gas price et l'ajuster\n    const gasLimit = 50000;\n    const gasPrice = await provider.getGasPrice();\n    const adjustedGasPrice = gasPrice.mul(110).div(100); // +10%\n\n    console.log(\"GasPrice ajusté : \", adjustedGasPrice.toString());\n\n    // Vérifier le solde pour BNB\n    const walletBalance = await provider.getBalance(signer.getAddress());\n    if (selectedCurrency === 'BNB' && walletBalance.lt(amountToSend.add(adjustedGasPrice))) {\n      alert(\"Solde insuffisant pour couvrir la transaction et les frais de gaz en BNB.\");\n      return;\n    }\n\n    // Vérifier le solde + allowance pour USDT\n    if (selectedCurrency === 'USDT') {\n      const usdtContract = new ethers.Contract(usdtAddress, usdtABI, signer);\n      const usdtBalance = await usdtContract.balanceOf(signer.getAddress());\n\n      if (usdtBalance.lt(amountToSend)) {\n        alert(\"Solde insuffisant en USDT pour couvrir la transaction.\");\n        return;\n      }\n\n      const allowance = await usdtContract.allowance(signer.getAddress(), contractAddress);\n      if (allowance.lt(amountToSend)) {\n        // Appel à la fonction approveUSDT si l'allowance est insuffisante\n        alert(\"Vous devez approuver le contrat pour utiliser vos USDT.\");\n        await approveUSDT(amountToSend); // Appel de la fonction approveUSDT pour donner l'allowance nécessaire\n      }\n    }\n\n    // Préparer la transaction\n    const tx = {\n      to: contractAddress,\n      value: selectedCurrency === 'BNB' ? amountToSend : 0,\n      gasLimit: gasLimit,\n      gasPrice: adjustedGasPrice,\n      data: ethers.utils.defaultAbiCoder.encode([\"uint256\"], [fetchedPriceInUsd]),\n    };\n\n    let transactionResponse;\n    if (selectedCurrency === 'USDT') {\n      const usdtContract = new ethers.Contract(usdtAddress, usdtABI, signer);\n      transactionResponse = await usdtContract.transferFrom(\n        signer.getAddress(),\n        contractAddress,\n        amountToSend\n      );\n      console.log(\"USDT envoyés au contrat.\");\n    } else {\n      transactionResponse = await signer.sendTransaction(tx);\n      console.log(\"Transaction envoyée:\", transactionResponse.hash);\n    }\n\n    const receipt = await transactionResponse.wait();\n    if (receipt.status === 1) {\n      console.log(\"Transaction réussie !\");\n      alert(\"Paiement effectué avec succès.\");\n      window.location.href = '/Delivrance_IndicateurD.html';\n    } else {\n      alert(\"Échec de la transaction.\");\n    }\n  } catch (error) {\n    console.error(\"Erreur lors de l'envoi de la transaction:\", error.message);\n    alert(\"Une erreur s'est produite lors de l'envoi de la transaction.\");\n  } finally {\n    console.log(\"Transaction terminée.\");\n  }\n};\n  \n  \n  \n  \n  \n  \n  \n\n\n  const checkNetwork = async () => {\n    if (typeof window.ethereum !== \"undefined\") {\n      const network = await window.ethereum.request({\n        method: 'eth_chainId'\n      });\n  \n      // Vérifie si l'utilisateur est bien sur BSC Testnet (chainId 97)\n      if (network !== '0x38') { // 0x38 est le chainId pour BSC Mainnet\n        alert(\"Veuillez vous connecter au réseau Binance Smart Chain Mainnet.\");\n        return false;\n      }\n      \n      return true;\n    } else {\n      console.error(\"Ethereum n'est pas disponible.\");\n      alert(\"MetaMask ou un autre portefeuille Ethereum n'est pas installé.\");\n      return false;\n    }\n  };\n\n\n\n\n\n\n  // Fonction pour réinitialiser le provider\n  const resetProvider = async () => {\n    try {\n      if (typeof window.ethereum !== \"undefined\") {\n        const newProvider = new ethers.providers.Web3Provider(window.ethereum);\n        setProvider(newProvider); // Mettre à jour le provider\n\n        // Attendre que React ait bien mis à jour le provider\n        return newProvider.getSigner(); // Retourner le signer après que le provider ait été mis à jour\n      } else {\n        throw new Error(\"Aucun fournisseur Ethereum n'est disponible.\");\n      }\n    } catch (error) {\n      console.error(\"Erreur dans resetProvider:\", error);\n      alert(\"Erreur lors de la réinitialisation du provider.\");\n      return null;\n    }\n  };\n\n  // Vérification du réseau à chaque fois qu'il change\n  useEffect(() => {\n    const changeNetworkHandler = async () => {\n      try {\n        await resetProvider(); // Remet à jour le provider lorsque le réseau change\n        console.log(\"Le provider a été réinitialisé après le changement de réseau.\");\n      } catch (error) {\n        console.error(\"Erreur lors du changement de réseau et réinitialisation du provider:\", error);\n      }\n    };\n\n    if (typeof window.ethereum !== \"undefined\") {\n      window.ethereum.on('chainChanged', changeNetworkHandler);\n    }\n\n    // Nettoyage quand le composant est démonté\n    return () => {\n      if (typeof window.ethereum !== \"undefined\") {\n        window.ethereum.removeListener('chainChanged', changeNetworkHandler);\n      }\n    };\n  }, []);\n  \n\n\n\n  const handlePayment = async () => {\n    if (loading || transactionInProgress) {\n      console.log(\"Transaction déjà en cours, veuillez patienter.\");\n      return; // Empêche l'exécution si une autre transaction est en cours\n    }\n    setLoading(true);  // Empêche d'envoyer une nouvelle transaction si une est déjà en cours\n    \n    // Vérifie que le prix est valide avant de procéder\n    if (convertedPrice === null || parseFloat(convertedPrice) <= 0) {\n      alert(\"Prix invalide ou non défini pour le produit.\");\n      setLoading(false);\n      setTransactionInProgress(false);\n      return;\n    }\n\n\n    if (!walletConnected) {\n      alert(\"Veuillez connecter votre wallet avant de procéder.\");\n      setLoading(false);  // Permet de déverrouiller le bouton si une erreur survient\n      setTransactionInProgress(false);  // Réinitialise l'état de la transaction\n      return;\n    }\n    \n    // Vérifie que le contrat est bien initialisé\n    if (!contractInstance) {\n      console.error(\"Le contrat n'est pas initialisé.\");\n      setLoading(false);\n      setTransactionInProgress(false);\n      return;\n    }\n\n    // Vérifie que le produit est bien sélectionné\n    if (!productId || !productInfo[productId]) {\n      alert(\"Veuillez sélectionner un produit valide et essayer de nouveau.\");\n      setLoading(false);\n      setTransactionInProgress(false);\n      return;\n    }\n\n    // Vérifie que l'utilisateur est sur le bon réseau\n    const isCorrectNetwork = await checkNetwork();\n    if (!isCorrectNetwork) {\n      setLoading(false);\n      setTransactionInProgress(false);\n      return;\n    }\n\n    // Vérifier que le provider est disponible\n    if (!provider) {\n      alert(\"Reconnexion au provider effectuée. Veuillez renouveler l'opération.\");\n      await resetProvider();\n      setLoading(false);\n      setTransactionInProgress(false);\n      return;\n    }\n      \n\n    // Récupération du prix en USD depuis IPFS\n    let fetchedPriceInUsd = await fetchProductInfo(productId);\n    if (fetchedPriceInUsd <= 0) {\n      alert(\"Le prix du produit est invalide.\");\n      setLoading(false);\n      setTransactionInProgress(false);\n      return;\n    }\n\n    console.log(\"Prix du produit en USD récupéré dans handlePayment:\", fetchedPriceInUsd);\n\n\n    // Récupération du taux de conversion BNB/USD\n    const bnbToUsdRate = await getBnbToUsdRate();\n    if (bnbToUsdRate <= 0) {\n      alert(\"Erreur de récupération du taux de conversion BNB/USD.\");\n      setLoading(false);\n      setTransactionInProgress(false);\n      return;\n    }\n\n    // Récupérer les détails du produit\n    const productDetails = productInfo[productId];\n\n    if (!productDetails || !productDetails.exists || productDetails.price <= 0) {\n      alert(\"Produit invalide ou prix incorrect.\");\n      setLoading(false);\n      setTransactionInProgress(false);\n      return;\n    }\n\n    // --- Ajout de la fonction pour récupérer le prix du produit ---\n    let amountIn = 0;\n    try {\n      // Utilisation directement de fetchedPriceInUsd\n      amountIn = fetchedPriceInUsd;\n\n      // Vérification de la devise et calcul du montant à envoyer\n      if (selectedCurrency === 'USDT') {\n        amountIn = fetchedPriceInUsd; // Utilise directement le prix en USD\n      } else if (selectedCurrency === 'BNB') {\n        amountIn = fetchedPriceInUsd / bnbToUsdRate; // Conversion de USD en BNB\n      } else {\n        alert(\"Devise non supportée pour ce paiement.\");\n        setLoading(false);\n        setTransactionInProgress(false);\n        return;\n      }\n\n      // Logs de vérification\n      console.log(\"Prix du produit en USD:\", fetchedPriceInUsd);\n      console.log(\"Taux de conversion BNB/USD:\", bnbToUsdRate);\n      console.log(\"Montant en BNB à envoyer:\", amountIn);\n\n      // Vérifier que amountIn est valide et non nul avant d'envoyer la transaction\n      if (parseFloat(amountIn) <= 0) {\n        alert(\"Le montant à payer est invalide (0 ou négatif).\");\n        setLoading(false);\n        setTransactionInProgress(false);\n        return;\n      }\n\n      // Convertir le montant à un format acceptable (fixé à 18 décimales)\n      amountIn = parseFloat(amountIn).toFixed(18);\n      console.log('Montant final pour la transaction:', amountIn);\n\n      // Envoyer la transaction\n      await checkAllowance(amountIn);  // Passe amountIn ici\n      await payForProduct(productId, amountIn);  // Passe amountIn ici\n\n      await sendTransaction(amountIn, fetchedPriceInUsd);\n\n      console.log(\"Transaction envoyée.\");\n\n    } catch (error) {\n      console.error(\"Erreur lors de l'envoi de la transaction:\", error.message);\n      alert(\"Une erreur s'est produite lors de l'envoi de la transaction. Vérifiez votre solde et les paramètres.\");\n    } finally {\n      setLoading(false);  // Permet de déverrouiller le bouton après l'exécution\n      setTransactionInProgress(false);  // Réinitialise l'état de la transaction\n    }\n};\n\n  \n\n  \n  \n  // Mise à jour des informations du produit sélectionné\n  const updateProductInfo = useCallback((selectedProductId) => {\n    setProductId(selectedProductId);\n    \n    const price = fetchProductInfo(selectedProductId);\n  \n    // Ajout de la vérification de prix\n    if (price !== null && price > 0) {\n      const newProductDetails = {\n        exists: true,\n        price,\n        title:\n          selectedProductId === 'product1'\n            ? 'Indicateur Daily'\n            : selectedProductId === 'product2'\n            ? 'Indicateur 4h/1h'\n            : selectedProductId === 'product3'\n            ? 'Indicateur 15mn'\n            : 'Produit inconnu',\n      };\n  \n      setProductPrice(price);\n      setProductInfo(prevInfo => ({\n        ...prevInfo,\n        [selectedProductId]: newProductDetails,\n      }));\n  \n      // Debug pour vérifier les valeurs\n      console.log(\"Produit sélectionné:\", selectedProductId);\n      console.log(\"Prix du produit récupéré:\", price);\n      \n      if (selectedCurrency === 'USDT') {\n        setConvertedPrice(price.toString());\n      } else if (selectedCurrency === 'BNB' && bnbToUsdRate > 0) {\n        setConvertedPrice((price / bnbToUsdRate).toString());\n      }\n    } else {\n      // Log d'erreur si le prix est invalide\n      console.error(\"Prix invalide ou produit non trouvé.\");\n      alert(\"Produit invalide ou prix incorrect.\");\n    }\n  }, [selectedCurrency, bnbToUsdRate]);\n  \n\nuseEffect(() => {\n  if (selectedCurrency === 'USDT') {\n    // Récupérer le prix en USD pour USDT\n    const priceInUsd = fetchProductInfo(productId);\n    setConvertedPrice(priceInUsd.toString());\n  } else if (selectedCurrency === 'BNB') {\n    // Récupérer le prix en USD et effectuer la conversion pour BNB\n    const priceInUsd = fetchProductInfo(productId);\n    setConvertedPrice((priceInUsd / bnbToUsdRate).toString());\n  }\n}, [productId, selectedCurrency, bnbToUsdRate]); // Assure-toi que toutes les dépendances sont présentes\n\n  \nconst handleCurrencyChange = (event) => {\n  setSelectedCurrency(event.target.value);\n};\n\n  \n  \n\n  return (\n    <div className=\"App\">\n      {/* Afficher un message de chargement si `loading` est true */}\n      {loading && <div>Chargement des produits...</div>}\n\n      {/* Contenu principal */}\n      <div className=\"parallax-container\">\n        <video id=\"video-background\" autoPlay loop muted>\n          {/* Remplace la source locale par l'URL IPFS */}\n          <source \n            src=\"https://gateway.pinata.cloud/ipfs/QmPZ8v3KzeyH2Dqz29TZFWe4kswkUETJyesZFCFULtagwv\" \n            type=\"video/mp4\" \n          />\n          Votre navigateur ne supporte pas les vidéos HTML5.\n        </video>\n\n        {/* Contenu défilant */}\n        <div className=\"content\">\n          \n\n          {/* Bouton de connexion du wallet en haut à droite */}\n          <div className=\"wallet-connect-button\">\n            <button\n      \n              onClick={connectWallet}\n              disabled={walletConnected} // Désactive le bouton une fois connecté\n            >\n              {walletConnected ? (\n                <>\n                  <span>Wallet connecté : {walletAddress}</span>\n                  <span className=\"arrow-icon\">→</span> {/* Icône flèche */}\n                </>\n              ) : (\n                'Connecter le wallet'\n              )}\n            </button>\n          </div>\n\n          {/* Conteneur du formulaire de paiement */}\n          <div className=\"payment-wrapper\">\n            <h1> Les Indicateurs à Levier </h1>\n\n            {productId && productInfo[productId] ? (\n              <>\n                <p>Produit choisi : {productInfo[productId].title}</p>\n                <p>Prix du produit : {convertedPrice} {selectedCurrency}</p>\n                <p>Le produit est {productInfo[productId].exists ? 'disponible' : 'indisponible'}</p>\n              </>\n            ) : (\n              <p>Veuillez choisir un produit.</p>\n            )}\n\n            <select onChange={(e) => updateProductInfo(e.target.value)} value={productId}>\n              <option value=\"\">Choisi Ton Indicateur</option>\n              <option value=\"product1\">Indicateur Daily</option>\n              <option value=\"product2\">Indicateur 4h/1h</option>\n              <option value=\"product3\">Indicateur 15mn</option>\n              \n            </select>\n\n            <select onChange={handleCurrencyChange} value={selectedCurrency}>\n              <option value=\"USDT\">USD</option>\n              <option value=\"BNB\">BNB</option>\n            </select>\n\n            {/* Bouton de paiement */}\n            <button onClick={handlePayment} disabled={loading || transactionInProgress}>\n              {loading || transactionInProgress ? \"Paiement en cours...\" : \"Acheter\"}\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  \n  \n};\n\n\nexport default App;\n\n\n\n\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}